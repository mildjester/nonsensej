<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nonsense J</title>
    <link>/</link>
    <description>Recent content on Nonsense J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 07 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WindowsのMySQL Workbenchで2段SSH踏み台で接続する</title>
      <link>/posts/2021/03/07/windows-localforward-mysql-workbench/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/03/07/windows-localforward-mysql-workbench/</guid>
      <description>環境  Windows 10 MySQL Workbench 8.0 WSL2 (Ubuntu 20.04)   やりたいこと 作業PCからDBに接続するまでに2段階のSSH接続を挟む環境があるとします。
この環境で作業PC(Windows)からMySQL WorkbenchでDBに接続します。
基本的なSSH操作はWSL上でコマンドを打つ前提とします。
Windows上でSSH操作をする場合は後述のSSHコンフィグのパスはWindows用に読み替えてください。
(SSHコマンドや秘密鍵パスなど)
駄目なパターン WSL上の~/.ssh/configに以下の記載をしていれば、アプリケーションサーバーへSSH接続はできます。
Host fumidai-server HostName 111.111.111.111 User my-user IdentityFile ~/.ssh/id_rsa_hoge IdentitiesOnly yes Host app-server HostName 222.222.222.222 User my-user ProxyCommand ssh -W %h:%p fumidai-server IdentityFile ~/.ssh/id_rsa_hoge ForwardAgent yes ※HostName, User, IdentityFileは適宜読み替えてください。
ここで指定しているProxyCommand設定により、
app-serverへSSHする時はfumidai-serverを経由するようになります。
しかし、MySQL WorkbenchのTCP/IP over SSHでapp-serverを指定して
fumidai-server ⇒ app-server ⇒ DB
という接続をしようとしても接続できません。
(MacやUbuntu等であれば接続できる。なぜかWindowsだけ不可。)
良いパターン MySQL WorkbenchのTCP/IP over SSHは利用せずに、
SSH Local ForwardでDBに繋がるようにしておいてからMySQL Workbenchを繋ぎます。</description>
    </item>
    
    <item>
      <title>【Laravel】Observerが実行されない</title>
      <link>/posts/2021/02/21/larave-observer-stop/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/02/21/larave-observer-stop/</guid>
      <description>環境  Laravel 5.8   Laravelで設定したObserverの処理が実行されない事があったので、その際の調査メモです。
事象 LaravelのObserverを使いModelのupdating時に処理が走るようにしようと思ったのですが、
updatingの処理を書いても実行されませんでした。
updatingの処理と同クラス内でupdated, saving, savedの処理を記載すると実行されたので、
Observerのクラス自体が読み込まれていない訳では無さそうでした。
原因 今回Observerを設定しようとしていたクラスには既に別のObserverが設定されていました。
それ自体は問題ないのですが、その既存のObserverのupdatingにて生成した値をreturnしていました。
Laravelのソースを読むと、同イベントのObserverを複数設定している場合、
先行のObserverで値をreturnしてしまうと後続のObserverが実行されないようでした。
https://github.com/laravel/framework/blob/5.8/src/Illuminate/Events/Dispatcher.php#L198-L203
特に理由がない限り、Observerの処理内でreturnはしないほうが良さそうです。</description>
    </item>
    
    <item>
      <title>Howdyを使ってubuntuで顔認証する</title>
      <link>/posts/2021/02/17/ubuntu-howdy/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/02/17/ubuntu-howdy/</guid>
      <description>環境  Ubuntu 20.10 Thinkpad T480  参考  https://github.com/boltgolt/howdy https://wiki.archlinux.jp/index.php/Howdy   Windowsを使っている時に顔認証（Windows Hello）でログインできるのがとても便利だったのでUbuntuでも実現してみます。
UbuntuではHowdyというアプリケーションで実現できそうなので設定してみました。
赤外線カメラ情報の取得 顔認証には赤外線カメラを使います。
カメラ情報を取得するためにv4l-utilsを利用します。
v4l-utilsインストール sudo apt-get install v4l-utils カメラ情報確認 以下コマンドでカメラ情報を確認します。
赤外線カメラ(IR Camera)の項目を確認します。
v4l2-ctl --list-devices --all # 以下出力結果で見る場所 Integrated IR Camera: Integrate (usb-0000:00:14.0-5): /dev/video0　←赤外線カメラのパスはvideo0※ /dev/video1 Format Video Capture: Width/Height : 340/340　←キャプチャサイズは340×340 ※Thinkpat T480だとvideo1も列挙されてましたが、後々の設定でvideo1を指定すると動きませんでした。
Howdy導入 Howdyのインストール まず必要なソフトをインストールします。
sudo add-apt-repository ppa:boltgolt/howdy sudo apt update sudo apt install howdy 途中で以下のようにセキュア具合を聞かれます。
自分の好みや状況に合わせて選択してください。
(f:早さ重視、b:バランス型、s:セキュリティ重視)
After detection, Howdy knows how certain it is that the match is correct.</description>
    </item>
    
    <item>
      <title>ubuntuで多機能マウスを設定する</title>
      <link>/posts/2021/02/14/ubuntu-mouse-keymap/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/02/14/ubuntu-mouse-keymap/</guid>
      <description>環境  Ubuntu 20.10 Elecom M-DT2DR BK(マウス)  参考  https://help.ubuntu.com/community/MouseCustomizations https://wiki.archlinux.jp/index.php/Xbindkeys   Ubuntuにマルチボタンのマウス（Elecom M-DT2DR）を接続すると、何をしなくても通常のマウス操作や「進む」「戻る」ボタンは機能します。
ですが、機能ボタン（Fn 1〜3）には何もマッピングされていないので、音量操作をマッピングします。
手順 インストール まず必要なソフトをインストールします。
sudo apt install xbindkeys ボタン番号の取得 次にマウスのボタン番号を取得します。
まず以下コマンドを実行してボタン検知ができる状態にします。
xev 現れる白い四角が書かれたウィンドウにマウスカーソルを持っていき、その状態でマウスのボタンを押すとコンソールに情報が表示されます。
例えば私のマウス（M-DT2DR）のFn 1であれば以下のようにbutton 10と表示されます。
ButtonRelease event, serial 36, synthetic NO, window 0x4000001, root 0x7ed, subw 0x4000002, time 1758091, (31,39), root:(1951,76), state 0x0, button 10, same_screen YES 同様に、Fn 2はbutton 11でFn 3はbutton 12でした。
ボタンのマッピング ボタンマッピングするための設定ファイルを作成します。
設定ファイルは空ファイルから始めても良いのですが、一応デフォルト値から生成しておきます。
xbindkeys --defaults &amp;gt; ~/.xbindkeysrc 作成した設定ファイルに以下を追記します。
# Increase volume &amp;quot;pactl set-sink-volume @DEFAULT_SINK@ +1000&amp;quot; b:10 # Decrease volume &amp;quot;pactl set-sink-volume @DEFAULT_SINK@ -1000&amp;quot; b:11 # Mute volume &amp;quot;pactl set-sink-mute @DEFAULT_SINK@ toggle&amp;quot; b:12 設定ファイルを保存したら、以下コマンドで読み込みます。</description>
    </item>
    
    <item>
      <title>ubuntu 20.10の初期設定</title>
      <link>/posts/2021/02/11/ubuntu-20-10-initialize/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/02/11/ubuntu-20-10-initialize/</guid>
      <description>環境  Ubuntu 20.10 ThinkPad T480   Thinkpad T480にubuntu20.10をインストールした際のメモです。
日本語入力設定 そのままでも日本語入力はできますが、入力ソースをMozcに切り替えたりしないといけないので 入力ソースのMozcの優先度を高くします。
アプリランチャーより『設定』を開き、『地域と言語』を開きます。 そこの入力ソースに「日本語」と「日本語(Mozc)」が並んでいるので 「日本語(Mozc)」が上にくるように並べ替えます。
各入力ソースの左端の6丸をドラッグすれば順番を入れ替えられます。
IMEのON/OFFをMac風にする アプリランチャーより『Mozcの設定』を開き、『一般』タグを開きます。 「キー設定の選択」の横にある「編集」ボタンをクリックするとキー設定を変更できます。
そこでHenkan/Hiragana/Katakanaあたりに『IME有効』を割り当て、 Muhenkanに『IME無効』を割り当てます。
これでMacのようにIMEのON/OFFを切り替えられるようになりました。
CapsLockをCtrlに、半角/全角をEscにする こちらもMac風になる設定です。 以下のコマンドを実行するとCapsLockがCtrlになり、半角/全角キーがEsc扱いになります。
setxkbmap -option ctrl:nocaps,japan:hztg_escape しかし、これだけだと再起動後に戻ってしまうので キーボードの設定ファイルにも設定を記載しておきます。
sudo vim /etc/default/keyboard 以下の設定を追記します。
XKBOPTIONS=[&amp;quot;ctrl:nocaps&amp;quot;,&amp;quot;japan:hztg_escape&amp;quot;] tiling機能をOFFにする デフォルトだとウィンドウを画面端にドラッグすると勝手に最大化します。 無くてもいい機能なので以下コマンドで無効化します。
gsettings set org.gnome.mutter edge-tiling false 諸々インストール 基本セット sudo apt install vim curl npm PHP sudo apt install php7.4 composer php7.4-bcmath php7.4-common php7.4-gd php7.4-json php7.4-mbstring php7.4-mysql php7.4-xml php7.4-xmlrpc MySQL Workbench 公式ページからdebをダウンロードしてインストールしました。 https://dev.mysql.com/downloads/workbench/</description>
    </item>
    
    <item>
      <title>修正したファイルだけPHP_CodeSnifferでチェックする</title>
      <link>/posts/2021/02/06/phpcs-git-diff/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/02/06/phpcs-git-diff/</guid>
      <description>PHP_CodeSniffer (phpcs)を使ってコードのPSR2のフォーマットチェックをする際、
普段からphpcsを使っているプロジェクトで無いと警告が大量に出て見切れません。
そこで、git diffを使って、今回修正したファイルだけphpcsでチェックすることにしました。
起点ブランチを作る まず、修正の起点ブランチを用意します。
起点ブランチとは、phpcsでチェックしたい修正をし始める前の状態のブランチです。
他の人が更新していなければ既存のマージ先ブランチ(master, develop等)で良いですが、
他の人がマージ先ブランチを更新していた場合はgit diffで他の人の修正分も差分として出てしまうのでダメです。
(自分の修正分だけをgit diffで出すオプションはたぶん無いはず)
その場合はgit logで自分が修正を始めた１つ前のコミットIDを確認して、
git checkout -b tempBranch 『コミットID』でブランチを作ってしまうのが簡単だと思います。
tempBranchの部分は作成する起点ブランチ名なので、なんでも良いです。
phpcsでチェックする 起点ブランチが用意できたら早速phpcsでチェックします。
チェックしたいブランチになっている状態で以下コマンドを実行します。
git diff 『起点ブランチ』 --name-only | xargs phpcs --standard=&amp;quot;PSR2&amp;quot; これで修正したファイルについてのみphpcsを実行できました。
※補足 phpcsの実行パスについては自分の環境に合わせて修正してください。
例えばcomposerでプロジェクトに入れたphpcsを利用する場合は./vendor/bin/phpcsという風になると思います。</description>
    </item>
    
    <item>
      <title>Googleフォームを使って迷子札を作る</title>
      <link>/posts/2021/01/25/lost-tag-qr/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/25/lost-tag-qr/</guid>
      <description>子供たちが自由に走り回れるようになり、ショッピングセンターやアミューズメント施設で迷子になるリスクが高くなったので迷子札の作成を検討しました。
迷子札の条件は以下のように設けました。
 子供の持ち物等に付けておく 子供を見つけてくれた人が親に連絡できるようにする 自分の連絡先を札に直接書くのは嫌 連絡先が悪意ある人に漏れた時にすぐに変更できるようにしたい 捨てメアドを作るのは管理など面倒なので嫌  そこで、Googleフォームです。
以下の流れで迷子札を作ってみます。
① Googleフォームで問い合わせフォームを作る。
② 作成したGoogleフォームのURLをQRコード化する。
③ QRコードが入ったアクセサリ等を作成する。
今回は迷子札想定で作成していますが、QRコードをシールにしてスマホや旅行バッグ等に貼っておけば、
紛失したとしても善良な人が拾ってくれたら連絡が来るかもしれません。
前提条件 既にGoogleアカウント(Gmail)を持っていること。
手順詳細 Googleフォーム作成 まず、Googleフォームで問い合わせフォームを作ります。
https://www.google.com/intl/ja_jp/forms/about/
フォームの内容は連絡者と連絡が取れる程度で良いと思います。
フォームの設定を変えます。
右上の歯車アイコンをクリックして、設定ポップアップを開きます。
まず全般タブでは基本的に全てのチェックを外しておきます。
プレゼンテーションタブの「確認メッセージ」で連絡をしてくれた人に表示するメッセージを変更できます。
テストフォームでは無いので、テストタブは何もしません。
次に連絡してもらった時の受け取り方を設定します。
回答タブを選択して『…』が縦に並んでいるアイコンをクリックします。
そこで『新しい回答についてのメール通知を受け取る』にチェックを入れます。
これで誰かがGoogleフォームを送信してくれたら自分宛にメールが届きます。
連絡を受けた履歴をスプレッドシートに残しておきたいなら『回答先を選択』で選択しておきます。
これでフォームは完成です。
右上の『送信』よりフォームのURLを取得します。
QRコード作成 QRコード生成サービスを使ってGoogleフォームのURLをQRコード化します。
無料で使えるところだと以下のようなサービスがあります。
https://qr.quel.jp/
アクセサリー作成 生成したQRコードは色んな使い方ができます。
シールにしてもいいし、アクセサリーにしてもいいと思います。
今回はアクセサリーを作ってみました。
利用したのは以下のサービスです。
https://originalprint.jp/
アクセサリーのデザインは自分で決められます。
こんな感じで作れます。
実際にスマホでQRコードを読み込んでGoogleフォームを開き、連絡先等を送信してみます。
自分のGmail宛にGoogleフォームが送信された旨のメールが届けば成功です。
（フォーム送信からメール着まで、だいたい1分弱のタイムラグがあります）
これを子供のカバンに付けておきます。
GoogleフォームのURLが悪意ある人に漏れた場合はGoogleフォームを作り変えればOKです。</description>
    </item>
    
    <item>
      <title>LaravelのQueue内でAuth::user()が取れたり取れなかったりする</title>
      <link>/posts/2021/01/13/laravel-auth-user/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/13/laravel-auth-user/</guid>
      <description>環境  Laravel 5.8   Laravelで『データが更新されたらアラートメールで更新者情報を送る』というイベントリスナーを作ったのですが、
その中でAuth::user()の値が環境により「更新者情報」だったり「null」だったりしました。
このイベントリスナーで登録した処理はキュー(Queue)に登録されて非同期に処理されるようにしていたので、
非同期処理では当然ながらAuth::user()でユーザー情報は取れません。
なので、nullになるのは妥当な動きでした。
では、なぜ環境によりユーザー情報が取れてしまったのかというと
それは.envのQUEUE_DRIVERの値が原因でした。
QUEUE_DRIVER=database等にしているとキューの処理は非同期に処理されるのですが、
QUEUE_DRIVER=syncではキューの処理も同期的に処理されるようになります。
キューが同期的に実行されるとユーザーの情報がAuth::user()で取得できる状態でキューの処理が走るので、
ローカル環境などでQUEUE_DRIVER=syncにしているとキュー内でAuth::user()が動いてしまいます。
これも、ちゃんと.envが本番相当になっている環境でテストをすれば見つけられるので、
ローカル検証だけでリリースをするのではなく、ちゃんと本番相当の環境でもテストしましょう。</description>
    </item>
    
    <item>
      <title>Typescript &#43; Vue.jsで子コンポーネントのプロパティにアクセスする</title>
      <link>/posts/2021/01/07/git-revert-revert/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/07/git-revert-revert/</guid>
      <description>Typescript + Vue.jsの構成で親コンポーネントから子コンポーネントのプロパティにアクセスする場合、
普通のjavascriptと同じように実装するとエラーとなる場合があります。
例えば、以下のように記載するとします。
# template &amp;lt;HogeChild ref=&amp;quot;hogeChildRef&amp;quot; /&amp;gt; # script import HogeChild from &amp;quot;〜対象ファイルパス〜&amp;quot;; @Component({ components: { HogeChild } }) export default class HogeParent extends Vue { changeChildFlg(): void { this.$refs.hogeChildRef.someFlg = true; } } すると以下のエラーが発生することがあります。
Property &#39;someFlg&#39; does not exist on type &#39;Vue | Element | Vue[] | Element[]&#39;. Property &#39;someFlg&#39; does not exist on type &#39;Vue&#39;.Vetur(2339) この場合、Typescriptを使う場合は子コンポーネント呼び出し時にも型を指定してあげる必要があります。
子コンポーネント呼び出し部分を以下のようにすると動きます。
 changeChildFlg(): void { const hogeChildRef = &amp;lt;HogeChild&amp;gt;this.$refs.hogeChildRef; hogeChildRef.</description>
    </item>
    
    <item>
      <title>gitで一旦取り消しRevertをしたら、RevertのRevertをすべし</title>
      <link>/posts/2020/12/28/git-revert-revert/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/28/git-revert-revert/</guid>
      <description>いろんなプロジェクトを渡り鳥していると、「間違ってmaster/developにマージしちゃいました」案件がちょいちょいあります。
その場合、基本的にはmaster/developでgitのRevertをして対応してました。
でも、その後RevertのRevertをするのが漏れてしまうパターンがよくあります。
RevertのRevertが必要だと分かっていて漏れてしまうのは仕方ないのですが、
以前手伝っていたプロジェクトで「え？なんで必要なの？」っていう人がいたのを思い出したので記事にしてみました。
 まずこんなソースがmasterブランチにあったとします。
ここで$hogeだけでなく$foooという値も返せるようにしたくなったとします。
ブランチ「feature/fooo」を切って修正し、masterにマージします。
ここで、$foooを返すメソッドを作ってなかったことに気づき、masterでrevertします。
「feature/fooo」にメソッドを追加し、masterにマージします。
クラス変数やコンストラクタの処理が残っているように見えます。
※なお、ここでコンフリクトは起きていません。
できあがったソースがこちらです。
最後に追加したメソッドのみが追加されており、クラス変数やコンストラクタの処理は入っていません。
これだと想定した挙動になりませんね。
 勘違いされる要素として、Revertは「対象コミットを取り消す」処理だと思っている人がたまにいます。
Revertはコミットを取り消すのではなく「対象コミットを打ち消すような修正コミットを新たに発行する」処理です。
Revert対象のコミットが無かったことになっている訳ではありません。
なので、Revertコミットはそれを更にRevertしないと、Revertコミットの修正が残ってしまいます。
手順をまとめると以下のようになります。
ダメなパターン  作業ブランチからmasterにマージする。 masterでリバートする。 作業ブランチで修正を続ける。 作業ブランチからmasterにマージする。  良いなパターン  作業ブランチからmasterにマージする。 masterでリバートする。 作業ブランチにmasterをマージする。(ダメなパターンで漏れてる) 作業ブランチでRevertをRevertする。(ダメなパターンで漏れてる) 作業ブランチで修正を続ける。 作業ブランチからmasterにマージする。  という訳でRevertした修正を捨てる訳でなければRevertのRevertをしましょう。</description>
    </item>
    
    <item>
      <title>javascriptでライブラリ無しでオートコンプリート</title>
      <link>/posts/2020/10/25/javascript-autocomplete/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/10/25/javascript-autocomplete/</guid>
      <description>javascriptを使ってイチからオートコンプリートを実装しました。
オートコンプリートは何もなければライブラリを使って実装するのが早いですが、 イチから自分で実装する機会があったのでメモを残します。
要件  PC(Chrome, IE, Safari), Android(Chrome), iPhone(safari)に対応する。 入力したキーワードを含む都道府県を選択肢として表示する。 選択肢をクリックしたら選択したこととする。 PCでは選択肢からカーソルキー&amp;amp;エンターキーでも選択できるようにする。  この4つ目が肝です。
対応方法 こちらに動くものを用意してあります。
デモ
HTMLは以下のようになっているとします。
テキストボックスに文字を入力するとulタグ内に選択肢が表示されるようにします。
&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;keyword&amp;quot; placeholder=&amp;quot;都道府県名を入れてください&amp;quot; autocomplete=&amp;quot;off&amp;quot;/&amp;gt; &amp;lt;ul id=&amp;quot;outputBox&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt; javascriptは以下の通りです。
// 都道府県一覧 const prefectureList = [&#39;北海道&#39;,&#39;青森県&#39;,&#39;岩手県&#39;,&#39;宮城県&#39;,&#39;秋田県&#39;,&#39;山形県&#39;,&#39;福島県&#39;, &#39;茨城県&#39;,&#39;栃木県&#39;,&#39;群馬県&#39;,&#39;埼玉県&#39;,&#39;千葉県&#39;,&#39;東京都&#39;,&#39;神奈川県&#39;, &#39;新潟県&#39;,&#39;富山県&#39;,&#39;石川県&#39;,&#39;福井県&#39;,&#39;山梨県&#39;,&#39;長野県&#39;,&#39;岐阜県&#39;, &#39;静岡県&#39;,&#39;愛知県&#39;,&#39;三重県&#39;,&#39;滋賀県&#39;,&#39;京都府&#39;,&#39;大阪府&#39;,&#39;兵庫県&#39;, &#39;奈良県&#39;,&#39;和歌山県&#39;,&#39;鳥取県&#39;,&#39;島根県&#39;,&#39;岡山県&#39;,&#39;広島県&#39;,&#39;山口県&#39;, &#39;徳島県&#39;,&#39;香川県&#39;,&#39;愛媛県&#39;,&#39;高知県&#39;,&#39;福岡県&#39;,&#39;佐賀県&#39;,&#39;長崎県&#39;, &#39;熊本県&#39;,&#39;大分県&#39;,&#39;宮崎県&#39;,&#39;鹿児島県&#39;,&#39;沖縄県&#39;]; // in/out要素を変数に入れておく const inputElm = document.getElementById(&#39;keyword&#39;); const outboxElm = document.getElementById(&#39;outputBox&#39;); /** * テキストボックスに文字入力時 */ inputElm.addEventListener(&#39;compositionend&#39;, function(e) { // タブキーは次の要素に移動させるのでスルー if (e.key == &#39;Tab&#39;) { return; } outboxElm.innerHTML = &#39;&#39;; let _this = this; setTimeout(function(){ // 入力された文字を含む都道府県を抽出する prefectureList.</description>
    </item>
    
    <item>
      <title>swiper.scssがwebpackで取り込まれない</title>
      <link>/posts/2020/09/15/webpack-swiper-env-diff/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/09/15/webpack-swiper-env-diff/</guid>
      <description>環境  webpack 4.44.1 swiper 6.0.0   事象 webpackでswiperを取り込んでビルドしようとした時の話。
swiper.scssがなぜか開発環境では取り込めてて、本番環境では取り込めてないという事象が起きました。
つまり、↓だとswiper.scssが取り込まれたCSSが出力されるんですが
node node_modules/webpack/bin/webpack.js --mode development ↓だとswiper.scssが取り込まれていないCSSが出力されます。
node node_modules/webpack/bin/webpack.js --mode production 対応 原因は結局不明だったのですが
swiperのバージョンを6.0.0から6.2.0に変更したら治りました。
事象が起きているときの状態 npmインストールしていたパッケージ
&amp;quot;devDependencies&amp;quot;: { &amp;quot;css-loader&amp;quot;: &amp;quot;^4.3.0&amp;quot;, &amp;quot;mini-css-extract-plugin&amp;quot;: &amp;quot;^0.11.2&amp;quot;, &amp;quot;sass&amp;quot;: &amp;quot;^1.26.10&amp;quot;, &amp;quot;sass-loader&amp;quot;: &amp;quot;^10.0.2&amp;quot;, &amp;quot;style-loader&amp;quot;: &amp;quot;^1.2.1&amp;quot;, &amp;quot;swiper&amp;quot;: &amp;quot;^6.0.0&amp;quot;, &amp;quot;webpack&amp;quot;: &amp;quot;^4.44.1&amp;quot;, &amp;quot;webpack-cli&amp;quot;: &amp;quot;^3.3.12&amp;quot; } webpack.config.js
const path = require(&#39;path&#39;); const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;); module.exports = { entry: path.resolve(__dirname, &#39;src/js/index.js&#39;), output: { path: path.resolve(__dirname, &amp;quot;dist&amp;quot;), filename: &#39;main.js&#39;, }, module: { rules: [ { test: /\.</description>
    </item>
    
    <item>
      <title>Windows Terminalの導入</title>
      <link>/posts/2020/09/04/windows-terminal-install/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/09/04/windows-terminal-install/</guid>
      <description>Windows TerminalでUbuntuを使えるようにします。
Windows Terminalのインストール Microsoft Storeで「Windows Terminal」を検索してインストールするだけです。
Windows TerminalのデフォルトをUbuntuにする Windows Terminalを起動して設定を開きます。
settings.jsonが開くので、「profiles &amp;gt; list」の中からUbuntuのguidを探します。
{ &amp;quot;guid&amp;quot;: &amp;quot;{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}&amp;quot;, ←これ &amp;quot;hidden&amp;quot;: false, &amp;quot;name&amp;quot;: &amp;quot;Ubuntu-20.04&amp;quot;, &amp;quot;source&amp;quot;: &amp;quot;Windows.Terminal.Wsl&amp;quot; }, 見つけたguidを「defaultProfile」に設定します。
&amp;quot;defaultProfile&amp;quot;: &amp;quot;{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}&amp;quot;, ←ここに入れる 起動時のディレクトリを指定する Windows Terminalを起動した際に開く場所はWindows側のホームディレクトリになっています。
Ubuntuを使う際はUbuntu側のホームディレクトリから始まって欲しいので変更します。
settings.jsonのUbuntuの設定にstartingDirectoryを追加します。
Ubuntu内の/home/hogeuserからスタートしたい場合は以下のように設定します。
{ &amp;quot;guid&amp;quot;: &amp;quot;{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}&amp;quot;, &amp;quot;hidden&amp;quot;: false, &amp;quot;name&amp;quot;: &amp;quot;Ubuntu-20.04&amp;quot;, &amp;quot;source&amp;quot;: &amp;quot;Windows.Terminal.Wsl&amp;quot;, &amp;quot;startingDirectory&amp;quot;: &amp;quot;//wsl$/Ubuntu-20.04/home/hogeuser&amp;quot; ←これを追加 }, フォントを指定する Ubuntuのシェルはfishを利用しているのですが、fishのテーマによってはフォントを変更する必要があります。
fishの導入方法についてはこちら
settings.jsonのUbuntuの設定にfontFaceを追加します。
もしフォントサイズを変更したい場合はfontSizeも追加してください。
フォントを「Cascadia Code PL」に変更し、フォントサイズを11にする場合は以下のようになります。
{ &amp;quot;guid&amp;quot;: &amp;quot;{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}&amp;quot;, &amp;quot;hidden&amp;quot;: false, &amp;quot;name&amp;quot;: &amp;quot;Ubuntu-20.04&amp;quot;, &amp;quot;source&amp;quot;: &amp;quot;Windows.Terminal.Wsl&amp;quot;, &amp;quot;startingDirectory&amp;quot;: &amp;quot;//wsl$/Ubuntu-20.04/home/hogeuser&amp;quot;, &amp;quot;fontFace&amp;quot;: &amp;quot;Cascadia Code PL&amp;quot;, ←これを追加 &amp;quot;fontSize&amp;quot;: 11 ←これを追加 }, </description>
    </item>
    
    <item>
      <title>Windows10でキー配置を変更する</title>
      <link>/posts/2020/09/04/win10-keymap-change/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/09/04/win10-keymap-change/</guid>
      <description>参考  Ctrl2Capツールで［Ctrl］と［CapsLock］キーを入れ替える（Windows編）|@IT   Windowsのキー配置を変更してMac風にします。
CapsLockをCtrlにする CapsLockは使うことがないのでCtrlキーに割り当ててしまいます。
MacのCtrlキーと同じ位置にCapsLockはあるので、Macを使っていた人にも操作しやすくなると思います。
変更するには『Ctrl2Cap』を使います。
https://docs.microsoft.com/ja-jp/sysinternals/downloads/ctrl2cap
インストール手順は以下の通りです。
①ctrl2capのZIPファイルをダウンロードして解凍する。
②PowerShellを管理者権限で起動し、①の解凍したフォルダに移動する。
③.\ctrl2cap.exe /installを実行する。
これで『Ctrl2cap successfully installed.』と表示されたらインストール成功です。
PCを再起動するとCapsLockがCtrlとして使えるようになります。
変換/無変換キーでIMEをON/OFFする Mac風にスペースバーの左右のキーでIMEをON/OFFできるようにします。
設定手順は以下の通りです。
①設定を開く。
②設定の検索で『日本語IMEの設定』を検索して開く。
③『キーとタッチのカスタマイズ』を開く
④『各キーに好みの機能を割り当てる』をオンにする。
⑤無変換キーを「IME-オフ」に割り当てる。
⑥変換キーを「IME-オン」に割り当てる。</description>
    </item>
    
    <item>
      <title>Windows10で開発PCをセッティングする。</title>
      <link>/posts/2020/09/04/win10-initial-setting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/09/04/win10-initial-setting/</guid>
      <description>Windows 10のWSL2やWindows Terminalが良い感じだったので
開発環境を整えてみました。
大きな作業は以下を参照
 Windowsのキー配置変更 WSL2でUbuntuを使う Windows Terminalの導入  ウィンドウが勝手に最大化しないようにする Win10はデフォルトだとウィンドウを画面の端に持っていくと勝手に最大化されてしまいます。
邪魔になることが多い機能なので無効にしてしまいます。
『設定 &amp;gt; システム &amp;gt; マルチタスク』を開き、「ウィンドウのスナップ」をオフにすれば完了です。
Dockerのインストール 以下よりDocker Desktop for Windowsをダウンロードします。
https://hub.docker.com/editions/community/docker-ce-desktop-windows
ダウンロードしてきたインストーラーを実行してインストールします。
インストール時に「Enable WSL 2 Windows Features」のチェックボックスがあるので、忘れずにチェックするようにしてください。
これでUbuntu側でもdockerコマンドが使えるようになっています。
もしWSL2より先にDockerをインストールしてしまった場合は「Settings &amp;gt; Resources &amp;gt; WSL INTEGRATION」からWLS上のDockerを有効化できます。
Visual Studio Codeのインストール 以下よりダウンロードしてインストールします。
https://azure.microsoft.com/ja-jp/products/visual-studio-code/
Ubuntu側でgitコマンドを使ってソースコードを管理している場合はWindowsからUbuntuに接続する必要があります。
そのためには『Remote - WSL』という拡張子のインストールをインストールします。
（おそらくVisual Studio Codeの初回起動時に推奨される）
MySQL Workbenchのインストール MySQL Workbenchをインストールするには「Visual C++ 2019」が必要です。
インストールされていない場合は以下よりダウンロードしてインストールしておきます。
https://support.microsoft.com/ja-jp/help/2977003/the-latest-supported-visual-c-downloads
以下よりMySQL Workbenchをダウンロードしてインストールします。
https://dev.mysql.com/downloads/workbench/</description>
    </item>
    
    <item>
      <title>WSL2でUbuntuを使えるようにする</title>
      <link>/posts/2020/09/04/win10-wsl2-ubuntu/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/09/04/win10-wsl2-ubuntu/</guid>
      <description>参考  Windows 10 用 Windows Subsystem for Linux のインストール ガイド WSL の場所を変更する|パソコン鳥のブログ   Windows 10のWLS2でUbuntu20.04を使えるようにします。
Windows 10のアップデート WSL2を使うにはWindowsのバージョン 1903以降、ビルド 18362以上である必要があります。
バージョンを確認するには「Winキー＋Rキー」で『ファイル名を指定して実行』を開き、
名前にwinverを入力して「OK」をクリックします。
Windows Updateで最新化できれば良いですが、更新が来ない場合もあるので
その場合は更新アシスタントを利用します。
https://www.microsoft.com/ja-jp/software-download/windows10
WSL2をインストールする 管理者権限でPowerShellを開いて、以下を実行します。
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart ここまで実行したら一度再起動します。
再起動後、再度PowerShellを管理者権限で開き、以下コマンドを実行します。
wsl --set-default-version 2 もしカーネルの更新が必要という旨のメッセージが表示された場合は
以下を参考にカーネルの更新をしてから再実行します。
https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel
Ubuntuのインストール Microsoft Storeで「Ubuntu」と検索し、Ubuntu20.04をインストールします。
その後、Ubuntuを起動すると初期設定が走るので、アカウント設定等をします。
デフォルトではaptでの取得元が海外になっているので、以下コマンドで日本に変更します。
sudo sed -i -e &#39;s|archive.ubuntu.com|ftp.riken.go.jp/Linux|g&#39; /etc/apt/sources.list ここまででWSL2 でUbuntuを使えるようになりました。
ですが、デフォルトではCドライブにUbuntu用の領域をとってしまうので、Dドライブに移したいと思います。
WSLの場所を移動させるツール『LxRunOffline』を利用します。
まず、GitHubより圧縮ファイルをダウンロードして解凍しておきます。(LxRunOffline-vX.X.X-mingw.zip)
https://github.com/DDoSolitary/LxRunOffline/releases
次にWSLを配置するフォルダを作成しておきます。
本例ではD:\wslを作ります。
PowerShellを管理者権限で開き、以下コマンドで先ほど作成したフォルダに権限を付与します。</description>
    </item>
    
    <item>
      <title>EC2とECSのレコードを全てCSVに出力する</title>
      <link>/posts/2020/08/26/ec2-ecs-to-csv/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/08/26/ec2-ecs-to-csv/</guid>
      <description>環境  Linux Mint 20 Ulyana aws-cli/2.0.41 jq 1.6   前回の続きです。
前回AWS Route53のレコードをCSVに出力するシェルスクリプトを作ったので、同様にEC2・ECSの情報を出力するシェルスクリプトを作ってみます。
EC2 以下のようなシェルです。
region一覧は固定で持っているので、今後増減があった場合は手動で修正が必要です。
#!/bin/bash #region一覧 regionList=( us-east-2 us-east-1 us-west-1 us-west-2 af-south-1 ap-east-1 ap-south-1 ap-northeast-3 ap-northeast-2 ap-southeast-1 ap-southeast-2 ap-northeast-1 ca-central-1 cn-north-1 cn-northwest-1 eu-central-1 eu-west-1 eu-west-2 eu-south-1 eu-west-3 eu-north-1 me-south-1 sa-east-1 ) echo &#39;&amp;quot;AvailabilityZone&amp;quot;, &amp;quot;Name&amp;quot;, &amp;quot;PublicDnsName&amp;quot;,&amp;quot;PublicIpAddress&amp;quot;,&amp;quot;PrivateDnsName&amp;quot;,&amp;quot;PrivateIpAddress&amp;quot;&#39; for region in ${regionList[@]}; do EC2List=`aws ec2 describe-instances --region ${region} --output json --query &#39;Reservations[].Instances[]&#39;` EC2ListLen=`echo $EC2List | jq length` for i in $( seq 0 $(($EC2ListLen - 1)) ); do EC2=`echo $EC2List | jq .</description>
    </item>
    
    <item>
      <title>Route53のレコードを全てCSVに出力する</title>
      <link>/posts/2020/08/21/route53-to-csv/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/08/21/route53-to-csv/</guid>
      <description>環境  Linux Mint 20 Ulyana aws-cli/2.0.41 jq 1.6   Route53に大量のホストゾーンとレコードが登録されているアカウントで、Route53に登録されている内容を一覧化する必要があったので対応しました。
ワンライナーで実現しようと思ったのですが、希望した形にできなかったのでシェルスクリプトにしました。
必要なソフトのインストール AWS CLI AWS CLIが無い場合はインストールしておきます。
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2.html
AWS CLIの初期設定はこちら
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-quickstart.html
jq jqはjsonを整形するツールです。
Linux Mintであれば以下コマンドでインストールできます。
apt install jq Route53の内容を取得するスクリプト作成 AWS CLIでRoute53の内容をjson形式で取得し、それをjqで整形しながらCSVに出力するシェルスクリプトを作成します。
スクリプトの内容は以下の通りです。
#!/bin/bash # CSVのヘッダ出力 echo &#39;&amp;quot;HostedZone&amp;quot;,&amp;quot;DomainName&amp;quot;,&amp;quot;DomainType&amp;quot;,&amp;quot;TTL&amp;quot;,&amp;quot;Value&amp;quot;&#39; # ホストゾーン一覧を取得 HostedZones=`aws route53 list-hosted-zones --output json --query &#39;HostedZones&#39;` HostedZonesLen=`echo $HostedZones | jq length` for i in $( seq 0 $(($HostedZonesLen - 1)) ); do Zone=`echo $HostedZones | jq .[$i]` ZoneId=`echo $Zone | jq -c -r &#39;.</description>
    </item>
    
    <item>
      <title>改行コードを一括で置換する</title>
      <link>/posts/2020/08/05/replace-with-find-sed/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/08/05/replace-with-find-sed/</guid>
      <description>定期的に使うのでメモ。
Linuxサーバー上で対象ディレクトリ配下のファイルの文字コードを一括で置換するコマンドです。
以下コマンドで現ディレクトリ配下にあるphpファイルに対してCRLF(\r\n)をLF(\n)に置換します。
sudo find . -name &amp;quot;*.php&amp;quot; -type f -exec sed -i -e &amp;quot;s/\r//g&amp;quot; {} \; ※sudoは必要に応じて。全対象ファイルの編集権限があるなら不要です。
一応解説 CRLFはWindows等でよく使われる改行コードで、LFやLinuxやUnix等でよく使われる改行コードです。
まず、findコマンドの構成は以下の通り。
find {検索対象ディレクトリ} -name {検索対象の名前} -type {検索対象のタイプ} -exec {検索対象に対して実施するコマンド} -type fでファイルを対象にしています。
-name &amp;quot;*.php&amp;quot;でphpファイルを指定しているのでタイプは指定する必要が内容に思えますが、
やろうと思えばhoge.phpというディレクトリも作れない訳ではないので、念の為指定しています。
そして、-execオプションでsedコマンドを指定しています。
sedコマンドの構成は以下の通り。
sed -i -e &amp;quot;s/{置換対象の文字列}/{置換後の文字列}/g&amp;quot; 対象ファイル CRLFをLFに置換すると言いましたが、このコマンドでは正確にはCR(\r)を消しているだけです。
なので、CRLFはLFになりますし、もしCRがあれば消滅します。
(古いMacintoshではCRを改行コードとして扱っていたらしい。とりあえず現在では消滅してくれて良い。)
findの-execで実行する場合、{}に検索結果のファイル名が入ります。
そして実行したいコマンドの最後は\で閉じます。</description>
    </item>
    
    <item>
      <title>GitHubの草を炭治郎柄にする</title>
      <link>/posts/2020/07/16/bookmarklet-kimetsu/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/07/16/bookmarklet-kimetsu/</guid>
      <description>私は鬼滅の刃自体は見たことが無いのですが、それでも主人公の炭治郎の着物はよく目にします。
あの柄を見ると、ちょっとGitHubの草っぽいなと思ってました。
というわけで、GitHubの草を炭治郎の着物柄にしてみます。
Bookmarkletの説明や作り方についてはこちらを参照。
Bookmarklet(ブックマークレット)の作り方
Bookmarklet作成 まず、GitHubの草部分の色を変えるスクリプトを書いてみます。
// GitHubの草部分の要素を取得 var kusaElmList = document.getElementsByClassName(&#39;day&#39;) for (var i=0; i&amp;lt;kusaElmList.length; i++){ var kusa = kusaElmList[i] if (i % 2 == 0){ // 偶数マスは緑 kusa.setAttribute(&#39;fill&#39;,&#39;#2A7&#39;) }else{ // 奇数マスは黒 kusa.setAttribute(&#39;fill&#39;,&#39;#000&#39;) } } これをBookmarkletにします。
javascript:for(var t=document.getElementsByClassName(&amp;quot;day&amp;quot;),e=0;e&amp;lt;t.length;e++){var l=t[e];e%2==0?l.setAttribute(&amp;quot;fill&amp;quot;,&amp;quot;#2A7&amp;quot;):l.setAttribute(&amp;quot;fill&amp;quot;,&amp;quot;#000&amp;quot;)} 実行結果はこちら。
色はそれっぽくなりましたが、まだ隙間が気になります。
なので、隙間も埋めるよう修正します。
// GitHubの草部分の要素を取得 var kusaElmList = document.getElementsByClassName(&#39;day&#39;); for (var i=0; i&amp;lt;kusaElmList.length; i++){ var kusa = kusaElmList[i]; // 草の大きさと形を整える kusa.setAttribute(&#39;width&#39;,&#39;15&#39;); kusa.setAttribute(&#39;height&#39;,&#39;15&#39;); kusa.style.rx=0; kusa.style.ry=0; if (i % 2 == 0){ // 偶数マスは緑 kusa.</description>
    </item>
    
    <item>
      <title>Bookmarklet(ブックマークレット)の作り方</title>
      <link>/posts/2020/07/15/howto-make-bookmarklet/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/07/15/howto-make-bookmarklet/</guid>
      <description>Bookmarklet(ブックマークレット)とは 詳細はこちら
ウィキペディア
簡単に言えばブラウザのブックマークにURL代わりにjavascriptを入力して保存しておいて。
そのjavascriptを実行したい時に該当のブックマークをクリックするというものです。
たとえばブックマークにjavascript:alert(&#39;hoge&#39;);と登録しておけば、
そのブックマークをクリックしたら&amp;lt;a href=&amp;quot;javascript:alert(&#39;hoge&#39;);&amp;quot;&amp;gt;hoge&amp;lt;/a&amp;gt;をクリックした時と同じ事が起きます。
作り方は色々ありますが、uglify-jsを使って作成する方法を紹介します。
javascriptの作成 まず、適当にjsファイルを作って適当に実行したいjavascriptのコードを書きます。
今回は例としてページ内のdivタグの数を数えるスクリプトを作ります。
以下のコードをsample.jsというファイルに記載しておきます。
var divElms = document.getElementsByTagName(&#39;div&#39;); alert(&#39;divの数は&#39; + divElms.length + &#39;です！&#39;); uglify-jsによるjavascriptの圧縮 uglify-jsを使って作成したsample.jsを圧縮します。
まず、uglify-jsコマンドを使えるようにインストールします。
npmをインストールしていない人は先にインストールしておいてください。
$ npm install -g uglify-js # 環境に応じて必要であればsudoを付けてください 次にjavascriptの圧縮をします。
以下のコマンドでjavascriptの圧縮ができます。
※各オプションについては公式ページ参照
$ uglifyjs -c -m --toplevel -- sample.js 実行結果として以下のように圧縮されたスクリプトが出力されます。
var e=document.getElementsByTagName(&amp;quot;div&amp;quot;);alert(&amp;quot;divの数は&amp;quot;+e.length+&amp;quot;です！&amp;quot;); この圧縮スクリプトの頭にjavascript:を付けたものがBookmarkletになります。
ブラウザへのBookmarklet登録 ブラウザのブックマークに新規ページを追加し、URL欄にjavascript:｛生成した圧縮スクリプト｝を登録します。
Chromeであれば以下のようになります。
（名前は自分で分かるものであれば何でもいいです）
これで任意のページを開いている時に、登録したブックマークをクリックすると処理が走ります。
Googleで実行するとこのようになります。
これでBookmarkletの作成は完了です。</description>
    </item>
    
    <item>
      <title>AWS lambdaからDBアクセスも外部アクセスもできるようにする。</title>
      <link>/posts/2020/07/12/vpc-lambda/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/07/12/vpc-lambda/</guid>
      <description>AWS lambdaからAWS RDSへアクセスさせるためにはRDSへアクセスできるVPCのサブネットにlambdaを追加します。
しかし、VPC内のlambdaは何もしないと外部アクセスができなくなります。
lambdaがRDSと同時に外部システムのAPIなどを利用する際に困りますので、
VPC内のlambdaから外部アクセスができるように設定します。
VPC設定 VPC内のlambdaから外部アクセスをさせる設定方法は、実はAWS公式で説明されています。
基本的にはこの手順を実行すれば良いだけです。
https://aws.amazon.com/jp/premiumsupport/knowledge-center/internet-access-lambda-function/
手順詳細は公式ページを見ればよいので、ここではざっくりと流れを書いておきます。
①〜②はすでにあれば既存の使い回しでも良いです。
①（なければ）RDSにアクセスできるVPCを作る。
②（なければ）インターネットゲートウェイを作成して①のVPCにアタッチする。
③RDSにアクセスできるVPCにサブネットを2つ作る。(public用とprivate用)
④NATゲートウェイを新規作成し、②で作成したpublic用サブネットを紐づける。
⑤ルートテーブルを新規作成し、public用サブネットを紐付ける。
作成したら以下のルートを追加する。
   項目 設定値     宛先 0.0.0.0/0   ターゲット ③のインターネットゲートウェイ   ⑥ルートテーブルをもう１つ新規作成し、private用サブネットを紐付ける。    　作成したら以下のルートを追加する。        項目 設定値     宛先 0.0.0.0/0   ターゲット ④のNATゲートウェイ    VPC設定はここまでです。
ここで作成したprivate用サブネットの方にlambdaを追加すればRDSと外部の両方にアクセスできるようになります。
lambda設定(Serverless Framework) 今回はServerless Frameworkを使ってlambdaを構築します。
Serverless Frameworkの基本的な構築については前回の記事を参照してください。</description>
    </item>
    
    <item>
      <title>Linux MintでThinkPadのトラックポイントを調整する</title>
      <link>/posts/2019/03/12/linux-mint-trackpoint/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/12/linux-mint-trackpoint/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit) ThinkPad T480   ■参考 Ubuntu17.10でtrackpointの速度を調整する
 トラックポイントの速度調整は『コントロールセンター＞マウスの設定』からもできるのですが、
設定できる幅に限界があり、もう少し感度を上げたかったので他の方法で調整します。
■最適な値の探し出し 『感度』と『速度』をいじりながら最適な数値を探します。
私の場合はsensitivityは180、speedは60にすると丁度良かったです。
$ sudo -i # cd /sys/devices/platform/i8042/serio1/serio2 # vim sensitivity // 感度 # vim speed // 速さ ■設定値の永続化 さきほど修正していたファイルは再起動時に戻ってしまうので、
別ファイルにルールを記載しておきます。
# vim /etc/udev/rules.d/10-trackpoint.rules 記載内容は以下の通りです。
speedとsensitivityは最適な値を入れてください。
KERNEL==&amp;quot;serio2&amp;quot;, SUBSYSTEM==&amp;quot;serio&amp;quot;, DRIVERS==&amp;quot;psmouse&amp;quot;, ATTR{sensitivity}:=&amp;quot;180&amp;quot;, ATTR{speed}:=&amp;quot;60&amp;quot; これで設定完了です。
(おまけ)中央クリックの貼り付けを無効化する デフォルトだとThinkPadの中央クリック(マウスでいうホイールクリック)で貼り付けがされますが、 スクロール中にいきなり貼り付けが実行されたりして不便なので無効化します。
 ※2020年7月追記
中央クリックでの貼付けを防ぐだけであれば設定から変更できました。
コントロールセンター &amp;gt; マウス &amp;gt; Enable middlemouse paste
 まずデバイス名を取得します。
以下コマンドを実行すると「TPPS/2 IBM TrackPoint」であることが分かります。
$ xinput --list | grep TrackPoint ⎜ ↳ TPPS/2 IBM TrackPoint id=14	[slave pointer (2)] デバイスのマッピングを調べます。</description>
    </item>
    
    <item>
      <title>Linux Mintの初期設定</title>
      <link>/posts/2019/03/10/linux-mint-initialize/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/10/linux-mint-initialize/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit) ThinkPad T480   ※2020年7月追記
Linux Mint 20 Ulyanaについても追記しました。
  日本語入力の設定 『コントロールセンター＞入力方法』を開き、日本語の設定をします。
基本的に上図の通り書かれている手順を実施します。
 言語パッケージをインストールする(ここでinstallボタン押すだけ) ウィンドウ上部のInput MethodをFctixにする 一旦ログアウトする   ※2020年7月追記
Linux Mint 20では最初からFctixが使えるので、ログアウトは不要です。
 『コントロールセンター＞Fctix設定』を開き、入力メソッドをMozcだけにします。
不要な入力メソッドを「-」ボタンをクリックして消すだけです。
上図のようになればOKです。
言語設定  ※2020年7月追記
Linux Mint 20では不要そうです。
 『コントロールセンター＞言語』を開き、日本語の設定をします。
 「言語」と「地域」を日本にする。（なっているはず） 「言語サポート」にて日本語をインストールする。 「システムロケール」の『システム全体に適用』を実行する。  Chromeなどをインストールした際に日本語になっていない場合はこの手順を再度実施します。
入力モード切り替えをMac風にする キーボードの変換キーでIME有効、無変換キーでIME無効にすると便利なので設定します。
『コントロールセンター＞Mozcの設定』を開き、「キー設定の選択」の編集をクリックします。
するとキー設定ウィンドウが表示されるので設定します。
下図ではひらがなカタカナキーもIME有効化に割り当てています。
キー設定画面の右下の「編集」から設定のインポート/エクスポートもできるので、
再インストール時用に好みの設定をエクスポートしておくと後々楽です。
半角/全角キーとCapsLockキーを使いやすくする IMEの有効/無効切り替えを上記の通り設定すると半角/全角キーは不要になるので、Escに割り当ててしまいます。
また、CapsLockも使わないのでCtrlに割り当ててしまいます。
『コントロールセンター＞キーボード』を開き、
レイアウトタブの「キーボードの型式」のオプションを開きます。
ここで「Caps Lock behavior」は『CapsLock is also a Ctrl』を選択し、</description>
    </item>
    
    <item>
      <title>EC2上でオレオレ証明書を作る</title>
      <link>/posts/2020/06/14/oreore-certification/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/14/oreore-certification/</guid>
      <description>環境  Amazon Linux AMI 2017.03 OpenSSL 1.0.2k-fips 26 Jan 2017   最近はLet&amp;rsquo;s Encryptの登場でめっきり出番が少なくなったオレオレ証明書を作ります。
Let&amp;rsquo;s EncryptのSSL証明書の方が信頼度が高くブラウザ側で設定する必要がありません。
インターネットに公開していない環境でもDNSにTXTレコードを追加すればLet&amp;rsquo;s Encryptの証明書を発行できます。
それでもオレオレ証明書を使いたい人向けの手順です。
オレオレ証明書(自己証明書)とは SSL証明書はどこかしらの認証局(CA)に認証して貰って発行されるのですが、
自分でCAを立てて自分で認証したSSL証明書を発行してしまうというものです。
ざっくりとした流れは以下の通りです。
①オレオレ認証局を立てる
②オレオレ認証局でオレオレ証明書を発行する
③利用ブラウザにオレオレ認証局を認めさせる
以降の手順では「*.hoge.com」というワイルドカードのSSL証明書を作る前提とします。
「*.hoge.com」の部分は作成したいドメインに置き換えてください。
作業ディレクトリ等の準備 EC2にSSHでログインし、以下の通り準備をします。
オレオレ認証局はhogeCAというディレクトリに作成するものとします。
sudo -i cd /etc/pki cp -r CA hogeCA cp tls/openssl.cnf hogeCA/. cd hogeCA touch index.txt echo &amp;quot;00&amp;quot; &amp;gt; serial また、以前は無かったと思うのですが
最近のブラウザはSAN(subjectAltName)というものを設定しておかないと正規の証明書と認めてくれないようです。
SANを設定するためのファイルを作成しておきます。
echo &amp;quot;subjectAltName=DNS:*.hoge.com&amp;quot; &amp;gt; san.ext openssl設定変更 以下の通り、今回利用するopenssl.cnfを修正します。
vim ./openssl.cnf [ CA_default ]セクション修正 作業ディレクトリを変更します。
dir = /etc/pki/hogeCA [ req_distinguished_name ]セクション修正 今回の手順で会社所在地などを複数回聞かれるので、デフォルト値を設定しておきます。</description>
    </item>
    
    <item>
      <title>Elasticsearchの使い方メモ</title>
      <link>/posts/2020/06/11/elasticsearch-topics/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/11/elasticsearch-topics/</guid>
      <description>数年前にElasticsearchを利用していた頃の使いかたメモが見つかったので記事にしておきます。
以下例ではElasticsearchには商品ID(product_id)も持つ商品情報が格納されているものとします。
ID指定で1件だけ検索するクエリ 単純にproduct_idを指定するだけです。
{ &amp;quot;query&amp;quot;: { &amp;quot;match&amp;quot;: { &amp;quot;product_id&amp;quot;: &amp;quot;123&amp;quot; } } } ID指定で複数件、順序を指定して検索するクエリ 複数件の検索をします。取得する順序もweightで指定します。
weightが大きい方が上位に取得されます。
{ &amp;quot;query&amp;quot;: { &amp;quot;function_score&amp;quot;: { &amp;quot;query&amp;quot;: { &amp;quot;bool&amp;quot;:{ &amp;quot;should&amp;quot;:[ {&amp;quot;match&amp;quot;: {&amp;quot;product_id&amp;quot;: &amp;quot;123&amp;quot;}}, {&amp;quot;match&amp;quot;: {&amp;quot;product_id&amp;quot;: &amp;quot;323&amp;quot;}}, {&amp;quot;match&amp;quot;: {&amp;quot;product_id&amp;quot;: &amp;quot;223&amp;quot;}} ] } }, &amp;quot;functions&amp;quot;: [ { &amp;quot;filter&amp;quot;: { &amp;quot;product_id&amp;quot;: { &amp;quot;product_id&amp;quot;: &amp;quot;123&amp;quot; } }, &amp;quot;weight&amp;quot;: 3 }, { &amp;quot;filter&amp;quot;: { &amp;quot;product_id&amp;quot;: { &amp;quot;product_id&amp;quot;: &amp;quot;323&amp;quot; } }, &amp;quot;weight&amp;quot;: 2 }, { &amp;quot;filter&amp;quot;: { &amp;quot;product_id&amp;quot;: { &amp;quot;product_id&amp;quot;: &amp;quot;223&amp;quot; } }, &amp;quot;weight&amp;quot;: 1 } ] } } } ※メモ</description>
    </item>
    
    <item>
      <title>AWS S3を使ったリダイレクトの方法</title>
      <link>/posts/2020/06/10/aws-s3-redirect/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/10/aws-s3-redirect/</guid>
      <description>AWS S3上に置いていた静的コンテンツを部分的に別サーバー等に移設した際など
特定のパスへのアクセスを別サーバー等にリダイレクトする設定です。
対象のS3の
「プロパティ」＞「Static website hosting」＞「このバケットを使用してウェブサイトをホストする」
にリダイレクトルールという欄があるので、以下のように設定します。
この例では①〜③のリダイレクトルール(RoutingRule)を設定しています。
&amp;lt;RoutingRules&amp;gt; &amp;lt;RoutingRule&amp;gt;　・・・① &amp;lt;Condition&amp;gt; &amp;lt;KeyPrefixEquals&amp;gt;kokojanai_dokoka.html&amp;lt;/KeyPrefixEquals&amp;gt; &amp;lt;/Condition&amp;gt; &amp;lt;Redirect&amp;gt; &amp;lt;Protocol&amp;gt;https&amp;lt;/Protocol&amp;gt; &amp;lt;HostName&amp;gt;new-server.co.jp&amp;lt;/HostName&amp;gt; &amp;lt;ReplaceKeyWith&amp;gt;kokodayo.html&amp;lt;/ReplaceKeyWith&amp;gt; &amp;lt;/Redirect&amp;gt; &amp;lt;/RoutingRule&amp;gt; &amp;lt;RoutingRule&amp;gt;　・・・② &amp;lt;Condition&amp;gt; &amp;lt;HttpErrorCodeReturnedEquals&amp;gt;403&amp;lt;/HttpErrorCodeReturnedEquals&amp;gt; &amp;lt;/Condition&amp;gt; &amp;lt;Redirect&amp;gt; &amp;lt;Protocol&amp;gt;https&amp;lt;/Protocol&amp;gt; &amp;lt;HostName&amp;gt;new-server.co.jp&amp;lt;/HostName&amp;gt; &amp;lt;/Redirect&amp;gt; &amp;lt;/RoutingRule&amp;gt; &amp;lt;RoutingRule&amp;gt;　・・・③ &amp;lt;Condition&amp;gt; &amp;lt;HttpErrorCodeReturnedEquals&amp;gt;404&amp;lt;/HttpErrorCodeReturnedEquals&amp;gt; &amp;lt;/Condition&amp;gt; &amp;lt;Redirect&amp;gt; &amp;lt;Protocol&amp;gt;https&amp;lt;/Protocol&amp;gt; &amp;lt;HostName&amp;gt;new-server.co.jp&amp;lt;/HostName&amp;gt; &amp;lt;/Redirect&amp;gt; &amp;lt;/RoutingRule&amp;gt; &amp;lt;/RoutingRules&amp;gt;  ①特定パスへのアクセス 特定のパスへアクセスがあった際にパスを書き換えてリダイレクトします。
S3から新サーバー等に移設した際にパスが変わった場合などに使えます。
設定する値は以下の通りです。
   設定項目 設定値 サンプル値     KeyPrefixEquals このパスにアクセスがあったらリダイレクトします。 kokojanai_dokoka.html   Protocol リダイレクト先のプロトコルです https   HostName リダイレクト先のホスト名です new-server.co.jp   ReplaceKeyWith KeyPrefixEqualsの値をこの値で置き換えます。 kokoday.</description>
    </item>
    
    <item>
      <title>Dictionaly型から特定の値を取り出しlist型に入れる</title>
      <link>/posts/2020/06/06/python-dict-list/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/06/python-dict-list/</guid>
      <description>pythonのテクニック(?)的なものを教わったのでメモです。
Dictionaly型から、あるキーの値を取り出して配列に取り出す方法について
特になにも考えずにforで回して取り出してました。
例えば、idとnameからなるDictionalyからnameを取り出して配列にする場合は以下のようにしていました。
# Dictionaly定義 fruits_list = [ {&#39;id&#39;:1, &#39;name&#39;:&#39;apple&#39;}, {&#39;id&#39;:2, &#39;name&#39;:&#39;banana&#39;}, {&#39;id&#39;:3, &#39;name&#39;:&#39;cherry&#39;}, ] # Dictionalyからlistに取り出し name_list = [] for fruits in fruits_list: name_list.append(fruits.get(&#39;name&#39;)) # 出力 # [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;] print(name_list) しかし、この取り出し処理は1行で書けるようです。
修正後、以下のようになりました。
# Dictionaly定義 fruits_list = [ {&#39;id&#39;:1, &#39;name&#39;:&#39;apple&#39;}, {&#39;id&#39;:2, &#39;name&#39;:&#39;banana&#39;}, {&#39;id&#39;:3, &#39;name&#39;:&#39;cherry&#39;}, ] # Dictionalyからlistに取り出し name_list = [fruits.get(&#39;name&#39;) for fruits in fruits_list] # 出力 # [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;] print(name_list) スマートですね！</description>
    </item>
    
    <item>
      <title>ThinkpadにHDMIケーブルを接続したままUbuntu 20.04を起動する</title>
      <link>/posts/2020/06/01/ubuntu-20-04-hdmi/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/01/ubuntu-20-04-hdmi/</guid>
      <description>環境 ubuntu 20.04 LTS
 参考  ubuntu バグフォーラム ubuntu wiki   前回の記事にてUbuntuを20.04にアップデートしたら HDMIケーブルを挿したままPCを起動する事ができなくなった話を書きました。
Linuxカーネルを書き換えれば動くような話もあったのですが、それはやりたくなかったので放置していました。
2020/6/1現在、ubuntu公式の対応はまだされていないようなのですが、 ubuntuのバグ報告フォーラムにて 『quiet splashを無効化したらいけた！』という書き込みが5/29にされていました。
試してみたら確かに動いたので手順を記載します。
grub設定を変更する 以下のコマンドにてgrubの設定をいじります。
$ sudo gedit /etc/default/grub 設定ファイルがテキストエディタで開くので、quiet splashの行をコメントアウトします。
コメントアウト後は保存して閉じます。
〜省略〜 GRUB_DEFAULT=0 GRUB_TIMEOUT_STYLE=hidden GRUB_TIMEOUT=10 GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian` #GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot;　←この行を#でコメントアウトする GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot; 〜省略〜 grub設定の反映 以下のupdate-grubコマンドでgrub設定を反映させます。
しばらく処理が走るので完了するのを待ちます。
$ sudo update-grub Sourcing file `/etc/default/grub&#39; Sourcing file `/etc/default/grub.d/init-select.cfg&#39; Generating grub configuration file ... Linux イメージを見つけました: /boot/vmlinuz-5.4.0-33-generic Found initrd image: /boot/initrd.</description>
    </item>
    
    <item>
      <title>Serverless Frameworkを使ってLambda &amp; API Gatewayをデプロイする</title>
      <link>/posts/2020/05/19/serverless-framework-lambda/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/19/serverless-framework-lambda/</guid>
      <description>環境 ubuntu 20.04 LTS
 Serverless Frameworkというサーバーレス環境を簡単に構築できるツールがあります。
https://www.serverless.com/framework/docs/
今回はそれを使ってAWS上にLambda &amp;amp; API Gatewayを使ったサーバーレスAPIを作ってみます。
事前準備(awscliの準備) Serverless Frameworkはaws cliを使ってデプロイするので、インストールしておく必要があります。
既に作業PC等でawscliを使える状態であれば本手順は飛ばして大丈夫です。
awscliのインストール 公式ページの手順を実施します。
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-linux.html
$ curl &amp;quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&amp;quot; -o &amp;quot;awscliv2.zip&amp;quot; $ unzip awscliv2.zip $ sudo ./aws/install これでawscliのインストールが出来ました。
念の為バージョンを確認しておきます。
$ aws --version aws-cli/2.0.14 Python/3.7.3 Linux/5.4.0-31-generic botocore/2.0.0dev18 アクセスキーの準備 awscliで利用するアクセスキーをAWS IAMで生成します。
手順は公式ページにあります。
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-chap-configure.html#cli-quick-configuration
ざっくりいうと、以下の作業をします。
①IAMへアクセス
②アクセスキーを発行するユーザーを選択する。
③「認証情報」タブの「アクセスキーの作成」をクリックする。
④表示されるアクセスキーID/シークレットアクセスキーをメモしておく。
以上です。
awscliの設定 IAMで取得したアクセスキーとリージョン情報をawscliに設定します。
$ aws configure AWS Access Key ID [None]: YOUR-ACCESS-KEY-ID AWS Secret Access Key [None]: YOUR-SECRET-ACCESS-KEY Default region name [None]: ap-northeast-1 Default output format [None]: ※output formatを空のままエンターするとjsonになる。</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04にアップデートした話</title>
      <link>/posts/2020/05/17/update-ubuntu-20-04/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/17/update-ubuntu-20-04/</guid>
      <description>待望のUbuntu 20.04 LTSが出たので、19.10からアップデートしてみました。
アップデートと同時に発生した事象について記載します。
消えたアプリ アップデートするとインストールしてあった以下のアプリが消えたので、再インストールしました。
 shutter (スクショツール) MySQL Workbench  shutter こちらのページを参考にさせて頂きました。
https://www.debugpoint.com/2020/04/shutter-install-ubuntu/
実施した手順は以下です。
sudo apt update sudo apt upgrade sudo add-apt-repository ppa:linuxuprising/shutter sudo apt install shutter MySQL Workbench コマンドでちょこちょこやってインストールする方法もあるようですが、素直に公式ページからdebをダウンロードしてインストールしました。
https://dev.mysql.com/downloads/workbench/
コマンドでインストールする方法も結局↑でダウンロードできるdebをコマンドでインストールしてるだけのようです。
HDMI周りの不具合発生  ※2020/6/1追記
対処法が分かったのでこちらの記事で記載しています。
ThinkpadにHDMIケーブルを接続したままUbuntu 20.04を起動する
 私の作業PCはThinkpad T480なのですが、HDMIポートにケーブルを挿した状態で起動しようとすると、ロゴ画面で止まってしまう事象が発生しました。
PCのThunderboldポートにもThunderbold→HDMIのケーブルを繋いでいるのですが、そちらは特に挿したまま起動しても問題ありませんでした。
調べてみると同様の事象を報告している方が複数いたので、おそらくubuntu 20.04の不具合かと思われます。
https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1874194
また、ubuntuにログイン後にディスプレイケーブルの抜き差しをするとメニューバーの位置がおかしくなりました。
これはHDMIポートでもThunderboltポートでも発生します。
なので、私は以下の手順でPCを起動しています。
①HDMIケーブルを抜いてPCの電源ON。
②ubuntuが起動し、ログイン画面が表示されたらHDMIケーブルを挿す。
③ログインする。</description>
    </item>
    
    <item>
      <title>gulp-uglifyで圧縮時に変数／関数名を圧縮させない</title>
      <link>/posts/2020/04/15/gulp-uglify-keep-name/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/04/15/gulp-uglify-keep-name/</guid>
      <description>参考  github mishoo/UglifyJS2   意外と調べても情報が出てこなかったのでメモです。
gulp-uglifyを使ってJSファイルを圧縮すると定義している変数名や関数名も圧縮されてアルファベット1文字等になります。
圧縮したJSファイル内でのみ呼び出される変数・関数であれば良いのですが、外部からも呼び出したいというパターンもあると思います。特に関数。
変数名や関数名を保持したい場合は、gulp-uglify実行時に以下の用にオプションを指定してあげればOKです。
(gulpfile.js例)
var gulp = require(&#39;gulp&#39;); var uglify = require(&#39;gulp-uglify&#39;); var uglify_option = { keep_fnames: true, // function名を圧縮させない場合に指定 mangle: false // 変数名を圧縮させない場合に指定 } gulp.task(&amp;quot;default&amp;quot;, function() { return gulp.src(&#39;src/*.js&#39;) .pipe(uglify(uglify_option)) .pipe(gulp.dest(&#39;dest&#39;)); }); </description>
    </item>
    
    <item>
      <title>javascriptの入力イベントでIME未確定時は発火させない設定方法</title>
      <link>/posts/2020/03/20/javascript-input-event/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/20/javascript-input-event/</guid>
      <description>テキストボックスに入力中の内容をjavascriptでチェックする場合など
keydownイベントを使うとIME未確定時にも発火してしまい無駄に沢山処理が走ってしまいますし、
textInputイベントは対応していないブラウザがあるし、
そんな時の対応方法です。
javascriptのイベントにはIME入力開始時の「compositionstart」とIME確定時の「compositionend」というものがあります。
これを使ってIME入力中を判定できるフラグを作ります。
具体的には以下のようにします。
&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;hoge&amp;quot; /&amp;gt; &amp;lt;script&amp;gt; // とりあえずオブジェクト化してますが、ベタ書きでも構いません var inputEventHandler = { compFlg : false, // IME入力中フラグ initialize : function(){ let targetElm = document.getElementById(&#39;hoge&#39;); targetElm.addEventListener(&#39;keydown&#39;, function() { // ブラウザによりcompositionendイベントとの発火タイミングが前後するのでsetTimeoutで少し遅らせます setTimeout(function(){ if (self.compFlg) { return; } console.log(&#39;ここで何か処理を実行する&#39;); }, 10) }); targetElm.addEventListener(&#39;compositionstart&#39;, function() { self.compFlg = true; }); targetElm.addEventListener(&#39;compositionend&#39;, function() { self.compFlg = false; }); } } inputEventHandler.initialize(); &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>GitHub ActionsでAWS Code Deployを回す</title>
      <link>/posts/2020/03/15/github-actions-deploy/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/15/github-actions-deploy/</guid>
      <description>GitHub ActionsからAWSコマンドを簡単に叩けるようだったので試してみました。
今回CIでやることは『masterにプッシュされたらCodeDeployを走らせる』のみです。
AWS Code Deployの設定 こちらの記事で手順を紹介しています。
AWS Code DeployでEC2にデプロイする
AWS IAMの設定 こちらの記事で手順を紹介しています。
今回CircleCIは使わないので、「IAM準備」の手順のみ参照してください。
CircleCIからAWS Code Deployを実行する
GitHub Secretsへのキー登録 前手順で取得したIAMユーザーの『アクセスキーID』と『シークレットアクセスキー』をGitHubのSecretsに登録します。
まず、GitHubの対象リポジトリの『Settings ＞ Secrets』を開き、『Add a new secret』をクリックします。
Secretsの設定画面になるので以下2つを設定します。
   Name Value     AWS_ACCESS_KEY_ID IAMのアクセスキーID   AWS_SECRET_ACCESS_KEY IAMのシークレットアクセスキー    GitHub Actionsの設定 デプロイしたいリポジトリのGitHubページの『Actions』タブを開き、
「Set up a workflow yourself」をクリックします。
.github/workflows/main.ymlの編集画面が開くので、以下のように記載します。
name: AWS Code Deploy on: push: branches: [ master ] jobs: build: runs-on: ubuntu-latest steps: - name: Run AWS CodeDeploy with: args: deploy create-deployment --application-name &amp;quot;※APP_NAME※&amp;quot; --deployment-group-name &amp;quot;※GROUP_NAME※&amp;quot; --github-location repository=&amp;quot;※REPO※&amp;quot;,commitId=&amp;quot;${{ github.</description>
    </item>
    
    <item>
      <title>GASでGmailをSlackに転送する</title>
      <link>/posts/2020/03/10/gas-gmail-slack/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/10/gas-gmail-slack/</guid>
      <description>参考  Class GmailApp(公式ドキュメント) 【GAS】Gmailを定期的に確認し新規メールをSlackに通知する 【Google Apps Script】Gmailの新着(未読)メールを取得する【コピペでOK】   元々IFTTTやZepierを使ってGmailをSlackと連携させていたのですが、
最近Gmail側のセキュリティ変更でうまく連携できなくなってきたので
Google Apps Script(GAS)を使って連携させることにしました。
GASでやることは
『5分周期でメールをチェックし、未読メールがあればSlackに転送して既読にする』
です。
SlackのWebHooks URLの取得 GASに限らず、API経由でSlackに通知を出したい時に使うURLを取得します。
これを取得しておけば自作botを作ったりできます。
こちらのページから自分のSlackチームにWebHooksを追加できます。
（要Slackログイン）
https://slack.com/apps/A0F7XDUAZ-incoming-webhooks
https://hooks.slack.com/services/AAAAAAA/BBBBBBB/CCCCCCCという形式のURLが取得できれば完了です。
ちなみに、今回のGASの話とは関係ないですけど
PHPからWebHooksを使ってメッセージ送信するライブラリを作っています。
全然誰にも使われてないですけど、参考までに載せておきます。
https://github.com/mildjester/slackwebhock
Google Apps Scriptの作成 まず、自分のGASのページを開きます。
https://script.google.com/u/0/home?hl=ja
そこで「新しいプロジェクト」をクリックしてください。
コード編集画面が開くので、「コード.gs」内を以下のように記載します。
最初の「初期設定」の部分は自分の環境に合わせて修正してください。
// 初期設定 const HOOK_URL = &#39;https://hooks.slack.com/services/AAAAAAA/BBBBBBB/CCCCCCC&#39;; // 取得したWebHooks URL const SEND_CHANNEL = &#39;general&#39;; // Gmailの内容を送信したいSlackチャンネル function main() { // 検索条件：受信トレイにある未読メールで１０分以内に受信したもの var after = parseInt(((new Date()).getTime() - 10 * 60 * 1000) / 1000); //10分前の時刻をUNIX時間で取得 var searchTarget = &#39;in:inbox is:unread after:&#39; + after; GmailApp .</description>
    </item>
    
    <item>
      <title>Google Analyticsから直近のページ閲覧数を取得する</title>
      <link>/posts/2020/03/05/get-google-analytics-report/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/05/get-google-analytics-report/</guid>
      <description>環境  PHP 7.3 google/apiclient 2.4  参考 https://developers.google.com/analytics/devguides/reporting/core/v3/quickstart/service-php?hl=ja
 商品ページにて「24時間以内に○○人が見ています」という販促メッセージを出す時に、乱数を使っているサービスもあるようですが、 それはさすがに嫌なのでGoogle Analyticsから閲覧実績を取得して表示してみます。
なお、Google Analyticsからは「昨日から今日まで」のように日付指定しかできないので、「10分以内に」のように厳密な時間を指定して閲覧者数を表示することはできません。
GCPのサービスアカウント作成 まず、以下ページにてサービスアカウントを作成します。
※もしGoogle CloudPlatform(GCP)のプロジェクトを作成していない場合は「プロジェクトを作成」をクリックしてGCPプロジェクトを作成してから実行します。
https://console.developers.google.com/iam-admin/serviceaccounts?hl=ja
「プロジェクトの選択」よりサービスアカウントを作成するプロジェクトを選択し、
「＋サービスアカウントを作成」をクリックします。
サービスアカウントの作成画面が開くので以下の通り入力して「作成」をクリックしてください。
   項目 入力内容     サービスアカウント名 独自の自分で判断できる名前   サービスアカウントID 独自のID(サービスアカウント名を入力したら勝手に入ります)   サービスアカウントの説明 自分が分かる説明    次にサービスアカウントの権限設定画面が開きますが、そのまま「続行」をクリックします。
その次の画面で「ユーザーにこのサービス アカウントへのアクセス権を付与」は特に何もしません。
「キーの作成」の中の「キーを作成」をクリックし、キーのタイプはJSONを選択して「作成」をクリックします。
JSONファイルがダウンロードされますので取っておいてください。
サービスアカウントの作成画面はそのまま「完了」をクリックして終わります。
サービスアカウント一覧に戻り、作成したサービスアカウントのメールアドレスが表示されるので記録しておきます。
Google Analytics APIの有効化 以下ページにアクセスし、Google Analytics APIを有効化してください。
https://console.developers.google.com/apis/api/analytics.googleapis.com/overview
Google Analyticsの設定 さきほど作成したサービスアカウントをGoogle Analyticsに追加します。
アカウントユーザーまたはプロパティユーザーにサービスアカウントのメールアドレスを追加します。
権限は「表示と分析」のみ(デフォルト)で大丈夫です。
スクリプトの作成 PHPとcomposerの環境は構築済みの前提とします。
まず、Google Analytics APIのパッケージを取得します。</description>
    </item>
    
    <item>
      <title>lightsail上に自前でWordpressを構築する(CentOS編)</title>
      <link>/posts/2020/02/18/lightsail-wordpress/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/02/18/lightsail-wordpress/</guid>
      <description>環境  CentOS Linux release 7.6.1810 (Core) nginx 1.1.17 php 7.4.2 MySQL 8.0.19   以前の記事でAmazon Linux上でWordpressを構築しましたが、
lightsailのAmazon Linux上だとなぜかcertbotが正常に動かなくなったので
CentOSで再構築することにしました。
インスタンス作成 lightsailのインスタンスを作成します。
プラットフォーム：Linux/Unix
設計図の選択：OSのみ CentOS
インスタンス設定 作成したインスタンスの設定をします。
対象インスタンスのネットワーキングを開き、静的IPをアタッチしておきます。
また、HTTPSで公開する場合はファイアウォールにてTCPの443ポートを開けておきます。
サーバーへのログイン＆初期設定 インスタンスにSSHにて接続し、以下コマンドを実行していきます。
まずrootになります。
以降のコマンドはrootで実行するものとします。
$ sudo -i タイムゾーンを日本にします。
# timedatectl set-timezone Asia/Tokyo 基本的なアプリケーションを入れておきます。
yum install git vim SELinuxの無効化 SELinuxがあると色々動かないことがあるので無効にしてしまいます。
(nginxが403になったり)
ちゃんとセキュアな環境を作りたい場合はSELinuxが有効でもちゃんと諸々動く環境を作った方がいいですが、
今回はそこまででは無かったので割愛しています。
現在有効か確認します。
以下コマンドで「Enforcing」と出たら有効です。
# getenforce Enforcing 設定ファイルを修正して無効にします。
# vim /etc/selinux/config 以下部分を修正します。 SELINUX=disabled これでlightsailのコンソールからインスタンスを再起動をすると反映されます。
nginxのインストール 公式の手順を参考にします。
http://nginx.org/en/linux_packages.html#RHEL-CentOS
# yum install yum-utils # vim /etc/yum.</description>
    </item>
    
    <item>
      <title>e-taxで法定調書関係の申請をする。</title>
      <link>/posts/2020/02/13/etax-legal-record/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/02/13/etax-legal-record/</guid>
      <description>決算を迎え、e-taxにて法定調書関係の申請をしたので、その手順メモです。
なお、計算方法等はマネーフォワード給与にて行なっていますので割愛しています。
申請書の作成 e-taxの左メニューから作成＞申告・申請等開き、新規作成をクリックします。
次に以下を選び『次へ』をクリックします。
もし税目の選択肢に「法定調書関係」が無い場合は、e-tax起動時のインストールメニューにて「法定調書」をインストールしてください。
 手続きの種類：申請・届出 税目：法定調書関係  次に以下２つにチェックを入れて『次へ』をクリックします。
 給与所得の源泉徴収等の法定調書（及び同合計表）  給与所得の源泉徴収票 給与所得の源泉徴収票等の法定調書合計表    申告・申請等名を指定する画面になるので、自分で分かる程度の名前をつけて『OK』をクリックします。
（「XXXX年度_法定調書」など）
次に基本情報の入力画面になるので、以下を入力or確認して『OK』をクリックします。
 提出税務署：申請する税務署（自分の会社がある自治体） 提出年月日：今の日付 法人名(カナ)：自分の会社名カナ 法人名（必須）：自分の法人名 納税地：自分の会社の住所と電話番号 代表者名（カナ）： 代表者名（必須）： 代表者：代表者の住所電話番号 金融機関：会社の銀行口座  帳票一覧が開くので、さきほど選択した「給与所得の源泉徴収票」をダブルクリックで開きます。
提出区分を聞かれるので「新規分提出」を選択し、提出対象の年度を入力して「OK」をクリックします。
すると帳票の中身が修正できるようになるので記載します。
（入力内容は私はマネーフォワード給与から帳票をDLして参照しました）
小さくて文字が見づらいですが、右クリックすると拡大メニューが出ます。
記載が終わったら「作成完了」をクリックします。
控えが必要ならここで印刷などしておきます。
帳票一覧に戻るので、「給与所得の源泉徴収票等の法定調書合計表」の方をダブルクリックで開きます。
こちらも同様に記載をして「作成完了」をクリックします。
マネーフォワード給与から帳票をDLしてきて転記する場合の注意点ですが、
給与の提出区分の部分だけ３０（書面）ではなく１４（電子）に変更する必要があります。
申請書の署名 e-tax左メニューの「署名可能一覧へ」＞「電子署名」を開きます。
作成したデータが表示されるので署名をします。
申請書の送信 e-tax左メニューの「送信可能一覧へ」＞「送信」を開きます。
先ほど作成した帳票が表示されるので、選択して『送信』をクリックします。
何か問題があればエラーが表示されるので、エラー指摘箇所を訂正して再度送信します。
これで法定調書関係の申請は完了です。</description>
    </item>
    
    <item>
      <title>lightsail上に自前でWordpressを構築する(Amazon Linux編)</title>
      <link>/posts/2019/12/15/lightsail-wordpress/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/12/15/lightsail-wordpress/</guid>
      <description>環境 Amazon Linux AMI 2018.03 (lightsail)
  ※2020年2月追記
lightsailのAmazon Linuxでcretbotの挙動があやしくなってきたので
CentOS版も作りました。
記事はこちら
 lightsailではWordpressを載せたインスタンスを生成できますが、
全部載せbitnami環境があまり好きではなかったので
空のインスタンスに自分でWordpress環境を構築しました。
構築する環境は
nginx + php-fpm(PHP7.2)
とします。
インスタンス作成 lightsailのインスタンスを作成します。
プラットフォーム：Linux/Unix
設計図の選択：OSのみ Amazon Linux
インスタンス設定 作成したインスタンスの設定をします。
対象インスタンスのネットワーキングを開き、静的IPをアタッチしておきます。
また、HTTPSで公開する場合はファイアウォールにてTCPの443ポートを開けておきます。
各種インストール＆設定 インスタンスにSSHにて接続し、以下コマンドを実行していきます。
まずrootになります。
sudo -i いろいろインストールします。
yum install -y git nginx php72-fpm php72-bcmath php72-cli php72-common php72-devel php72-gd php72-json php72-mbstring php72-mysqlnd php72-pdo php72-xml mysql-server nginxの設定 nginxの設定ファイルを追加します。
ファイル名の.confより前は任意です。
vim /etc/nginx/conf.d/wordpress.conf 以下のように記載します。
(Wordpressおきまりのやつです)
server { listen 80; listen [::]:80; server_name your-domain.jp; root /usr/share/nginx/html; index index.</description>
    </item>
    
    <item>
      <title>htaccessで本番環境だけ特定のディレクトリを隠す</title>
      <link>/posts/2019/11/19/apache-directory-hidden/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/11/19/apache-directory-hidden/</guid>
      <description>環境  httpd 2.2.34   概要 Apache環境で本番環境・検証環境共にソースコードはgitリポジトリを丸ごとcloneしている状態で
git管理下の特定のディレクトリ内のページは検証環境でのみ表示させるという方法です。
（テスト用ページ）
対応方法 本番環境のドメインが「www.honban.com」で検証環境は別ドメインだとした場合、
隠したいディレクトリに.htaccessを配置して以下を記載します。
RewriteEngine On RewriteCond %{http_host} ^www.honban.com RewriteRule ^(.*) - [R=404,L] これは『ドメインが本番環境の場合(RewriteCondの部分)は404ページを表示する(RewriteRuleの部分)』という意味になります。
これで検証環境では該当ディレクトリ内のページは表示でき、本番環境では404ページが表示されるようにできました。</description>
    </item>
    
    <item>
      <title>Linux用ターミナル『Tilix』</title>
      <link>/posts/2019/11/08/ubuntu-tilix/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/11/08/ubuntu-tilix/</guid>
      <description>環境  Ubuntu 19.10   今までubuntu等のLinux環境ではターミナルはTerminatorを使っていたのですが、
Tilixというターミナルも良さそうだったので使ってみました。
使い勝手はTerminatorよりも良い気がします。
インストール方法 以下コマンドだけでインストール可能です。
sudo apt install tilix 設定 ウィンドウ右上の３本線マークをクリックすると「設定」メニューが出てきます。
そちらからウィンドウの色・サイズやフォントの変更などができます。
タブ分割方法 ウィンドウ左上にタブ分割するボタンがあるので、そちらをクリックするだけでタブ分割できます。
ショートカットキーもありますが、デフォルトのショートカットキーはubuntuでは別アクションにマッピングされているので
使う場合は『設定＞ショートカット』からショートカットキーを変更してください。
fish + fishermanの導入 基本的にterminatorと導入手順は同じです。
こちらを参照してください。
terminator + fish + fishermanの導入</description>
    </item>
    
    <item>
      <title>ubuntu 19.10の初期設定</title>
      <link>/posts/2019/11/06/ubuntu-initialize/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/11/06/ubuntu-initialize/</guid>
      <description>環境  Ubuntu 19.10 ThinkPad T480   Thinkpad T480にubuntu 19.10をインストールした際のメモです。
日本語入力設定 そのままでも日本語入力はできますが、入力ソースをMozcに切り替えたりしないといけないので
入力ソースのMozcの優先度を高くします。
アプリランチャーより『設定』を開き、『地域と言語』を開きます。
そこの入力ソースに「日本語」と「日本語(Mozc)」が並んでいるので
「日本語(Mozc)」が上にくるように並べ替えます。
各入力ソースの左端の6丸をドラッグすれば順番を入れ替えられます。
IMEのON/OFFをMac風にする アプリランチャーより『Mozcの設定』を開き、『一般』タグを開きます。
「キー設定の選択」の横にある「編集」ボタンをクリックするとキー設定を変更できます。
そこでHenkan/Hiragana/Katakanaあたりに『IME有効』を割り当て、
Muhenkanに『IME無効』を割り当てます。
これでMacのようにIMEのON/OFFを切り替えられるようになりました。
CapsLockをCtrlに、半角/全角をEscにする こちらもMac風になる設定です。
以下のコマンドを実行するとCapsLockがCtrlになり、半角/全角キーがEsc扱いになります。
setxkbmap -option ctrl:nocaps,japan:hztg_escape tiling機能をOFFにする デフォルトだとウィンドウを画面端にドラッグすると勝手に最大化します。
無くてもいい機能なので以下コマンドで無効化します。
gsettings set org.gnome.shell.overrides edge-tiling false ※2019/12/2追記 ubuntu 19.10では、上記だけではtilingが無効になっていませんでした。
以下の実行も必要そうです。(むしろ、こちらだけでよさそう)
gsettings set org.gnome.mutter edge-tiling false 諸々インストール PHP sudo apt install php7.3 composer php7.3-bcmath php7.3-common php7.3-gd php7.3-json php7.3-mbstring php7.3-mysql php7.3-xml php7.3-xmlrpc MySQL Workbench sudo apt install mysql-workbench mysql-client Shutter(スクショツール) 既存画像に文字や矢印を書き込む事もできるので便利です。</description>
    </item>
    
    <item>
      <title>リバースプロキシ先でWordpressを動かす</title>
      <link>/posts/2019/10/15/reverseproxy-wordpress/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/10/15/reverseproxy-wordpress/</guid>
      <description>環境 Apache 2.2.34
 サーバーA(www.sample.com)でメインサイトが動いていて、サーバーB(sub.sample.com)でWordpressが動いている時に
Apacheのリバースプロキシを使って以下のようにアクセスできるようにします。
メインサイト: https://www.sample.com/
Wordpress: https://www.sample.com/blog
なお、既に他のリバースプロキシも設定されており、極力そちらへの影響はないように設定します。
他ページ(サーバーC): https://www.sample.com/media
■サーバーAの設定 Apache設定 httpd.confなどに以下のようにリバースプロキシ設定をします。
他リバースプロキシに影響しないようにLocationで括ります。
&amp;lt;Location &amp;quot;/blog&amp;quot;&amp;gt; ProxyPass http://sub.sample.com/blog ProxyPassReverse http://sub.sample.com/blog ProxyPassReverseCookieDomain sub.sample.com www.sample.com ProxyPassReverseCookiePath / /blog/ &amp;lt;/Location&amp;gt; これで/blog配下へのアクセスはサーバーB(sub.sample.com)に飛ばすようになります。
■サーバーBの設定 Apache設定 Apacheの設定はsub.sample.comにアクセスがある想定で記載しておけば大丈夫です。
WordpressソースはDocumentRoot配下にblogディレクトリを作成して格納します。
SSL通信扱いにする これでWordpressページ自体は表示されますが、必要なJS/CSS/画像などの外部ファイルのURLが非SSLとなってしまい
Chromeなどだとエラーとなってしまいます。
なので、.htaccessに以下追記して強制的にSSL通信扱いになるようにします。
SetEnv HTTPS on ※補足
非SSLでhttp://sample.com/blogにアクセスした場合はどうするのって話もありますが、
そもそも非SSLページは推奨されないので、今回は考えてません。
http://sample.com/blogにアクセスが来たらhttps://sample.com/blogにリダイレクトしましょう。
どうしても非SSLとSSLの両方で受けたければSSL接続時はリバースプロキシ時に「X-Forwarded-HTTPS: on」を設定するなど対策してください。
「外部→(HTTPS)→ELB→(HTTP)→サーバーA→(HTTP)→サーバーB」のような構成だと結構面倒です。
ホスト名を補正する ここまでの対応だと$_SERVER[&#39;HTTP_HOST&#39;]と$_SERVER[&#39;SERVER_NAME&#39;]がsub.sample.comのままになってしまいます。
ページ表示上は問題無さそうですが、管理画面でブラウザのconsoleに警告が出て気持ち悪いので修正しておきます。
wp-config.phpの先頭に以下の記載を付け加えておきます。
if (isset($_SERVER[&#39;HTTP_X_FORWARDED_HOST&#39;]) &amp;amp;&amp;amp; $_SERVER[&#39;HTTP_X_FORWARDED_HOST&#39;] === &#39;www.sample.com&#39;) { $_SERVER[&#39;HTTP_HOST&#39;] = &#39;www.sample.com&#39;; $_SERVER[&#39;SERVER_NAME&#39;] = &#39;www.sample.com&#39;; } これでwww.sample.comからリバースプロキシで飛ばされてきたアクセス時はホスト名が書き換わるようになりました。
（これはもっといい方法があるかもしれませんが、とりあえずこの方法でも対応できています。）</description>
    </item>
    
    <item>
      <title>Linuxで別ユーザとしてコマンドを実行する</title>
      <link>/posts/2019/10/10/linux-sudo/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/10/10/linux-sudo/</guid>
      <description>環境 Amazon Linux AMI release 2013.03
 今更ですがsudoコマンドについて整理しておきたかったので書きました。
まず基本として、rootユーザーとしてコマンドを実行する場合はsudo {コマンド}を打ちます。
$ sudo id uid=0(root) gid=0(root) 所属グループ=0(root) もしrootユーザー以外になり代わるたい場合は-uオプションで指定します。
$ sudo -u apache id uid=48(apache) gid=48(apache) 所属グループ=48(apache) もし特定のユーザーに頻繁になり代わる場合は
.bashrcなどにfunction定義しておくと楽です。
(今回一番書きたかったこと)
# Apacheユーザとしてコマンド実行する sudoa () { sudo -u apache $* } # Apacheユーザとしてgitコマンドを実行する agit() { sudo -u apache git $* } こうしておくとagit pullと打てば
Apacheユーザとしてgit pullを打つことができます。
また、以下のような簡単なスクリプトも書けます。
hoge() { sudo -u yamada sh -c &#39; NAME=`id | grep -o -E &amp;quot;\([^)]+\)&amp;quot; | grep -o -m 1 -E &amp;quot;[^\()]+&amp;quot;` echo &amp;quot;hello ${NAME}!</description>
    </item>
    
    <item>
      <title>Bookmarkletでパスワードを自動で入力させる</title>
      <link>/posts/2019/10/02/bookmarklet-mizuho/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/10/02/bookmarklet-mizuho/</guid>
      <description>みずほダイレクトで振込時の第2暗証番号6桁から数字4桁を抽出するのが面倒だったので、
Bookmarkletを使って入力すべき数字4桁を表示できるようにしました。
Bookmarkletの説明や作り方についてはこちらを参照。
Bookmarklet(ブックマークレット)の作り方
みずほダイレクトに仕込んでみる みずほダイレクトの振込時に第2暗証番号を入力する画面まで来たら
以下のjavascriptを実行すると第2暗証番号が表示されます。
var secondPass = &#39;123456&#39;; // ここに第2暗証番号の6桁を入れてください var orderNum = 0; var pickPw = &#39;入力するパスワード: &#39;; // 聞かれる第2パスワード4桁を順に処理する for (var i = 1; i&amp;lt;=4; i++) { // 第2パスワードの何番目の数字を聞かれているかチェック orderNum = Number(document.getElementById(&#39;txtScndPwdDgt&#39; + i).innerHTML); // 第2パスワードから対象の数字を抜き出してテキストに追加する pickPw += secondPass.substr(orderNum -1, 1) } // 入力すべき4桁の数字を表示する alert(pickPw); これをBookmarklet用に圧縮し、頭にjavascript:を付けます。
（圧縮方法はコチラを参照）
javascript:for(var t,e=&amp;quot;入力するパスワード: &amp;quot;,r=1;r&amp;lt;=4;r++)t=Number(document.getElementById(&amp;quot;txtScndPwdDgt&amp;quot;+r).innerHTML),e+=&amp;quot;123456&amp;quot;.substr(t-1,1);alert(e); あとはブラウザのブックマークに新しくページを追加し、URLに上記のjavascriptを入力しておくだけです。
みずほダイレクト以外のサイトでもブラウザの開発者ツールでHTML要素を調べれば
似たような処理を作れると思います。</description>
    </item>
    
    <item>
      <title>Linux Mintにsassをインストールする</title>
      <link>/posts/2019/09/29/ruby-sass-error/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/29/ruby-sass-error/</guid>
      <description>インストール方法 最終的に行き着いたインストール方法です。
インストールするだけならこちらを実行してください。
$ apt install ruby-sass ruby-dev $ sudo gem install listen --version &#39;~&amp;gt; 3.0&#39; 躓いた点 エラーメッセージで検索する人もいると思うので、
躓いた工程をメモしておきます。
まず、最初にsassだけインストールしました。
$ apt install ruby-sass すると、sassコマンドでwatchをする際にエラーが出ました。
$ sass --watch ./sass:./css --style compact --no-cache &amp;gt;&amp;gt;&amp;gt; Sass is watching for changes. Press Ctrl-C to stop. LoadError: cannot load such file -- listen Run &amp;quot;gem install listen --version &#39;~&amp;gt; 3.0&#39;&amp;quot; to get it. Use --trace for backtrace. watchをするためにはlistenが必要であるようです。
そこでlistenをインストールしようとしましたが、エラーになりました。
$ sudo gem install listen --version &#39;~&amp;gt; 3.</description>
    </item>
    
    <item>
      <title>Linux Mint上でWindows10を動かす</title>
      <link>/posts/2019/09/28/linux-mint-virtualbox/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/28/linux-mint-virtualbox/</guid>
      <description>フロントエンドを触っているとどうしてもIEでの動作確認が必要になるので
VirtualBoxを使ってWindows環境を用意します。
Windowsディスクイメージの取得 Microsoftの公式ページにてWindows 10のディスクイメージ(iso)を取得しておきます。
https://www.microsoft.com/ja-jp/software-download/windows10ISO
Virtualboxのインストール 以下のコマンドでインストールします。
apt install virtualbox virtualbox-qt 上記実行後、一旦ログアウトするとメニューにvirtualboxが追加されます。
仮想マシンの作成 VirtualBoxを起動し、仮想マシンを新規作成します。
選択肢はWindows10のものを選んで行きます。
仮想マシンが作成できたら設定の「ストレージ」を開き、
空になっている光学ドライブ(CDアイコン)にダウンロードしておいたWin10のディスクイメージを設定して起動します。
あとは指示に従ってwin10のインストールを進めるだけです。
インストールが完了したら先程光学ドライブに設定したディスクイメージは除いて構いません。
その他設定メモ ゲストマシン(仮想マシン)から見るとホストマシンのIPアドレスは「10.0.2.2」になっています。
なので、ホストマシンにてDockerを動かして置いてゲストマシンでhttp://10.0.2.2にアクセスすれば動作確認ができます。</description>
    </item>
    
    <item>
      <title>CSSでtext-orientationは使ってはいけない</title>
      <link>/posts/2019/09/14/text-orientation-upright/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/14/text-orientation-upright/</guid>
      <description>ちょっと釣りっぽいタイトルですが
ちょっと困った事があったので書いておきます。
やった事 縦書きの文書(英数字の向きは縦)を書くことがあったので
以下のようにtext-orientationを使って実装しました。
CSS
div { width: 30px; height: 290px; margin: 20px auto; } p { padding: 20px; border: 2px solid #000; -webkit-writing-mode: vertical-rl; /* 縦書きにする */ -ms-writing-mode: tb-rl; /* 縦書きにする */ writing-mode: vertical-rl; /* 縦書きにする */ text-orientation: upright; /* 英数字の向きを縦にする */ } HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;僕にもし子供が産まれたら&amp;lt;br/&amp;gt;世界で2番目に好きだと話そう&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; Chrome等で確認すると想定通りになりました。 これで満足していたのですが、実はtext-orientationはIEでは対応しておらず
数字が横向きになってしまいました。(2019年9月現在)
対応方法 text-combine-uprightというスタイルがあるので
これを使って数字部分を縦向きにします。
変更後のソースは以下のようにします。
CSS
div { width: 30px; height: 290px; margin: 20px auto; } p { padding: 20px; border: 2px solid #000; -webkit-writing-mode: vertical-rl; /* 縦書きにする */ -ms-writing-mode: tb-rl; /* 縦書きにする */ writing-mode: vertical-rl; /* 縦書きにする */ } span { font-family: &amp;quot;メイリオ&amp;quot;; -webkit-text-combine: horizontal; /* 英数字の向きを縦にする */ -ms-text-combine-horizontal: all; /* 英数字の向きを縦にする */ text-combine-upright: all; /* 英数字の向きを縦にする */ } HTML</description>
    </item>
    
    <item>
      <title>【Wordpress】画像ファイルに設定されたタイトルとキャプションを削除する</title>
      <link>/posts/2019/08/26/wp-media-infomation/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/08/26/wp-media-infomation/</guid>
      <description>環境  WordPress 4.8.3   やりたい事 Wordpressのメディアに画像ファイルをアップロードする際
画像のタイトルは基本的には画像のファイル名となりますが
アップする画像ファイルによってはタイトルやキャプションが設定されている事があります。
例えば、オリンパスのデジカメで撮った写真だと
全ての画像のタイトルとキャプションが『OLYMPUS DIGITAL CAMERA』になる事があり
このままでは管理がしにくく、都度修正するのも手間です。
そこで、画像ファイルに設定されている値は無視するようにします。
(WP上ではタイトル＝ファイル名となる)
対応方法 function.php に以下の記載をするだけです。
function delete_media_title_caption( $img_meta ) { $img_meta[&#39;title&#39;] = &#39;&#39;; $img_meta[&#39;caption&#39;] = &#39;&#39;; return $img_meta; } add_filter( &#39;wp_read_image_metadata&#39;, &#39;delete_media_title_caption&#39; ); これで画像アップ時にファイルに設定されていたタイトルとキャプションは無視されます。</description>
    </item>
    
    <item>
      <title>SSHポートフォワーディングでローカルから外部サーバーへアクセスする</title>
      <link>/posts/2019/08/15/ssh-portfowarding/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/08/15/ssh-portfowarding/</guid>
      <description>環境  amazonlinux:2017.03-with-sources  Dockerコンテナのベースイメージです。 sshクライアント用のソフトはyumでインストールしてあるとします。     やりたい事 ローカル環境(Docker)で動かしているアプリケーションから
アクセス制限のかかっているAPIサーバーやDBサーバーへアクセスしたかったので
SSHポートフォワーディングを使って実現しました。
SSHポートフォワーディングを使えば、自分が特定のポートで受けた通信を特定のサーバー(SSHで入れる事が条件)を経由して別のサーバーへ受け流す事ができるようになります。
コマンドは以下のように実行します。
ssh -f -N -L {自分が待ち受けるポート}:{アクセスしたいサーバーのIPやホスト名}:{アクセスしたいサーバーのポート} -i {SSHするための秘密鍵のパス} {SSH先のユーザー}@{SSH先のサーバー} -p {SSHポート} -4 (sshのオプション説明は調べればすぐ出てくるので割愛します)
例えば以下のようにコマンドを打つと
自分が10080ポートで受けた通信はserver2経由でserver1の80ポートに流して、そのレスポンスをそのままリクエスト元に戻す
という意味になります。
なお、server2はポート22でec2-userユーザーにSSH接続できるものとします。(秘密鍵認証)
ssh -f -N -L 10080:server1:80 -i ~/.ssh/id_rsa ec2-user@server2 -p 22 -4 手順 ①純粋なポートフォワーディングを使う 下図のような通信イメージです。
 WEBアプリのコンテナにてSSHポートフォワーディングを実行。 WEBアプリから自身の3306ポートへ通信が発生したらポートフォワーディング発動し、
ssh.server.com経由でdb.server.com:3306へアクセスする。 WEBアプリから自身の10443ポートへ通信が発生したらポートフォワーディング発動し、
ssh.server.com経由でapi.server.com:443へアクセスする。  WEBアプリが動いているDockerコンテナ内にてSSHポートフォワーディングのコマンドを実行します。
ssh -f -N -L 3306:db.server.com:3306 -L 10443:api.server.com:443 -i /path/to/secret_key user@ssh.server.com -p 22 -4 あとはアプリケーション内で以下の箇所を変更すればポートフォワーディングでアクセスできるようになります。
・「db.server.com:3306」の通信箇所を「localhost:3306」へ通信するよう変更
・「api.server.com:443」の通信箇所を「localhost:10443」へ通信するよう変更</description>
    </item>
    
    <item>
      <title>フリーWi-FiでVPN通信がうまくいかない</title>
      <link>/posts/2019/08/02/vpn-accident/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/08/02/vpn-accident/</guid>
      <description>※注意 起こった事象と考察をメモしているだけです。
本当の原因や最適な解決方法は分かっていません。
事象 PCを喫茶店や漫画喫茶、建物のフリーラウンジなどで公開されているフリーWi-Fiにつなぎ、
そこからVPN(L2TP/IPsec)に繋いだところ一部環境に接続できないという状況になりました。
具体的には以下のような状態でした。
 [OK] VPN接続は成功している。 [OK] グローバルIPでの接続は問題なさそう。  curl inet-ip.info コマンドでVPN接続後のIPになっていることを確認。 グローバルIPで穴あけしているプライベートサイトも表示できている。   [NG] プライベートIPでの接続ができない。  VPNサーバーからプライベートIPで接続できるサーバーへSSH接続できない。    原因の推察 不特定多数の人が使うWi-Fiの場合セキュリティ的に不安があるので
Wi-Fi接続者同時が通信の傍受などをしないようにルーター側で
プライベートネットワークを変更するような処理を入れているのかもしれません。
対策 対策らしい対策では無いですが、フリーWi-Fiを使うのをやめるしかなさそうです。
モバイルWi-Fiを契約して持ち歩いたり、スマホのテザリングを使って接続すればVPN接続はうまくいきました。</description>
    </item>
    
    <item>
      <title>コマンドラインからVPNの接続＆切断をする</title>
      <link>/posts/2019/07/29/linux-mint-vpn/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/07/29/linux-mint-vpn/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit)   Linux MintはGUIにてVPNの設定ができ、VPNの接続＆切断もGUIから行なえます。
しかし、ターミナル操作中などコマンドからVPNを操作したいときがあるので
コマンドを調べました。
VPN名確認 自分でつけた名前なので調べる必要は無いかもしれませんが
一応以下コマンドで調べられます。
(以下例だと『SampleVPN』がVPN名)
$ nmcli connection | grep vpn SampleVPN 123abc12-1a2b-1234-12a1-1234567890ab vpn -- VPN接続 以下コマンドでVPN接続します。
nmcli con up id {VPN名} # 例： nmcli con up id SampleVPN VPN切断 以下コマンドでVPN切断します。
nmcli con down id {VPN名} # 例： nmcli con down id SampleVPN 短縮コマンド登録 エイリアスを登録しておくと楽です。
alias up-vpn=&amp;quot;nmcli con up id SampleVPN&amp;quot; alias down-vpn=&amp;quot;nmcli con down id SampleVPN&amp;quot; </description>
    </item>
    
    <item>
      <title>LightsailにOpenVPNサーバーを立てる</title>
      <link>/posts/2019/07/25/lightsail-vpn/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/07/25/lightsail-vpn/</guid>
      <description>環境  Amazon Linux AMI release 2018.03 openvpn 2.4.4  参考  LightsailでVPN Serverを構築する|memoTech AmazonLinuxにOpenVPNサーバを構築する|ねこの足跡R   国内のVPNサービスを契約していたのですが
同時に1デバイスしか接続できないし、回線がめっちゃ遅かったので
自前でVPNサーバーを立てることにしました。
AWSのLightsail上にOpenVPNでサーバーを立てて
Linux Mint, Android, iPhoneで接続できるようにします。
インスタンス設定 新規インスタンス作成 Lightsailのページにて『インスタンスの作成』をクリックします。
https://lightsail.aws.amazon.com/ls/webapp/home/instances
インスタンスイメージとして以下を選択します。
 Lunux/Unix OSのみ Amazon Linux  インスタンスプランはVPNの利用予定に合わせて選びます。
個人でちょっと使う程度であれば最安のプランでよいと思います。
インスタンス名を適当につけて「インスタンスを作成」をクリックします。
静的IPの設定 インスタンス一覧画面に戻るので
先程作成したインスタンスの「︙」から『管理』をクリックします。
ネットワーキングタブを開き、「静的IPの作成」をクリックします。
静的IPの設定画面になるので、適用するインスタンス（今作ったインスタンス）と
静的IPの名前を決めて「作成」をクリックします。
ポート開放 対象インスタンスの『ネットワーキング』タブを開きます。
ファイアウォールの「＋追加」をクリックし、TCPの1194ポートを開きます。
Lightsailへの接続 インスタンス一覧にて再度「︙」から『接続』をクリックします。
別ウィンドウでターミナル調のブラウザが立ち上がるので、以降の作業を実施します。
手元のターミナルからsshで繋いでも良いです。
Lightsailの時刻を日本時間に合わせる 念の為タイムゾーンを日本にしておきます。
sudo cp -p /usr/share/zoneinfo/Japan /etc/localtime sudo service rsyslog restart sudo service crond restart OpenVPN設定 OpenVPNインストール 以下コマンドを実行します。</description>
    </item>
    
    <item>
      <title>e-taxで源泉所得税を申請する。</title>
      <link>/posts/2019/07/16/withholding-income-tax/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/07/16/withholding-income-tax/</guid>
      <description>e-taxにて源泉所得税の申請をしたので、その手順メモです。
税務署に行って紙で源泉所得税の申請ができる程度の基礎知識はある前提とします。
申請書の作成 e-taxの左メニューから作成＞申告・申請等開き、新規作成をクリックします。
次に以下を選び『次へ』をクリックします。
 手続きの種類：申請・届出 税目：源泉所得税  次に以下をチェックを入れて『次へ』をクリックします。
 徴収高計算書関係  給与所得・退職所得等の所得税徴収高計算書（※）  給与所得・退職所得等の所得税徴収高計算書（※）      ※所得税の納付を毎月してる会社は「一般」、半年分まとめて納税してる会社は「納期特例分」です
申告・申請等名を指定する画面になるので、自分で分かる程度の名前をつけて『OK』をクリックします。
（「XXXX年度〇期_源泉所得税」など）
次に基本情報の入力画面になるので、以下を入力or確認して『OK』をクリックします。
 提出税務署：申請する税務署（自分の会社がある自治体） 提出年月日：今の日付 法人名(カナ)：自分の会社名カナ 法人名（必須）：自分の法人名 納税地：自分の会社の住所と電話番号 代表者名（カナ）： 代表者名（必須）： 代表者：代表者の住所電話番号 金融機関：会社の銀行口座  帳票一覧が開くので、さきほど選択した帳票をダブルクリックで開きます。
すると帳票の中身が修正できるようになるので記載します。
小さくて文字が見づらいですが、右クリックすると拡大メニューが出ます。
基本的に「いつの期間に」「何人に」「いくら支給して」「いくら源泉徴収したか」を書くだけです。
（右端の「納期等の区分」(名前は変わるかも)にも「いつの期間に」を記載しなければならないので要注意）
公式の説明はこちら。
http://www.e-tax.nta.go.jp/tetsuzuki/tetsuzuki4_4.htm
記載が終わったら「作成完了」をクリックします。
控えが必要ならここで印刷などしておきます。
申請書の送信 e-tax左メニューの「送信可能一覧へ」＞「送信」を開きます。
先ほど作成した帳票が表示されるので、選択して『送信』をクリックします。
何か問題があればエラーが表示されるので、エラー指摘箇所を訂正して再度送信します。
源泉所得税の支払い 送信が完了するとメッセージボックスに受付完了のメッセージが届き、
そのメッセージの下のボタンから払込ができます。
オンラインで払う場合
クレジットカード払いは手数料が取られるので
インターネットバンキングの方が良いです。
これで源泉所得税の申請は完了です。</description>
    </item>
    
    <item>
      <title>コマンドで画像の撮影日等を変更する</title>
      <link>/posts/2019/07/02/exiftool-modify-alldate/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/07/02/exiftool-modify-alldate/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit) exiftool 10.80   写真をスキャナを使って取り込むと画像ファイルに撮影日が反映されないので
exiftoolというEXIF情報を扱えるツールを使って撮影日を変更します。
※この手順ではEXIF情報を無理やり書き込んでいるだけなので、
ファイルフォーマットがEXIF形式(?)に変わるわけではなさそうです。
まずexiftoolがインストールされていない場合はインストールします。
apt install exiftool 現状のEXIF情報を参照するには以下のようにコマンドを実行します。
下記コマンドだとカレントディレクトリにあるpngファイル全てのEXIF情報を参照できます。
exiftool -s ./*png (./*pngの部分は画像ファイルが置いてあるパスに読み替えてください) 続いて撮影日付等を書き換えます。
以下のコマンドで撮影日時等を「2019/02/23 00:00:00」に変更しています。
exiftool -overwrite_original -alldates=&#39;2019:02:23 00:00:00+09:00&#39; ./*png exiftool -overwrite_original -TimeStamp=&#39;2019:02:23 00:00:00+09:00&#39; ./*png ※overwrite_originalを指定する事で上書きするようにしているのですが
もし書換え前のデータを残したい場合はこのオプションを外してください。
次にファイルの更新日も修正してしまいます。
ファイルの更新日はどうでも良い人は飛ばして良いです。
exiftool -overwrite_original -FileModifyDate=&#39;2019:02:23 00:00:00+09:00&#39; ./*png 再度EXIF情報を確認すると、日付データが更新されている事が分かります。
exiftool -s ./*png </description>
    </item>
    
    <item>
      <title>Linux Mintを無線LANのアクセスポイントにする</title>
      <link>/posts/2019/04/17/linuxmint-access-point/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/04/17/linuxmint-access-point/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit)   VPN経由でないと表示できないページをPC, Android, iOSで同時に見たかったのですが
自分の契約しているVPNが1度に1デバイスしか接続できなかったので
PC(Linux Mint)でVPN接続し、その接続を無線LANで共有するようにしました。
Macでいうところの「ネットワークの共有」です。
参考 Linuxで簡単に無線Lanアクセスポイントを作る
だいたい参考ページ通りですが、うまく動かない箇所があったので少しだけコマンドを修正しています。
環境構築 必要なソフトウェアのインストールします。
apt install util-linux procps hostapd iproute2 iw アクセスポイントを作成するスクリプトの取得します。
wget https://raw.githubusercontent.com/oblique/create_ap/master/create_ap 実行権限を付与してパスが通っている場所に移動させます。
sudo chmod +x create_ap sudo mv create_ap /usr/local/bin/. ネットワークの共有 事前にネットワークインターフェース(NIC)を調べます。
ip a すごいざっくりいうと
eで始まるNICは有線LANで、wで始まるNICは無線LANです。
また、VPNの場合はVPNの種類(pppなど)が付いていると思います。
loやbrで始まるのは内部的に使っているものなので基本的に無視して良いです。
分からなければ『コントロールセンター＞ネットワーク接続』にて利用したいNICの詳細を開き、
デバイスの「XX:XX:XX:XX:XX:XX」が一致するNICを選べば良いです。
このNICの中から『外界⇔PC』通信用のNICと『PC⇔スマホ』通信用のNICを決めます。
注意点としては上記2つのNICは物理的に別のハードウェアでなければならないという事です。
例えば、PCに無線LANのNICが1つしか無い場合は『PC⇔スマホ』のNICにそれを使うので、
『外界⇔PC』のNICは有線LANを使ったりしなければなりません。
利用するNICが決まったら以下の用にコマンドを打ちます。
sudo create_ap {スマホとのNIC} {外界とのNIC} {SSID} {SSIDの接続パスワード} たとえば、スマホとのNICが無線LANwlp3s0で、外界とのNICがVPNppp0の場合は以下のコマンドでアクセスポイントを開始できます。
なお、以下コマンドではSSIDはMyAPでパスワードはMyPasswordとなります。
sudo create_ap wlp3s0 ppp0 MyAP MyPassword 上記コマンド実行後、ターミナルにはアクセスポイントとしての稼働ログが流れます。</description>
    </item>
    
    <item>
      <title>IME有効時の入力イベントを調べる</title>
      <link>/posts/2019/04/10/javascript-event/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/04/10/javascript-event/</guid>
      <description>PC/Android/iOSでIME有効時に入力イベントが結構違ったので調べました。
調べた環境は以下の通りです。
   OS ブラウザ     PC (Linux Mint 19.1 MATE) Chrome Ver.73.0   Android 8.0.0 (Galaxy S8) Chrome Ver.73.0   iOS 12.2 (iPhone 6) Safari 12.1    テキストボックスに文字を入力した際のイベントを調べました。
調べたイベントはkeydown, keyup, keypress, textInput, inputです。
（Androidはブラウザ以外にもキーボードアプリも影響あるのかな？）
IME有効 入力中（未確定） ひらがなで文字を1文字ずつ入力している時のイベントです。
   イベント PC Android iOS 取れる値     keydown  ○ ○ 今回入力前の文字列   keyup ○ ○ ○ ※OSにより違う   keypress   ○ 今回入力前の文字列   textInput       input  ○ ○ 今回入力後の文字列    ※keyupで取れる値は以下の通りでした。</description>
    </item>
    
    <item>
      <title>VPNクライアント設定(L2TP over IPsec)</title>
      <link>/posts/2019/03/13/linux-mint-l2tp/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/13/linux-mint-l2tp/</guid>
      <description>環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit) ubuntu 19.10  ■参考 ask ubuntu
 Linux MintでのVPNクライアント設定に少し苦戦したのでメモです。
ubuntuでもほぼ同手順で対応可能でした。
必要なアプリケーションのインストール 以下のコマンドでインストールします。
(ubuntuの場合はaptの前にsudoを付けてください)
$ apt update $ apt install network-manager-l2tp-gnome strongswan libstrongswan-extra-plugins libcharon-extra-plugins ネットワーク設定 まず、『コントロールセンター＞ネットワーク接続』を開きます。
(ubuntuの場合は『設定＞ネットワーク』)
現在のネットワーク一覧が表示されるので、「＋」マーク(追加ボタン)をクリックします。
接続の種類を聞かれるのでVPNの中にある『Layer 2 Tunneling Protocol(L2TP)』を選択して『作成』をクリックします。
L2TPの設定画面が開くので、VPNタブにて以下を設定します。
   項目 設定値     ゲートウェイ VPNサーバーのIPアドレスorホスト名   ユーザー名 VPN接続する際のユーザー名   パスワード 上記ユーザーのパスワード※   NTドメイン 空欄のまま    ※補足 パスワードは入力欄右端の？アイコンをクリックしてポリシーを選択すれば入力できます。
パスワードを接続の都度入力する場合はここでは空欄で良いです。</description>
    </item>
    
    <item>
      <title>terminator &#43; fish &#43; fishermanの導入</title>
      <link>/posts/2019/03/10/linux-mint-terminator-fish/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/10/linux-mint-terminator-fish/</guid>
      <description>■環境 Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit)
ubuntu 19.10
 ※以降のaptコマンドはUbuntuの場合はsudoを付けてください。
terminatorインストール terminatorをインストールします。
apt install terminator  (※2019年11月追記)
Terminatorもいいですが、Tilixというターミナルも良いです。
詳しくは↓こちら↓
Linux用ターミナル『Tilix』
 fishインストール fishをインストールします。
apt install fish インストール後、反映するため一度ログアウトします。
なお、Terminatorはデフォルトのウィンドウサイズが微妙なので変更した方が良いです。
Terminatorのデフォルトサイズを変更する
fishをデフォルトシェルに設定 $ grep fish /etc/shells /usr/bin/fish ←表示されなかったら`which fish`の結果を/etc/shellsに追記する $ chsh -s /usr/bin/fish fishermanのインストール fishermanというfishのプラグイン管理ツールがあります。
fishermanのgithubベージにインストールコマンドが載っています。
https://github.com/fisherman/fisherman
$ curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish $ fisher -v fisher version 3.1.1 ~/.config/fish/functions/fisher.fish ※fisher -vでバージョンが出ない場合は、一回ターミナルを開き直してください。
テーマの変更 fishはテーマを変更することで見栄えが変えられます。
どのようなテーマがあるかは、以下ページが参考になります。
https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md
私は「bobthefish」というテーマを利用しており、以下手順でインストールしています。
$ fisher install oh-my-fish/theme-bobthefish # fisherのバージョンによってはfisher installではなくfisher add bobthefishではPowerLineのフォントが必要なので、そちらもインストールします。</description>
    </item>
    
    <item>
      <title>Terminatorのデフォルトサイズを変更する</title>
      <link>/posts/2019/03/10/linux-mint-terminator-size/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/10/linux-mint-terminator-size/</guid>
      <description>■環境  Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit) terminator 1.91   Linux環境でよく使われているターミナルソフトの「Terminator」ですが、
設定から起動時の縦横サイズを指定できなかったので無理やり設定しました。
設定方法 Terminatorのmanページを見ると以下のオプションがあることが分かります。
https://linux.die.net/man/1/terminator
--geometry=GEOMETRY Specifies the preferred size and position of Terminator&#39;s window; see X(7). x(7)のmanページを見るとgeometryの指定方法が記載されています。
https://linux.die.net/man/7/x
-geometry WIDTHxHEIGHT+XOFF+YOFF (where WIDTH, HEIGHT, XOFF, and YOFF are numbers) これを利用して、Terminatorを起動するショートカット（ランチャー）にオプションを付与してしまい、
サイズと位置を指定するようにします。
設定例 例えばLinux Mintの場合はパネルにTerminatorを追加して右クリックからプロパティを開き、
コマンドの部分を以下のように変更してしまいます。
terminator --geometry=1400x800+200+200 </description>
    </item>
    
    <item>
      <title>Google Optimizeでセッション情報が必要なページを触る</title>
      <link>/posts/2019/03/07/google-optimize-interactive/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/07/google-optimize-interactive/</guid>
      <description>Google Optimizeは無料でABテストなどが行なえるツールです。
ログイン後のページなど、セッション情報が必要なページをGoogle Optimizeのエディタページに指定すると、
セッション情報がないのでエラーページや404ページが表示されてしまいます。
そんな時、エディタページの『インタラクティブモード』を使うと解決します。
手順 Google Optimizeの普通の使い方はできる前提とします。
手順①：エディタページの設定 まず、エディタページはOptimizeで触りたいページに至る前のセッション情報無しで開けるページを指定しておきます。
Optimizeで触りたいページそのものを指定しても良いですが、エディタを開いた時にまずエラーページになるので非効率だと思います。
手順②：Optimize対象のページへの移動 パターンを通常通り作成し、エディタの右上にある四角にカーソルがついているアイコンをクリックします。 するとインタラクティブモードになりサイトの操作ができるようになるので、Optimizeで開きたいページまで移動します。
該当ページを開いたらインタラクティブモードの『終了』をクリックします。
※画面遷移時に勝手にインタラクティブモードが終了している場合もあります 手順③：エディットする セッション情報が不要なページと同様にページの編集をします。
この手順は特別な事はありません。
これでOptimizeの設定は完了です。
プレビュー時はエディタページに指定したURLからスタートするので、Optimizeで編集したページまで移動する必要があります。</description>
    </item>
    
    <item>
      <title>CircleCIからAWS Code Deployを実行する</title>
      <link>/posts/2019/03/04/aws-code-deploy-circleci/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/03/04/aws-code-deploy-circleci/</guid>
      <description>前記事にてCodeDeployの設定は完了したので、それをCircleCIから実行します。
公式の手順ではS3に一度ソースコードを置いてからEC2に展開しているのですが、
できればS3は使いたくなかったのでこちらの記事を参考にしました。
CircleCI+AWS-CodedeployでStaging環境などに自動デプロイさせる
IAM準備 CircleCI用のIAMユーザーを作成します。
まず適当なユーザー名をつけ、アクセスの種類は『プログラムによるアクセス』にチェックをつけ次のステップへ進みます。
既存ポリシーの『AWSCodeDeployFullAccess』を付与して次のステップへ進みます。
タグは不要なので、そのまま次のステップに進んで大丈夫です。
ユーザーの作成をします。
作成したユーザーの「アクセスキーID」と「シークレットアクセスキー」をメモして終了です。
※シークレットアクセスキーはこのタイミングでしか確認できないので忘れないよう注意
CircleCIの設定ファイル作成 リポジトリ内に.circleci/config.ymlを作成し、以下のように記載します。
version: 2 jobs: deploy: docker: - image: cdssnc/aws-cli steps: - run: name: &amp;quot;Set AWS region&amp;quot; command: aws configure set region ap-northeast-1 - run: name: &amp;quot;Run AWS CodeDeploy&amp;quot; command: aws deploy create-deployment --application-name ${DEPLOY_APPLICATION} --deployment-group-name ${DEPLOY_GROUP} --github-location repository=&amp;quot;${DEPLOY_REPOSITORY}&amp;quot;,commitId=&amp;quot;${CIRCLE_SHA1}&amp;quot; workflows: version: 2 build_deploy: jobs: - deploy: filters: branches: only: master AWS CodeDeployをキックすることしか記載していないので、他にも処理が必要な場合は追記してください。
なお、以下の値は後ほどCircleCIの環境変数にて設定するので変数にしています。
変数にせずに直接config.ymlに書き込んでも良いです。
   変数名 内容     DEPLOY_APPLICATION 前記事にて設定したCodeDeployのアプリケーション名   DEPLOY_GROUP 前記事にて設定したCodeDeployのデプロイグループ   DEPLOY_REPOSITORY デプロイ対象のGitHubリポジトリ(「ユーザー名/リポジトリ名」形式)    作成できたらGitHubのmasterブランチにプッシュしておきます。</description>
    </item>
    
    <item>
      <title>AWS Code DeployでEC2にデプロイする</title>
      <link>/posts/2019/02/28/aws-code-deploy/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/02/28/aws-code-deploy/</guid>
      <description>運用していたEC2へのソースコードを反映するのにCodeDeployを導入してみたので、その作業メモです。
とてもシンプルな状態で試したので、環境は以下の通りです。
 EC2インスタンスは１台のみ ELBの利用なし ソースコードはGitHubより取得する デプロイはソースコードをサーバー上に置くのみ デプロイの実行はAWSのコンソールから手動で実行する。  ※CircleCI連携についてはコチラ
IAM準備 EC2用とCodeDeploy用のロールを準備します。
まずEC2用のロールを作成します。
IAMロール作成画面にてAWSサービス ＞ EC2を選び、次のステップへ進みます。
ポリシーはAmazonEC2RoleforAWSCodeDeployを指定して、次のステップへ進みます。
タグは未指定でも良いので、必要なければ次のステップに進みます。
適当なロール名を決めて設定し、『ロールの作成』をクリックします。
次にCodeDeploy用のロールを作成します。
IAMロール作成画面にてAWSサービス ＞ CodeDeployを選びます。
画面が下へスクロールしてユースケースの選択が表示されます。
今回は純粋なEC2上のボリュームにデプロイするだけなので、CodeDeployを指定して次のステップへ進みます。
ポリシーはAWSCodeDeployRoleが表示されるので、そのまま次のステップへ進みます。
適当なロール名を決めて設定し、『ロールの作成』をクリックします。
EC2準備 まず、EC2インスタンスに管理コンソールからロール付与します。
管理コンソールにて対象インスタンスを開いて以下をクリックします。
アクション ＞ インスタンスの設定 ＞ IAMロールの割り当て/置換
そこで先ほど作成したEC2用のロールを設定します。
次にコンソールにて対象インスタンスにログインし、CodeDeployのエージェントをインストールします。
ダウンロードするインストーラーはrubyが無いと動かないので、インストールされていない場合はインストールしておきます。
$ sudo yum install ruby # rubyがインストールされてない場合 $ sudo yum install aws-cli # aws-cliがインストールされていない場合 $ aws s3 cp s3://aws-codedeploy-ap-northeast-1/latest/install . --region ap-northeast-1 $ chmod +x ./install $ sudo ./install auto インストールが完了したら念の為動作している事を確認する。
$ sudo service codedeploy-agent status The AWS CodeDeploy agent is running as PID 12345 もし上記のロール割り当てより先にCodeDeployエージェントを起動してしまった場合は、</description>
    </item>
    
    <item>
      <title>Apacheにサーバーのメモリを食い尽くさせない</title>
      <link>/posts/2019/02/15/apache-tuning/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/02/15/apache-tuning/</guid>
      <description>環境  Amazon Linux AMI 2018.03 Apache/2.4.34 (Amazon)   Apache(prefork)がサーバーのメモリを食い尽くしていたのでチューニングしました。
その際に行なった調査や計算をメモとして残します。
なお、preforkからeventに変更できる場合や、nginxに移行できるのであれば
そちらの方がいいかもしれません。
今回はあくまでpreforkをチューニングする前提での手順です。
サーバー物理メモリ確認 まず、サーバーの物理メモリを調べます
# cat /proc/meminfo | head -n 1 MemTotal: 2004484 kB このサーバーの搭載メモリは2GBのようです。
現在のメモリ使用状況確認 まずサーバー全体の使用メモリを確認します。
以下のワンライナーで出します。(単位はMB)
# ps aux | awk &#39;{print $6}&#39; | awk &#39;{sum=sum+($1/1024);cnt++;} END{print &amp;quot;sum=&amp;quot;sum}&#39; sum=919.656 次にhttpdの子プロセスの使用メモリを確認します。
以下のワンライナーで出します。(単位はMB)
# ps aux | grep httpd | grep apache | awk &#39;{print $6}&#39; | awk &#39;{sum=sum+($1/1024);cnt++;} END{print &amp;quot;sum=&amp;quot;sum &amp;quot; cnt=&amp;quot;cnt &amp;quot; ave=&amp;quot;sum/cnt;}&#39; sum=804.273 cnt=20 ave=40.</description>
    </item>
    
    <item>
      <title>MacにPHP7.2をインストールする</title>
      <link>/posts/2019/02/14/mac-php-72/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/02/14/mac-php-72/</guid>
      <description>環境  macOS Mojave 10.14.2 fish 2.7.1 Homebrew 2.0.1 PHP 7.2.15   Homebrewを使ってMacにPHP7.2をインストールします。
Homebrewがインストールされていない場合は以下を参照してください。
【Mac】Homebrewインストール
まず、Homebrew上でPHP7.2を探します。
$brew search php72 ==&amp;gt; Formulae php@7.2 パッケージが分かったのでインストールします。
$ brew install php@7.2 〜たくさん省略〜 If you need to have php@7.2 first in your PATH run: echo &#39;set -g fish_user_paths &amp;quot;/usr/local/opt/php@7.2/bin&amp;quot; $fish_user_paths&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish echo &#39;set -g fish_user_paths &amp;quot;/usr/local/opt/php@7.2/sbin&amp;quot; $fish_user_paths&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish 〜少し省略〜 インストール完了の直前くらいに上記のような設定追加をするような指示が出力されます。
私はシェルにfishを使っているので上記のようなコマンドでしたが、bashやzshを使っている場合は違うコマンドになると思います。
指示通りに設定をします。
$ echo &#39;set -g fish_user_paths &amp;quot;/usr/local/opt/php@7.2/bin&amp;quot; $fish_user_paths&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish $ echo &#39;set -g fish_user_paths &amp;quot;/usr/local/opt/php@7.</description>
    </item>
    
    <item>
      <title>【Wordpress】TinyMCEテンプレートでS3の画像を使う</title>
      <link>/posts/2019/02/13/wp-tinymcetemplate-s3/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/02/13/wp-tinymcetemplate-s3/</guid>
      <description>環境  Wordpress 4.8.3 TinyMCEテンプレート 4.8.1 WP Offload Media Lite 2.0   事象 WP Offload Media Liteを使ってWordpressの画像を全てS3にて管理している場合、 TinyMCE テンプレートにて作成したテンプレート内に画像をアップして登録しても 記事編集にてテンプレートを呼び出すと画像が見れなくなってしまいます。
※WEBサーバー上の画像は削除する設定とします
原因 WP Offload Media Liteでは画像ファイル全てについて『S3上のパス』と『ローカルにあった場合のパス』の両方を紐づけて持っています。
そして、WP Offload Media Liteは以下のようにデータ内画像パスを置換します。
データ登録時 POSTデータ内の画像パスに『S3上のパス』が存在していた場合は『ローカルにあった場合のパス』に置換してDBに登録する。
(S3→ローカル置換)
データ呼出時 DBから呼出したデータ内の画像パスに『ローカルにあった場合のパス』が存在していた場合は『S3上のパス』に置換して画面に表示する。
(ローカル→S3置換)
しかし、TinyMCE テンプレートに関してはテンプレート登録時の「S3→ローカル置換」は走るのですが、 テンプレート呼出し時の「ローカル→S3置換」は走りません。
よってテンプレート呼出し時は画像パスが『ローカルにあった場合のパス』のままとなり、 ローカルにそんな画像はないので画像が表示されません。
対応 function.phpにデータ登録時のフィルターを追加し、 TinyMCE テンプレートの登録時に「ローカル→S3置換」も走るようにします。
つまり、少々無駄ですがTinyMCE テンプレートの登録時は「S3→ローカル→S3置換」が走るようになります。
function replace_s3_image_on_tinymcetemplates($content){ if ($content[&#39;post_type&#39;] !== &#39;tinymcetemplates&#39; || !class_exists(&#39;Amazon_S3_And_CloudFront&#39;) || !class_exists(&#39;AS3CF_Local_To_S3&#39;)) { return $content; } $s3PluginPath = str_replace(&#39;themes/&#39;.get_template(), &#39;plugins/amazon-s3-and-cloudfront/wordpress-s3.php&#39;, __DIR__); $as3cf = new Amazon_S3_And_CloudFront($s3PluginPath); $localToS3 = new AS3CF_Local_To_S3($as3cf); $content[&#39;post_content&#39;] = $localToS3-&amp;gt;filter_post($content[&#39;post_content&#39;]); return $content; } add_filter(&#39;wp_insert_post_data&#39;,&#39;replace_s3_image_on_tinymcetemplates&#39;); 結構力づくなので、もっと良い方法があれば誰か教えてください。</description>
    </item>
    
    <item>
      <title>gitコマンドチートシート(応用編)</title>
      <link>/posts/2019/02/01/git-cmd-cheatsheet/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/02/01/git-cmd-cheatsheet/</guid>
      <description>gitコマンドの応用的な使い方です。
これができればgit中級者になれるかもしれません。
削除されたリモートブランチの情報を削除する gitはプルをする度にリモートに存在するブランチの情報を取得します。
（git branch -aで見れるremote/xxxxxがそれです)
普通にgit pullを実行するとリモートブランチの取得はしますが
リモートで削除されたブランチについては何もしてくれないので
ローカルにリモート情報として残り続けてしまいます。
リモートで削除されたブランチ情報をローカルから削除したい場合は
プル実行時に以下のオプションを付与します。
git pull --prune 強制プル(force pull) ブランチの状態を強制的にリモートの状態に合わせます。
ローカルのブランチがよく分からない状態になって捨てたい時や
誰かがリモートにforce pushした物を取り込む時に使えます。
(複数人が見てるブランチでforce pushするのは外道ですが…)
git fetch git reset --hard origin/{ブランチ名} ※リモートはoriginの前提
直前のコミットに追加修正する ちょっと修正が漏れていた時などに直前のコミットに追加修正を混ぜ込む方法です。
これを使うとコミット履歴を増やさずに済みます。
git add . git commit --fixup=HEAD git rebase -i --autosquash HEAD~2 (このあとのrebase画面はそのまま保存して閉じる) ★注意★ 直前のコミットがプッシュ済みであった場合
上記コマンド後にforce pushが必要になります。
他の人と共有しているブランチにてforce pushをすると
他の人がpullできなくなる恐れがあります。
自分だけが触っているブランチで行いましょう。
マージ時にコミットログを1つにまとめる 細かくコミットをしながら作業を進めたい時などに
作業ブランチを作り、そこで遠慮なくコミットを沢山し、
その作業ブランチを元ブランチに戻す時にコミットログを1つに集約できます。
git merge --squash {マージ対象ブランチ} git commit Commitコメントに元々のCommitログがデフォルトで記載されていますが
そこは削除してしまっても構いません。
(残しておいても良いです)
現在のブランチとmasterブランチの差分を確認する githubでプルリク送る時に見れるアレですね。
コマンドからも確認することができます。</description>
    </item>
    
    <item>
      <title>【PHP】strtotimeの罠</title>
      <link>/posts/2019/01/31/php-strtotime-trap/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/31/php-strtotime-trap/</guid>
      <description>今日相談を受けた事象が面白かったので記事にします。
事象 既存のPHPで来月の年月を取得する処理があり
リリース時は正常に動いていたのに、今日(1/31)見たら年月がズレていたようです。
ソースコードを見せて貰ったら以下のようになっていました。
echo date(&#39;Ym&#39;, strtotime(date(&#39;Ym-1&#39;) . &#39; + 1 month&#39;)); 原因 まず、date(&#39;Ym-1&#39;) がおかしいですね。
date(&#39;Ym01&#39;)とかdate(&#39;Y-m-01&#39;)とかにするべきですね。
では、なぜリリース時に正常に動いていたのか。
ここでやっとタイトルの「strtotimeの罠」が関わってきます。
strtotime(date(&#39;Ym-1&#39;) . &#39; + 1 month&#39;) これは、2019/1/31であれば
strtotime(&#39;201901-1 + 1 month&#39;) と、なります。
ここでstrtotime様はこう考えます。
 201901-1？なんやそれ、知らんわ
とりあえず今日の日付から+1monthしとこ
今日は1/31だから1ヶ月後は2/31・・・ってそんな日無いわ！
よっしゃ！繰り上げで3/3にしとこ！
 エラーになどしません。
PHPらしいですね。
これにより、1/31に実行すると3月を返してしまい、1ヶ月ズレてしまいます。
もしリリース日やテスト日が月の上旬〜中旬であれば
strtotime様の月繰り上げが発生しないので
出力が年月だけだと不具合に気づきません。
この不具合はテストやってもなかなか出てこないと思うので
実装段階で気を付けないといけないですね。</description>
    </item>
    
    <item>
      <title>window.onloadが動かない</title>
      <link>/posts/2019/01/26/javascript-window-load/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/26/javascript-window-load/</guid>
      <description>事象 javascriptのwindow.onloadを利用して処理を書いても
動作しない時がある。
原因 window.onloadはページを1回表示する際に1度しか実行されない。
もし複数箇所にてwindow.onloadを記載していた場合は
そのうちの1つしか実行されない。
jsファイルを複数に分けていても同様なので
意識してないところでwindow.onloadが使われていて陥る可能性が高い。
解決方法 別の記載に変更する
// 別の記載例 window.addEventListener(&#39;load&#39;, function(){ console.log(&#39;これとか&#39;) }) // jQueryが使えるなら $(window).on(&#39;load&#39;, function(){ console.log(&#39;これとか&#39;) }) </description>
    </item>
    
    <item>
      <title>Docker環境の構築手順</title>
      <link>/posts/2019/01/25/linux-mint-docker/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/25/linux-mint-docker/</guid>
      <description>■環境 Linux Mint 19.1
ubuntu 19.10
 Linux Mint 18.3についてはコチラにて記載していましたが 19.1ではaptにて簡単にインストールできるようになっていたので再記載します。
インストール手順 以下のコマンドを実行します。
(ubuntuの場合はaptの前にsudoを付けてください)
apt install docker.io docker-compose sudo gpasswd -a $USER docker service docker restart これで再起動すればdocker, docker-composeコマンドが使えるようになります。
（ログアウトだけではdockerグループへの参加が上手く反映されないことがある。要再起動）</description>
    </item>
    
    <item>
      <title>【Let&#39;sEncrypt】Amazon Linux2でCertbotを使う</title>
      <link>/posts/2019/01/21/certboy-amazon-linux-2/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/21/certboy-amazon-linux-2/</guid>
      <description>事象 Amazon Linux 2で従来の方法でcertbotをインストールすると
コマンド時に以下のエラーが出て使えませんでした。
Sorry, I don&#39;t know how to bootstrap Certbot on your operating system! You will need to install OS dependencies, configure virtualenv, and run pip install manually. Please see https://letsencrypt.readthedocs.org/en/latest/contributing.html#prerequisites for more info. 従来の方法はこちら
解決方法 以下の方法でcertbotをインストールすれば正常に使えました。
curl -O http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm sudo yum install epel-release-latest-7.noarch.rpm sudo yum install certbot 参考 serverfault</description>
    </item>
    
    <item>
      <title>WordpressからPicoへデータ移行</title>
      <link>/posts/2019/01/17/wordpress-to-pico/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/17/wordpress-to-pico/</guid>
      <description>まず、事前にpicoのブログ化が完了しているものとします
CMSのpicoをブログ化
かなりの力技です
綺麗な方法ではないのでご了承ください
Wordpressからのイメージ取得 まずWordpressから画像ファイル一式をダウンロードしてきます。
Wordpressの/wp-content/uploads/配下のファイルを
全てpico内にダウンロードしてきます。
今回の例ではpico直下にimagesディレクトリを作成し、
そこにダウンロードするとします。
階層としてはpico/images/2019/01/hogehoge.pngのようになります。
Wordpressからの記事取得 WordpressのDBから記事情報を取得します。
MySQL Workbenchにて以下のSQLを実行し、
結果をjsonで出力しておきます
SELECT p.ID, p.post_date, u.user_nicename, p.post_title, p.post_content, t.tags FROM wp_posts p LEFT JOIN wp_users u ON u.ID = p.post_author LEFT JOIN ( SELECT tr.object_id AS post_id, group_concat(t.name) AS tags FROM wp_term_relationships tr LEFT JOIN wp_term_taxonomy tt ON tt.term_taxonomy_id = tr.term_taxonomy_id LEFT JOIN wp_terms t ON t.term_id = tt.term_id WHERE tt.taxonomy = &#39;post_tag&#39; GROUP BY tr.object_id ) t ON t.</description>
    </item>
    
    <item>
      <title>picoでブログ構築</title>
      <link>/posts/2019/01/16/pico-blog/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/16/pico-blog/</guid>
      <description>picoの基本的な構築はこちらを参照してください。
PHP製のCMS「pico」の紹介
picoを使ってブログを構築する方法です。
公式ページにpicoをブログ化する手順が書いてあります。
公式の手順
公式の方法はWEBページ内にブログ領域を作る方法のようなので
そもそもメインコンテンツがブログである場合は以下のように修正します。
なお、できあがったものをテンプレートとして公開しています。
簡単にブログ解説したいだけの人はこちらをご利用ください。
mildjester/pico-blog
 プラグインの追加 プラグインはpico/pluginsの中にダウンロードしておきます。
ページネーション https://github.com/rewdy/Pico-Pagination/releases
ダウンロードした圧縮ファイルの中にpagination.phpがあるので
それを/pico/pluginsの中に配置します。
そしてconfig.ymlにプラグイン用の設定を追記しておきます。
## # Plugin: Pico-Pagination # pagination_limit: 10 # 一覧ページにて１ページに表示する記事数 pagination_next_text: 次へ&amp;gt;&amp;gt; # 次へリンクのテキスト pagination_prev_text: &amp;lt;&amp;lt;戻る # 戻るリンクのテキスト タグ https://github.com/PontusHorn/Pico-Tags
PicoTags.phpを/pico/pluginsの中に配置します。
サイト内検索 https://github.com/mwgg/Pico-Search
40-PicoSearch.phpを/pico/pluginsの中に配置します。
このプラグインではページのタイトルをキーにして検索する事はできるようですが。
記事本文をキーにして検索することはできないようでした。
サイトマップ https://github.com/DaveKin/Pico_Sitemap/
PicoXMLSitemap.phpを/pico/pluginsの中に配置します。
テーマの編集 /pico/themes配下のテーマを編集します。
デフォルトの/pico/themes/defaultをそのまま編集しても良いですし
defaultをコピーして自分用のテーマを作っても良いです。
別テーマを作成する場合はconfig.ymlのtheme: defaultの部分も作成したテーマのディレクトリ名に変更してください。
なお、公式ページなどからテーマをダウンロードすることも可能です。 ただしpico 1.x用のテーマだからか、そのままではうまく動かなかったりするので要注意です。
公式ページのテーマ一覧
index.twigの分離 デフォルトではindex.twigにHTMLの全てが記載されていますが、
テンプレートを増やした際にメンテナンス性が悪くなるので
ヘッダー部分とフッター部分を分離してしまいます。
まずindex.twigと同じディレクトリに_header.twigを作成し、
index.twigの１行目から&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;の上までをコピーします。
次に、同様に_footer.twigを作成して&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;の閉じタグの下から
最終行までをコピーします。
そしてindex.twigのヘッダーとフッターにコピーした部分は削除し、
代わりに{% include &#39;_header.twig&#39; %} と {% include &#39;_footer.</description>
    </item>
    
    <item>
      <title>PHP製のCMS「pico」の紹介</title>
      <link>/posts/2019/01/15/pico-introduction/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/01/15/pico-introduction/</guid>
      <description>picoとは PHP製のCMSで、DBなど利用せずファイルだけでWEBページが作成できます。
公式サイト
ページにはMarkdownを使えるので、Markdownでメモなどを取ることが多い人には
使いやすいCMSなのではないかと思います。
Wordpressと比べてどうか ページの書きやすさ Markdownに慣れている人にとっては書きやすいと思いますが
慣れていないライターさんなどを雇っている場合などは向かないと思います。
また、表現がMarkdownの域に絞られるので、直接HTMLを書けたWordpressの方が
描画は自由にできるかもしれません。
picoでもMarkdown内にHTML書けました
構築のしやすさ 基礎構築だけならソースコードを持ってきて終わりなので楽です。
ただし、プラグインを追加するにはテーマファイルに手を入れる必要があったりするので
単純に「インストール」をクリックするだけのWordpressに比べればそこが手間です。
あと、日本語の情報が少ないのも構築する上ではネックになるかもしれません。
管理のしやすさ 『管理画面』が無いので設定は全てソースコード上で行ないます。
なので、非エンジニアが運用するには難しいかと思います。
ですが、DBがないのでバックアップ管理などは楽です。
GitHubのprivateリポジトリが無料で作れるようになったので
全てそこで管理してしまえば良いと思います。
また、管理画面が無いのでセキュリティ的にも強いと思います。
機能面 Wordpressでデフォルトで用意されているタグやカテゴリがpicoには無いので
若干の不便さはあります。
一応プラグインで追加はできますが、やや煩雑です。
また、プラグインやテーマの数でもWordpressの方が勝ります。
picoの導入 プロジェクト作成 まず、composerでプロジェクトを作成します。
※composerが分からない人はこちら
composer create-project picocms/pico-composer pico 生成されたpicoディレクトリをそのままWEBサーバー上に配置すれば
もう既にデフォルトのページが表示されます
デフォルトページにはコンテンツの配置方法などが記載されているので
確認しておくと良いと思います。
URLリライト設定 picoはURLリライトを利用します。
(必須ではないが無いとURLの見た目がカッコ悪いし、SEO的にも良くなさそう)
URLリライトについてはpico内の.htaccessに記載されています。
.htaccessはApacheでなければ作動しないので、Nginxの場合は別途設定が必要です。
公式のリライト設定手順
設定ファイル作成 pico/config/config.yml.templateをコピー or リネームして
pico/config/config.ymlを作成してください。
とりあえず初期段階で書き換えるのは以下くらいかと思います。
   設定項目 設定内容     site_title サイトのタイトルに書き換え   timezone 日本ならAsia/Tokyo     ※注意</description>
    </item>
    
    <item>
      <title>Linux Mint 19.1 MATEをUSBメモリからインストール</title>
      <link>/posts/wp/1829/</link>
      <pubDate>Thu, 20 Dec 2018 16:25:54 +0000</pubDate>
      
      <guid>/posts/wp/1829/</guid>
      <description>PCを再構築する必要があったので、Linux Mintの最新バージョンを入れて見ました
インストール準備をした作業環境はMacで、USBメモリにイメージを焼いてインストールしています
OSイメージのダウンロード 今回選んだのは『Linux Mint 19.1 &amp;ldquo;Tessa&amp;rdquo; - MATE (64-bit)』です
こちらからダウンロードできます（とりあえず近そうなTaiwanなどからDL）
https://linuxmint.com/edition.php?id=263インストールメディア(USB)の作成 まずMacにUSBメモリを刺し、ターミナルでdiskutil listを実行します
これでUSBメモリのdisk番号を調べます（NAMEやSIZEを見る）
私の場合は /dev/disk2がUSBメモリでした
$ diskutil list /dev/disk0 (internal): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 121.3 GB disk0 1: EFI EFI 314.6 MB disk0s1 2: Apple_APFS Container disk1 121.0 GB disk0s2 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +121.0 GB disk1 Physical Store disk0s2 1: APFS Volume Macintosh HD 70.2 GB disk1s1 2: APFS Volume Preboot 69.</description>
    </item>
    
    <item>
      <title>Wordpressの画像をS3&#43;CloudFrontで配信する</title>
      <link>/posts/wp/1772/</link>
      <pubDate>Tue, 11 Dec 2018 19:30:54 +0000</pubDate>
      
      <guid>/posts/wp/1772/</guid>
      <description>環境 WordPress 4.8.3
 AWS設定手順 IAM設定 まず、WordpressとAWSの連携に使うIAMユーザーを準備します
今回の手順ではバケット側のポリシーで権限付与するので
IAM側の権限設定は適当で良いです
準備したIAMユーザーの以下を控えておいてください
・ARN
・アクセスキーID
・シークレットアクセスキー
S3設定 次にS3にてWordpress用のバケットを用意し
バケットポリシーに以下を設定します
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Sid&amp;quot;: &amp;quot;AllowBucketAccess&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: { &amp;quot;AWS&amp;quot;: &amp;quot;arn:aws:iam::準備したIAMのARN&amp;quot; }, &amp;quot;Action&amp;quot;: [ &amp;quot;s3:GetBucketLocation&amp;quot;, &amp;quot;s3:ListBucket&amp;quot;, &amp;quot;s3:PutObject&amp;quot;, &amp;quot;s3:PutObjectAcl&amp;quot;, &amp;quot;s3:GetObject&amp;quot;, &amp;quot;s3:DeleteObject&amp;quot; ], &amp;quot;Resource&amp;quot;: [ &amp;quot;arn:aws:s3:::対象のバケット/*&amp;quot;, &amp;quot;arn:aws:s3:::対象のバケット&amp;quot; ] } ] } CloudFront設定 ユーザーにS3へ直接画像を取りに来させる事も可能なのですが
転送料金が結構高くなるのでCloudFront経由でS3に繋がせるようにします
まずloudFrontの設定画面にて「Create Distribution」をクリックします
 次にWebの「Get Started」をクリックします。
 「Origin Domain Name」にCloud Front経由にしたいS3バケットを指定します
テキストボックスに見えますが、クリックすると選択肢が表示されます
「Origin Domain Name」を選択すると、「Origin ID」にも勝手に値が入ります
 上記入力したら下までスクロールして「Create Distribution」をクリックします
CloudFrontの一覧に戻りますので</description>
    </item>
    
    <item>
      <title>Google Tag Managerで発火しない時</title>
      <link>/posts/wp/1755/</link>
      <pubDate>Mon, 26 Nov 2018 23:38:42 +0000</pubDate>
      
      <guid>/posts/wp/1755/</guid>
      <description>Google Tag　Managerを使ってトリガーを設定したはずが
思い通りにGoogle Analytics上で集計できない時の調査方法です。
まず、Google Tag Managerの管理画面にて「プレビューモード」にします。
公開ボタンの横にある『プレビュー』をクリックするだけです。
プレビューモードになったら、同じブラウザでテストしたいページを開きます。
すると、Google Tag Managerのコンソールが表示されます。
画面上クリックをするとクリックイベントが発生するのが分かります。
ここでコンソール内の『Variables』または『Data Layer』のを開くと
どのようなトリガーが発火したのかが分かります。
これで確認したクリック時に発火したトリガー（IDやClass）が
Google Tag Managerで設定したトリガーと一致しているか確認します。
ありそうな間違い Google Tag Managerのイベントは一番内側の要素がトリガーになります。
javascriptのonClickとは違うので注意が必要です。
例えば以下のソースコードの場合、sample.pngをクリックした時に
id=&amp;ldquo;fooo&amp;rdquo;のクリックイベントは発火しません。
&amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;fooo&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;./sample.png&amp;quot; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Google Tag Managerの基本設定</title>
      <link>/posts/wp/1741/</link>
      <pubDate>Mon, 26 Nov 2018 22:32:40 +0000</pubDate>
      
      <guid>/posts/wp/1741/</guid>
      <description>Google AnalyticsをGoogle Tag Managerに切り替えた際のメモです。
前提条件としてGoogle Analyticsのアカウントはあることとします。
アカウント作成 まずGoogle Tag Managerのページにてアカウントを作成します
https://tagmanager.google.comアカウント名は任意の物を入力し、国は日本を選択して『続行』をクリックします。
するとコンテナの作成になるので
任意のコンテナ名と利用場所（WEBページかスマホアプリかなど）を選択します。
今回はWEBを選択したとします。
規約に同意するとHTMLに埋め込むタグが表示されます。
&amp;lt;head&amp;gt;内に埋めるタグと&amp;lt;body&amp;gt;に埋めるタグが生成されるので
それぞれ対応する場所に埋め込みます。
これでGoogle Tag Managerを使う準備ができました。
イベントトラッキングの設定 クリックをトラッキングする設定をしてみます。
Google Tag Managerの管理画面を開くと「新しいタグ」のリンクがあるのでクリックします。
タグとは検知する項目みたいなものです。
タグの設定画面が開くので、タグの名前や種類を指定します。
とりあえず、簡単に下図のような設定をします。
「Google アナリティクス設定」という項目があるので、「新しい変数」を選択します。
するとトラッキングIDを入力する欄が出てくるので、Google AnalyticsのトラッキングIDを入力してください。
すべて入力したら「保存」をクリックして閉じます。
次に下の方にスクロールするとトリガーの設定ができます
トリガーとは、イベントを検知する条件です。
プラスマークをクリックすると新規トリガーを作成できます。
トリガーの名前や内容を設定します。
基本的には下図のような設定でよいです。
クリック対象の要素にIDが付いている場合は「Click ID」で良いですが
もしIDを指定していなくてClassなどしか設定されていない場合は
「Click　Classes」を選択してください。
全て完了したら『保存』をクリックしてトリガー設定画面を閉じ、
タグ設定画面でも『保存』をクリックして閉じます。
最後にGoogle Tag ManagerのTOP画面にて「公開」をクリックすれば完了です。</description>
    </item>
    
    <item>
      <title>Chromeの開発者ツールを新タブでも維持する</title>
      <link>/posts/wp/1735/</link>
      <pubDate>Mon, 19 Nov 2018 10:29:41 +0000</pubDate>
      
      <guid>/posts/wp/1735/</guid>
      <description>Chromeの開発者ツールはデフォルトでは新タブには反映されないのですが
スマホモードでページの確認をしている時などは新タブもスマホモードのまま開きたい事が多いです。
以下の設定をすれば新タブも開発者ツールを維持したまま開く事ができます。
①開発者ツールのsettingsをクリックする。
②下の方にスクロールしていき、Auto-open DevTools for popupsにチェックを入れる。
これだけです。</description>
    </item>
    
    <item>
      <title>gitコマンドで複数のGitHubアカウントを使い分ける</title>
      <link>/posts/wp/1715/</link>
      <pubDate>Wed, 14 Nov 2018 20:37:00 +0000</pubDate>
      
      <guid>/posts/wp/1715/</guid>
      <description>環境 Mac OS
(Linuxでも動く気がします）
 ※ 2019/3/29追記 GitHubの利用規約にて1個人で複数の無料アカウントを運用する事は禁止されているようでした。
https://help.github.com/en/articles/github-terms-of-service#b-account-terms
もし複数の無料アカウントを利用している場合はアカウントの統合などを検討した方が良いです。
無料アカウントと有料アカウントを使い分ける場合などは本手順を参考にして貰えればと思います。
概要 GitHubではアカウントに秘密鍵が紐づいており
gitコマンドを実行した際に指定した秘密鍵で利用アカウントを判定しています。
（秘密鍵未指定の場合はデフォルトの秘密鍵）
フリーランスをしていると自分のGitHubアカウントとは別で
取引先様のGitHubアカウントを作成する必要があったりするのですが
１台のPCで複数GitHubアカウントを使っていると秘密鍵の切り替えが面倒です。
私も最初はこちらの記事のように.ssh/configに別ホストとして設定していたのですが
これだとcloneする時などにいちいちホスト名を書き換えたりしなければいけなかったりして
それも少し面倒でした。（特にリポジトリが沢山あるプロジェクトだったので）
https://qiita.com/yamataku29/items/4744c9c70ad793c83b82というわけで
リポジトリ所有者（ユーザーもしくはOrganizations）と秘密鍵の紐づけを設定しておけば
自動でgitコマンド実行時に秘密鍵を使い分けてくれるスクリプトを作りました。
こちらです
https://github.com/mildjester/gits 使い方 ①cloneでもZIPダウンロードでも良いので上記リポジトリをダウンロードしてきます。
②config_templateを同ディレクトリにconfigという名前でコピーします。
③コピーして生成したconfigの以下変数を設定します
■defaultKey
デフォルトの秘密鍵へのパス。基本的にテンプレートのままでいいはず。
■specialKeys
デフォルト以外の秘密鍵を使うリポジトリ所有者と秘密鍵の紐付け一覧。
形式は『リポジトリ所有者::秘密鍵のパス』なので
例えば「所有者AAA」のリポジトリに使う秘密鍵は~/.ssh/id_rsa_1、
「所有者BBB」のリポジトリに使う秘密鍵は~/.ssh/id_rsa_2とする場合は
以下のようになります。
specialKeys=( &#39;AAA::~/.ssh/id_rsa_1&#39; &#39;BBB::~/.ssh/id_rsa_2&#39; ) ④~/.bashrcに以下のエイリアスを追記しておきます。
通常使っているシェルがbash以外（zshやfishなど）の場合は、そちらの設定ファイルへ追記してください。
# gitコマンドを置き換える alias git=&amp;quot;/path-to-gits-repository/gits.sh&amp;quot; ※path-to-gits-repositoryはリポジトリをcloneまたはダウンロードしてきたディレクトリを指定してください
これで何も考えずにgitコマンドを打っても、裏で勝手に秘密鍵を切り替えてくれるようになります。
備考：ghqを使っている場合 私はgit cloneよりもghq getをよく使うので、そのスクリプトも用意しました。
基本的な設定は上記と同じで、エイリアスの設定だけ追加します。
alias ghq_get=&amp;quot;~/git/github.com/mildjester/gits/ghq_get.sh&amp;quot; こちらは完全にコマンドを置き換える訳ではないのですが
以下のコマンドでリポジトリを取得する事ができるようになります。
(ghqとgetの間がスペースではなくアンダーバーになるだけ)
ghq_get git@github.com:AAAA/hogehoge.git </description>
    </item>
    
    <item>
      <title>同じForm内に複数のreCAPTCHA認証ボタンを設置する</title>
      <link>/posts/wp/1627/</link>
      <pubDate>Fri, 26 Oct 2018 13:27:25 +0000</pubDate>
      
      <guid>/posts/wp/1627/</guid>
      <description>WEBページのreCAPTCHA対応しているform内に複数のsubmitボタンを設置する方法です。
前提としてPOSTデータより g-recaptcha-responseを取り出して認証しているとします。
単純にsubmitボタンを複数設置した場合、うまく動きません。
例えば、以下のようなフォームを作った場合
&amp;lt;script&amp;gt; function mySubmit(){ document.getElementById(&amp;quot;myForm&amp;quot;).submit(); } &amp;lt;/script&amp;gt; &amp;lt;form id=&amp;quot;myForm&amp;quot; action=&amp;quot;/hoge&amp;quot;&amp;gt; &amp;lt;button class=&amp;quot;g-recaptcha&amp;quot; data-sitekey=&amp;quot;各自のサイトキー&amp;quot; data-callback=&amp;quot;mySubmit&amp;quot;&amp;gt;送信1&amp;lt;/button&amp;gt; 〜いろいろ〜 &amp;lt;button class=&amp;quot;g-recaptcha&amp;quot; data-sitekey=&amp;quot;各自のサイトキー&amp;quot; data-callback=&amp;quot;mySubmit&amp;quot;&amp;gt;送信2&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; 送信1ボタンのすぐ上に、このようなreCAPTCHA用の要素が生成されます。
&amp;lt;div&amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-badge&amp;quot; 〜略〜 &amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-logo&amp;quot;&amp;gt; &amp;lt;iframe src=&amp;quot;https://www.google.com/recaptcha/〜略〜 &amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-error&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;textarea id=&amp;quot;g-recaptcha-response&amp;quot; name=&amp;quot;g-recaptcha-response&amp;quot; 〜略〜 &amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; そして、送信2ボタンのすぐ上にも同様に要素が生成されます。
送信1ボタンとの違いはiframe内とtextareaのidです。
textareaのidはボタンの数が増える毎に連番が付与されるようです。
&amp;lt;div&amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-badge&amp;quot; 〜略〜 &amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-logo&amp;quot;&amp;gt; &amp;lt;iframe src=&amp;quot;https://www.google.com/recaptcha/〜略〜 &amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;grecaptcha-error&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;textarea id=&amp;quot;g-recaptcha-response-1&amp;quot; name=&amp;quot;g-recaptcha-response&amp;quot; 〜略〜 &amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; このままではPOSTデータに同名のパラメータが存在してしまうので正常に動きません。
そこで、クリックしなかったボタンに紐づくreCAPTCHA要素は削除してしまいます。</description>
    </item>
    
    <item>
      <title>CircleCIの通知をSlackへ飛ばす</title>
      <link>/posts/wp/1573/</link>
      <pubDate>Sun, 14 Oct 2018 22:01:37 +0000</pubDate>
      
      <guid>/posts/wp/1573/</guid>
      <description>参考サイト CircleCIの結果をSlackに通知する 以下のCircle CIの基本設定は完了している前提とします。
Circle CIでプルリク時にUnitテストが走るようにする上記手順を実施しただけではCircle CIの通知はメールで届くので
それをSlackに届くよう変更します。
Slackの設定 まず、SlackにCircle CIアプリをInstallします。
https://my.slack.com/apps/A0F7VRE7N-circleciInstallをクリックすると、通知するチャンネルを選択する画面が表示されます。
好きなチャンネルを指定してください。
次の画面でCircle CIの設定画面にて何をすれば良いか説明してくれます。
Circle CIに設定するWebhookのURL（通知を飛ばすためのURL）が表示されているので確認しておいてください。
また、その説明の下に通知時の名前やアイコンを変更できる欄があるので、変更したければ変更してください。
Circle CIの設定 該当プロジェクトの画面にて設定(歯車アイコン)をクリックし、設定画面を開きます。
左メニューより『NOTIFICATIONS &amp;gt; Chat Notifications』を開き、
『Webhook URL』へ先ほどSlackの画面にて確認したWebhook URLを入力して『Save』をクリックします。
ここで『&amp;amp; Test Hook』をクリックすると設定したチャンネルにテスト通知が届きます。
ちゃんと設定できたか確認するために実行しておくと良いと思います。
上記のように「Hello from CircleCI」が届けば、設定完了です。</description>
    </item>
    
    <item>
      <title>CircleCIで自動デプロイする</title>
      <link>/posts/wp/1538/</link>
      <pubDate>Sat, 13 Oct 2018 23:20:06 +0000</pubDate>
      
      <guid>/posts/wp/1538/</guid>
      <description>参考サイト Circle CIでwebサイトを自動デプロイ GitHubのmasterブランチへマージされたらサーバーにデプロイされるようにする方法です。
ソースコードはPHPを前提としています。
こちらのCircleCIを動かす基本設定は完了している前提とします。
Circle CIでプルリク時にUnitテストが走るようにするCI用ユーザ準備 まず、CircleCIからデプロイするサーバーへSSH接続する為の鍵ペアを作成します。
既存の鍵ペアを使っても動きますが、念のためCI用は別にしておいた方が良いと思います。
ssh-keygen -t rsa -b 4096 -C &amp;quot;ci@nonsensej.xyz&amp;quot; -f ~/.ssh/ci-key 上記コマンドを実行するとパスフレーズを２回聞かれますが、どちらも空のままエンターで良いです。
鍵生成が完了したらホームディレクトリの.ssh配下にci-key(秘密鍵)とci-key.pub(公開鍵)が生成されます。
ci-key.pubは後工程で使いますので、中身を確認しておいてください。
※上記コマンドで鍵ファイル名をci-keyと指定していますが、これは任意の名前で良いです。
次に、デプロイするサーバー上でデプロイする為のユーザーを作成し、
さきほど作成した鍵ペアでSSH接続できるようにします。
こちらも既存ユーザーを使っても動きますが、念のためCI用は別にしておいた方が良いと思います。
adduser -g nginx ciuser su - ciuser mkdir .ssh vim .ssh/authorized_keys // ci-key.pubの内容を貼り付け CircleCI管理画面設定 次にCircleCIのWEBコンソールで設定をします。
該当プロジェクトの画面にて設定(歯車アイコン)をクリックし、設定画面を開きます。
SSH Keyの設定 左メニューより『PERMISSIONS &amp;gt; SSH Permissions』を開き、『Add SSH Key』をクリックします。
ポップアップが開くので、以下を設定します。
Hostname : デプロイするサーバーのホスト名
Private Key : 最初に作ったci-keyの中身全て
完了したら、今登録した鍵情報のFingerprintが表示されるので確認しておきます。
（後工程のCircleCI設定ファイル編集時に使います）
環境変数の設定 後工程で編集するCircleCI設定ファイルで環境変数を使うことができるので設定します。
この作業は別に必須ではないです。
設定ファイルを使いまわしたい場合は、環境により変動する部分を環境変数にしておいてもいいかもしれません。
左メニューより『BUILD SETTINGS &amp;gt; Environment Variables』を開き、『Add Variable』をクリックします。</description>
    </item>
    
    <item>
      <title>akamaiのレスポンスヘッダーをChromeで確認する</title>
      <link>/posts/wp/1521/</link>
      <pubDate>Wed, 26 Sep 2018 12:02:33 +0000</pubDate>
      
      <guid>/posts/wp/1521/</guid>
      <description>背景 今お手伝いをしている会社さんではakamaiを使ってページをキャッシュさせてます
akamaiについてはコチラ
https://www.akamai.com/jp/ja/WEBページの開発をしていると、今自分が表示しているページが
akamaiのキャッシュなのかどうなのか知りたい時があります
Google Chromeの開発者ツールを使えば一般的なレスポンスヘッダーは見れますが
akamaiのレスポンスヘッダーは特殊なので見えません
curlコマンドにオプションをつけて叩く方法もありますが
ログイン必須の画面をチェックするにはCookieの設定もしたりしなければいけません
https://qiita.com/rasaka/items/fc96cd3b8f73a02477cb解決策 そんなとき、Chromeの拡張機能『CDN Headers &amp;amp; Cookies』を使えば
簡単にakamaiのレスポンスヘッダーを見る事ができます
https://chrome.google.com/webstore/detail/cdn-headers-cookies/obldlamadkihjlkdjblncejeblbogmnb使い方は簡単です。
①ストアからChromeに追加する ②チェックしたい対象ページを開く ③Chromeツールバーにいる黄色いやつをクリックする ④Response Headersタグを開きステータスを確認する ステータスの意味などはakamaiのコミュニティにて説明してくれていました</description>
    </item>
    
    <item>
      <title>WindowsでDocker Toolbox＆docker-composeを動かす</title>
      <link>/posts/wp/1500/</link>
      <pubDate>Fri, 21 Sep 2018 17:55:45 +0000</pubDate>
      
      <guid>/posts/wp/1500/</guid>
      <description>仕事でWindows利用者にDocker環境を構築してもらう事があったのですが
結構苦労したので手順を残します。
■□ 注意■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□
MacやLinuxでdocker-composeを普通に使える前提で手順を書きます。 Dockerやdocker-compose自体の説明はあまり書きません □■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□
もし、Windows10 64bit(Home以外)を使っている人であればこの記事の作業は不要です。
Docker ToolboxではなくDocker for Windowsをインストールしてください。
（たぶん、Docker for Windowsの方が楽に構築できると思われます）
Docker Toolboxのインストール まずDocker Toolboxをダウンロードします。
以下のページにてDocker Toolboxをダウンロードしてください。
https://docs.docker.com/toolbox/overview/#ready-to-get-startedダウンロードしてきたEXEファイルを実行するとインストーラーが走りますので、
そのまま次へ次へと進みます。
インストールが完了すると『Docker Quickstart Terminal』というショートカットが
デスクトップに作られるので実行します。
しばらく待つとDockerが立ち上がります。(クジラのAAが表示されます)
docker-compose.ymlの作成 docker-compose.ymlを書きます。
基本的な書き方はMacやLinuxと同じなので割愛します。
気をつけなければいけないのはvolumesの書き方です。
相対パスで記載する場合は以下のように他OS同様の記載ができます。
volumes: ./php.ini:/etc/php.ini 次に絶対パスで記載する場合ですが、「C:¥」の部分は「/c/」と書きます。
例えば「C:¥develop¥app」にあるディレクトリを共有する場合は以下のような記載になります。
volumes: /c/develop/app:/var/www/html 後に出てくるVirtualboxの共有フォルダ設定次第ではこの通りにしない事も可能かもしれませんが、
できるだけシンプルに構築するため、このようにします。
もしMySQLのコンテナを作成する場合は
データの永続化のためのホスト側ディレクトリを指定することはできません。
つまり、この書き方だとNGで
services: mysql: 〜中略〜 volumes: - ./mysql/data:/var/lib/mysql この書き方ならOKです
services: mysql: 〜中略〜 volumes: - mydb:/var/lib/mysql 〜中略〜 volumes: mydb VirtualBoxの設定 Docker Toolboxでコンテナを動かす場合に一番引っかかる部分かもしれません。
ポートフォワーディングの設定 docker-compose.ymlにてポートフォワーディングを8080:80と設定しただけでは
ローカルPCにて http://localhost:8080にアクセスしてもDockerコンテナに
リクエストは飛びません。
なぜかというと、WindowsでDocker Toolboxを使ってコンテナを動かした場合は</description>
    </item>
    
    <item>
      <title>CircleCIでプルリク時にUnitテストが走るようにする</title>
      <link>/posts/wp/1477/</link>
      <pubDate>Tue, 14 Aug 2018 01:30:40 +0000</pubDate>
      
      <guid>/posts/wp/1477/</guid>
      <description>CircleCIを使って、GitHubにてプルリクエストを投げた際に
Unitテストが走るようにします。
ソースコードはPHPで、Unitテストにはphpunitを使っている前提とします。
Circle CIのアカウント登録 Circle CIのホームページにアクセスし、右上のSign Upをクリックします。
GitHubかBitBucketのアカウントでログインできるようです。
今回はGitHubのアカウントでログインしました。
連携を許可するか聞かれるのでAuthorize circleciをクリックします。
Circle CIにプロジェクト作成 アカウント作成が完了したらプロジェクト作成するためAdd Projectsをクリックします。
紐付けるリポジトリのSet Up Projectをクリックします。
対象リポジトリの環境を設定します。
該当するものをクリックします。
下にスクロールすると今後の流れが書いてあります。
まず該当リポジトリに.circleci/config.ymlを作成します。
config.ymlの内容はとりあえず内容はCopy To Clipboardでコピーしたもの(2018/8/11現在)に
以下の修正を加えたものにしています。
①Dockerイメージ変更Dockerイメージを自分のサーバーの環境に近いものに変更します。
どのようなイメージがあるかは詳細はDockerHubで確認してください。
https://hub.docker.com/r/circleci/(使いたいDockerイメージが別にであるなら、circleci公式のイメージじゃなくても動くらしい)
なお、サンプルのconfig.ymlに書いてあったcircleci/php:7.1.5-browsersは存在しません。
サンプルのまま実行すると以下のエラーが発生します。
Error response from daemon: manifest for circleci/php:7.1.5-browsers not found ②phpunit実行コマンドを変更composerなどでphpunitを入れている場合はコマンドが違うと思うので変更します。
出来上がったconfig.ymlが以下です
# PHP CircleCI 2.0 configuration file # # Check https://circleci.com/docs/2.0/language-php/ for more details # version: 2 jobs: build: docker: # specify the version you desire here #- image: circleci/php:7.</description>
    </item>
    
    <item>
      <title>【Linux Mint】 Fcitxの変換候補が黒く塗りつぶされる</title>
      <link>/posts/wp/1470/</link>
      <pubDate>Mon, 13 Aug 2018 13:01:18 +0000</pubDate>
      
      <guid>/posts/wp/1470/</guid>
      <description>環境 Linux Mint 18.3 cinnamon 64bit
 事象 ある日、Fcitxで日本語入力していたら
変換候補が真っ黒になってしまいました
Fcitx設定にて外観タブを見てみると、Kimpanelに設定オプションはありませんとのこと。
解決方法 ちょっと調べてみた感じでは「Kimpanel」ってそもそも要らないようなのでアンインストールしてしまいます。
sudo apt purge fcitx-module-kimpanel これで一度ログアウトして再度ログインすると、真っ黒状態は治ります。</description>
    </item>
    
    <item>
      <title>AWS ELB配下でWordpressを動かす際のSSL対応</title>
      <link>/posts/wp/1439/</link>
      <pubDate>Fri, 20 Jul 2018 17:56:57 +0000</pubDate>
      
      <guid>/posts/wp/1439/</guid>
      <description>■環境 AWS ELB
AWS EC2
Apache 2.2.32
Wordpress 4.1.1
 EC-CUBEではありませんが、内容的にはほぼ以下の伊賀もの様の記事通りです。
続カッコの付け方WordpressでもリクエストURLを見ており、httpsでアクセスした場合のみhttpsでCSSを取得するようになっているのですが
AWS ELBがポートを80に変えてしまうため以下の事象が起こります。
① ChromeでHTTPSのWordpressページを開く
② WordpressがCSSなどはHTTPで取得するよう返す
③ Chrome様が『HTTPSのページのリソースはHTTPSで取得せぇや！』と怒る
※ELB周りの話はこちらでも書いてます
AWS ELB配下でApacheのRewriteRuleが上手く動かなかった話対応方法上記記事同様に、Wordpress（Ver4.1.1時点）でも $_SERVER[&amp;lsquo;HTTPS&amp;rsquo;]を見ているので、
Apacheの設定（.htaccessでも可）で書き換えてしまえば解決です。
# ELBがhttpsで受けている場合はHTTPSを有効にする SetEnvIf X-Forwarded-Proto ^https$ HTTPS=on # httpアクセスはhttpsにリダイレクトする(設定するかは任意) RewriteEngine on RewriteCond %{HTTP:X-Forwarded-Proto} ^http$ RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L] </description>
    </item>
    
    <item>
      <title>grepでアクセスログからTPSを出す</title>
      <link>/posts/wp/1436/</link>
      <pubDate>Thu, 05 Jul 2018 15:28:23 +0000</pubDate>
      
      <guid>/posts/wp/1436/</guid>
      <description>■環境 Amazon Linux AMI release 2013.03
grep 2.6.3
 WEBサーバーのアクセスログからTPSを出すコマンドです。
ApacheでもNginxでも対応可能です。
アクセスログの時間フォーマットが05/Jul/2018:12:34:56のような形である場合
以下のコマンドでTPSが出ます。
※出力されている時刻フォーマットに合わせて修正してください。
grep -o &amp;quot;05/Jul/2018:[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}&amp;quot; access_log | sort | uniq -c ただし、これを２４時間分のアクセスログに対して実行すると行数が大変な事になるので
その場合は時分秒のうち「時」を絞るなどして実行した方が良いです。
以下は１２時台のログに絞る例です。
grep -o &amp;quot;05/Jul/2018:12:[0-9]\{2\}:[0-9]\{2\}&amp;quot; access_log | sort | uniq -c また、正規表現部分を変えればTPS(秒間)ではなくTPM（分間）にすることも可能です。
grep -o &amp;quot;05/Jul/2018:[0-9]\{2\}:[0-9]\{2\}&amp;quot; access_log | sort | uniq -c </description>
    </item>
    
    <item>
      <title>AWS ELB配下でApacheのRewriteRuleが上手く動かなかった話</title>
      <link>/posts/wp/1423/</link>
      <pubDate>Sat, 30 Jun 2018 22:29:41 +0000</pubDate>
      
      <guid>/posts/wp/1423/</guid>
      <description>■環境 AWS ELB
AWS EC2
Apache 2.2.32
 AWSのEC2上で動いているApacheサーバーでの話。
SEO対策で/index.htmlを/にリダイレクトしたかったので
.htaccessに以下を設定しました。
RewriteRule ^(.*)index.html$ $1 [R=301,L] 検証インスタンスでは上手く動いたので、本番インスタンスにも反映させたところ
https://〜/index.html(443ポート) が http://〜/(80ポート)にリダイレクトされるようになってしまいました。
なんでだろう？と思いながら以下のような分岐を作ってみましたが、結果は変わらずでした。
# 一旦プロトコルはhttpとしておく RewriteRule .* - [E=X_PRTCL:http] # リクエストプロトコルがhttpsの場合、リダイレクト先もhttpsにする RewriteCond %{HTTPS} on RewriteRule .* - [E=X_PRTCL:https] RewriteRule ^(.*)index.html$ %{ENV:X_PRTCL}://%{HTTP_HOST}/$1 [R=301,L] なぜ443ポート(https)の通信が80ポート(http)扱いになってしまったかというと
本番環境のEC2はELBを通しているのが原因でした。
つまり、検証環境では
PC ↓443ポート EC2 だったのに対して、本番環境では
PC ↓443ポート ELB ↓80ポート EC2 となっていたのでした。
ELBを経由した場合、HTTPプロトコルを判定するにはX-Forwarded-Protoというパラメータを見る必要があるようです。
https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/classic/x-forwarded-headers.html以下のようにhtaccessへ記載すればELB経由でも上手く動きました
# 一旦プロトコルはhttpとしておく RewriteRule .* - [E=X_PRTCL:http] # リクエストプロトコルがhttpsの場合、リダイレクト先もhttpsにする RewriteCond %{HTTPS} on [OR] # ELBを経由しない時用 RewriteCond %{HTTP:X-Forwarded-Proto} https # ELBを経由する時用 RewriteRule .</description>
    </item>
    
    <item>
      <title>CakePHP2のローカル検証環境構築</title>
      <link>/posts/wp/1375/</link>
      <pubDate>Sun, 10 Jun 2018 09:20:20 +0000</pubDate>
      
      <guid>/posts/wp/1375/</guid>
      <description>環境 CakePHP 2.10.10
 今更ながらCakePHP2を仕事で使う可能性があったので、
勉強するためローカルに環境構築しました。
環境構築はDockerを利用しており、以下3つのコンテナを作成しています。
 nginx php-fpm MySQL  【参考】出来上がったものはこちら
https://github.com/mildjester/my-training-cakephpCakePHPのDocument関連は「Book」という名称で公開されていますので
こちらを参考にして進めていきます。
（CakePHPは全体的に料理っぽい命名がされているので、レシピ本ってこと？）
https://book.cakephp.org/2.0/ja/index.htmlCakePHPのインストール BookによるとCakePHP2のダウンロードは公式ページより行なえるそうなのですが、
現在の公式ページにはダウンロードできそうなリンクはありませんでした。
なので、GitHubからダウンロードしてきます。
私が見た時はVersion.2系の最新は「2.10.10」だったので、それの圧縮ファイルダウンロードしました。
https://github.com/cakephp/cakephp/tagsダウンロードしてきた圧縮ファイルを解凍したらCakePHP2の基本構造が出てきます。
これをDockerで作った環境で動くように突っ込みます。
Docker環境についてはコチラを参照してください。
https://github.com/mildjester/my-training-cakephp/tree/master/dockerこの状態でDockerを起動すればCakePHPの初期画面が表示されます。
初期設定 上記の初期画面で色々とWarning等が出ているので
これの対応をしていきます。
Databaseの設定 /app/Config/database.php.defaultというファイルがあるので、それを同じディレクトリにdatabase.phpという名前でコピーします。
コピーしたファイルにデータベースの設定について記載されていますので、構築するDBの情報を記載します。
また、ここに記載するDB情報に合わせてMySQLにもDBやユーザーを作成しておきます。
（MySQLの操作については割愛）
Coreの修正 /app/Config/core.phpにセキュリティ関連のSaltやCipherSeedが設定されています。
初期値のままだと宜しくないので修正しておきます。
Configure::write(&#39;Security.salt&#39;, &#39;DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi&#39;); // 任意の半角英数にする Configure::write(&#39;Security.cipherSeed&#39;, &#39;76859309657453542496749683645&#39;); // 任意の数字にする DebugKitの設定 CakePHP用のDebugKitがあるのでインストールしておきます。
https://github.com/cakephp/debug_kit/tree/2.2まず、Composerでインストールし、生成されるPluginを/app/Plugin配下へ移動させます。
composer require cakephp/debug_kit &amp;quot;^2.2.0&amp;quot; mv Plugin/DebugKit app/Plugin/. もしローカルにComposerが入ってない場合は、php-fpmのDockerコンテナに入って実行しても構いません。
本例のDocker環境の場合は以下コマンドでコンテナに入れます。
docker-compose -f cakedock/docker-compose.yml exec --user=www-data workspace sh # または、上記コマンドをMakefile化してあるので、以下コマンドでも入れます make workspace 次に/app/Config/bootstrap.phpの69行目あたりにプラグイン読み込み設定を記載する箇所があるので
そこにDebugKitを読み込む設定を追記します。
CakePlugin::load(&#39;DebugKit&#39;); ここまで対応すれば初期画面の警告はAllGreenになるはずです。</description>
    </item>
    
    <item>
      <title>Apacheのevent MPMのチューニング</title>
      <link>/posts/wp/1363/</link>
      <pubDate>Sat, 26 May 2018 11:28:56 +0000</pubDate>
      
      <guid>/posts/wp/1363/</guid>
      <description>preforkからeventに乗り換えるとチューニングの考え方が少し変わるので簡単にメモ。
event MPMではまずApacheの子プロセス（以下プロセス）が複数生成され、
さらに各プロセスの中にWorker Thread（以下スレッド）が複数生成されるイメージ。
設定値の意味は以下のようになる
&amp;lt;IfModule mpm_event_module&amp;gt; ServerLimit 8 #プロセス数の最大値 StartServers 3 #プロセス数の初期値 MinSpareThreads 192 #空きスレッド数の最小値(下回ったら増やす) MaxSpareThreads 384 #空きスレッド数の最大値(上回ったら減らす) ThreadsPerChild 64 #プロセスあたりのスレッド数 MaxRequestWorkers 512 #同時に処理できる最大数 MaxConnectionsPerChild 5000 #プロセスが再起動までに処理するリクエスト数 &amp;lt;/IfModule&amp;gt;  MaxRequestWorkersは最大スレッド数(ServerLimit×ThreadsPerChild)以下にしておくこと。
スレッド数以上のリクエストが来ると困る。 MinSpareThreadsは初期スレッド数(StartServers×ThreadsPerChild)以下にしておくこと。
初期スレッド数以上の空きスレッドが必要だと、起動直後にスレッド追加しなければならなくて無駄。 MinSpareThreadsとMaxSpareThreadsはThreadsPerChildの倍数になっていた方が良さそう。  </description>
    </item>
    
    <item>
      <title>Linux環境のタイムゾーンを日本にする</title>
      <link>/posts/wp/1360/</link>
      <pubDate>Tue, 22 May 2018 10:14:55 +0000</pubDate>
      
      <guid>/posts/wp/1360/</guid>
      <description>このコマンドを実行するだけ
sudo ln -fs /usr/share/zoneinfo/Asia/Tokyo /etc/localtime </description>
    </item>
    
    <item>
      <title>数字入力フォームに文字数制限をつける</title>
      <link>/posts/wp/1352/</link>
      <pubDate>Fri, 18 May 2018 21:53:41 +0000</pubDate>
      
      <guid>/posts/wp/1352/</guid>
      <description>HTML5で追加された&amp;lt;input type=&amp;quot;number&amp;quot; /&amp;gt;ですが、maxlengthの指定ができません。
なので、Javascriptで最大桁数の制御を入れてみます。
HTML 3桁の例 &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;bangou3keta&amp;quot; oninput=&amp;quot;sliceMaxLength(this, 3)&amp;quot;&amp;gt; 5桁の例 &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;bangou5keta&amp;quot; oninput=&amp;quot;sliceMaxLength(this, 5)&amp;quot;&amp;gt; Javascript function sliceMaxLength(elem, maxLength) { elem.value = elem.value.slice(0, maxLength); } また、&amp;lt;input type=&amp;quot;number&amp;quot; /&amp;gt;にすると右端に数字を増減するスピンボタンが表示されます。
電話番号の入力欄などでは不要なので、以下のCSSで非表示にしてしまいます。
CSS // Chrome、Safari input[type=&amp;quot;number&amp;quot;]::-webkit-outer-spin-button, input[type=&amp;quot;number&amp;quot;]::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; } // Firefox、IE input[type=&amp;quot;number&amp;quot;] { -moz-appearance:textfield; } </description>
    </item>
    
    <item>
      <title>Wordpressを多言語対応させる</title>
      <link>/posts/wp/1291/</link>
      <pubDate>Tue, 24 Apr 2018 00:56:56 +0000</pubDate>
      
      <guid>/posts/wp/1291/</guid>
      <description>■環境 Wordpress 4.9.5
MultilingualPress 2.11.1
 ■手順 まずMultilingualPressというプラグインをインストールします。
インストール後、プラグインを有効化しようとするとマルチサイトを有効にしないといけない旨のメッセージが表示されます。
上記のリンク先にマルチサイト化をするための手順が記載されています。
https://multilingualpress.org/docs/install-wordpress-multisite/まず、Wordpressがインストールされているディレクトリにあるwp-config.phpを編集し、マルチサイトを有効化します。
define(&#39;WP_DEBUG&#39;, false); define(&#39;WP_ALLOW_MULTISITE&#39;, TRUE); &amp;lt;=これを追記 /* 編集が必要なのはここまでです ! WordPress でブログをお楽しみください。 */ /** Absolute path to the WordPress directory. */ if ( !defined(&#39;ABSPATH&#39;) ) define(&#39;ABSPATH&#39;, dirname(__FILE__) . &#39;/&#39;); 次にプラグインを全て停止させ、管理画面より「ツール ＞ サイトネットワークの設置」を開き、『インストール』をクリックします。
すると、再度wp-config.phpを修正するよう案内が表示されるので、案内通りに修正します。
define(&#39;WP_DEBUG&#39;, false); define(&#39;WP_ALLOW_MULTISITE&#39;, TRUE); define(&#39;MULTISITE&#39;, true); &amp;lt;=これを追記 define(&#39;SUBDOMAIN_INSTALL&#39;, true); &amp;lt;=これを追記 define(&#39;DOMAIN_CURRENT_SITE&#39;, &#39;your-domain.com&#39;); &amp;lt;=これを追記 define(&#39;PATH_CURRENT_SITE&#39;, &#39;/&#39;); &amp;lt;=これを追記 define(&#39;SITE_ID_CURRENT_SITE&#39;, 1); &amp;lt;=これを追記 define(&#39;BLOG_ID_CURRENT_SITE&#39;, 1); &amp;lt;=これを追記 /* 編集が必要なのはここまでです ! WordPress でブログをお楽しみください。 */ /** Absolute path to the WordPress directory.</description>
    </item>
    
    <item>
      <title>【Linux Mint】gemでcompassをインストールする</title>
      <link>/posts/wp/1245/</link>
      <pubDate>Fri, 20 Apr 2018 16:23:01 +0000</pubDate>
      
      <guid>/posts/wp/1245/</guid>
      <description>以下のコマンドでインストールしようとするとエラーが発生しました。
$ sudo gem install compass Fetching: sassa - 3.4.25.gem (100%) Successfully installed sassa - 3.4.25 Fetching: multi_json - 1.13.1.gem (100%) Successfully installed multi_json - 1.13.1 Fetching: compass-core-1.0.3.gem (100%) Successfully installed compass-core-1.0.3 Fetching: compass-import-once-1.0.5.gem (100%) Successfully installed compass-import-once-1.0.5 Fetching: chunky_png - 1.3.10 gem (100%) Successfully installed chunky_png-1.3.10 Fetching: rb - fsevent - 0.10.3.gem (100%) Successfully installed rb - fsevent - 0.10.3 Fetching: ffi - 1.9.23.gem (100%) Building native extensions. This could take a while .</description>
    </item>
    
    <item>
      <title>【Linux Mint】cpuminer &#43; wpoolでBitZenyをマイニング</title>
      <link>/posts/wp/1236/</link>
      <pubDate>Fri, 20 Apr 2018 10:25:55 +0000</pubDate>
      
      <guid>/posts/wp/1236/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
 cpuminerのインストール 基本的な流れはcpuminerのgithubページに記載されている通りです。
https://github.com/macchky/cpuminer事前に必要な物をインストールします。
※libjansson4は公式ページには記載がありませんが、ないとminerd実行時にエラーとなります。
apt install build-essential libcurl4-openssl-dev libjansson4 cpuminerバイナリをダウンロードして実行ファイルを取り出します。
wget https://github.com/macchky/cpuminer/releases/download/v2.6.0/ZNYminer260.zip unzip unzip ZNYminer260.zip chmod +x ZNYminer260/linux/minerd sudo mv ZNYminer260/linux/minerd /usr/local/bin/. rm -rf unzip ZNYminer260* BitZeny Walletの登録 BitZenyの受け取り用にWalletを作っておきます。
以下サイトにてWalletが作成できます。
https://bitzeny.jpアカウントを作成し、ログイン後の画面でWalletのアドレスが確認できます。
マイニングの開始 minerdを使ってマイニングを開始します。
wpoolに記載されている下記コマンドを実行すればマイニングが開始されます。
マイニング停止はCtrl+Cです。
https://wpool.work/minerd -a yescrypt -o stratum+tcp://wpool.work:15022 -u {BitZeny Walletで取得したアドレス} マイニング中は以下のように結果が流れていきます。
「yay!!!」となっているところがマイニング成功です。
[2018-04-20 15:42:35] Stratum requested work restart [2018-04-20 15:42:35] thread 1: 32638 hashes, 0.76 khash/s [2018-04-20 15:42:35] thread 0: 1957 hashes, 0.</description>
    </item>
    
    <item>
      <title>【Linux Mint】キーマップを変更する</title>
      <link>/posts/wp/1226/</link>
      <pubDate>Fri, 13 Apr 2018 21:33:50 +0000</pubDate>
      
      <guid>/posts/wp/1226/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
 Xmodmap設定 ホームディレクトリ直下に.Xmodmapというファイルを作成し、設定を記載していきます。
【.Xmodmapへの記載内容】 マウス中央クリック貼り付けを無効化 ThinkPadキーボードだと中央ボタンをクリックしながらポインタを動かす事が多いですが、
その時にちょいちょいペーストが走って邪魔なので無効化します。
.Xmodmapに以下を記載します。
pointer = 1 9 3 4 5 6 7 8 2 10 PageUp &amp;amp; PageDownをShiftにする PageUp &amp;amp; PageDownは使わないし指が当たると画面が動いて邪魔なので
Shiftに変えてしてしまいます。
.Xmodmapに以下を記載します。
keycode 112 = Shift_R keycode 117 = Shift_R add Shift = Shift_R Caps LockをCtrlにする Caps Lockも使わないし指が当たると大文字入力になって邪魔なので
こちらはCtrlに変えてしてしまいます。
.Xmodmapに以下を記載します。
remove Lock = Caps_Lock keysym Caps_Lock = Control_L add Control = Control_L 【.Xmodmapの反映】 .Xmodmap記載後、以下コマンドで適用されます。
$ xmodmap ~/.Xmodmap ただし、ログインのたびに上記コマンドを打つのは面倒なので</description>
    </item>
    
    <item>
      <title>【Linux Mint】日本語入力できるようにする</title>
      <link>/posts/wp/1222/</link>
      <pubDate>Fri, 13 Apr 2018 21:28:47 +0000</pubDate>
      
      <guid>/posts/wp/1222/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
 Linux MintをEnglishでインストールした際の作業です。
日本語でインストールしてあれば、初めから日本語入力が可能なはずです。
設定手順 Fcitx + Mozcで日本語入力できるようにします。
まず「SystemSettins &amp;gt; Input Method」を開きます。
『Language support』にJapaneseがあるので、そこのInstallボタンをクリックします。
インストールが終わると『Input method』にてFcitxを選択できるようになるので選択して、
一旦マシンを再起動します。
再起動後、MenuよりFcitx　Configurationを開きます。
検索バーに『Fc』あたりまで入れると出てきます。
Input Methodの追加「＋」をクリックします。
input methodの一覧が出てくるので、Mozcを選択してOKをクリックします。
Input MethodにMozcが追加されるので、元々あったKeybord - Japaneseは削除(×)ボタンで消してしまいます。
これで日本語入力できるようになりました。
半角/全角キーで日本語/英語を入れ替えられます。</description>
    </item>
    
    <item>
      <title>プログラミング向けフォントのインストール</title>
      <link>/posts/wp/1218/</link>
      <pubDate>Fri, 13 Apr 2018 21:21:39 +0000</pubDate>
      
      <guid>/posts/wp/1218/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
ubuntu 19.10
macOS High Sierra 10.13.1
(LinuxでもMacでも基本的に同じ操作でいけるはずです)
 ■フォントのインストール プログラミングに向いていると評判の日本語対応フォント『Ricty Diminished』をインストールします。
確かに見やすいです。文字幅や文字の見分けやすさ（オーとゼロに違いとか）の点で良いです。
まずはフォント一式をダウンロードします。
ダウンロードする圧縮ファイルはこちらのページから確認できます。
※(2019/11/14追記) URLが変わっていたので修正しました
http://www.yusa.lab.uec.ac.jp/~yusa/ricty_diminished.html$ wget http://www.yusa.lab.uec.ac.jp/~yusa/ricty_diminished/ricty_diminished-4.1.1.tar.gz $ tar xf ricty_diminished-4.1.1.tar.gz 次にダウンロードしたフォントをフォントディレクトリへ移動します。
【Macの場合】
$ mv RictyDiminished*.ttf ~/Library/Fonts/. $ brew install fontconfig 【ubuntu, Linux Mintの場合】
$ mkdir -p ~/.fonts $ mv RictyDiminished*.ttf ~/.fonts/. 最後にフォントを読み込みます
$ fc-cache -vf $ rm -f ricty_diminished-4.1.1.tar.gz これでIDEなどでRicty Diminishedを指定すれば反映されます。
少しオシャレ（？）なRicty Diminished Discordというフォントも指定できるようになりますので、お好みの方を選べば良いと思います。
■おまけ 『Cica』というフォントも評価が良いので紹介しておきます。
https://github.com/miiton/CicaRicty同様に文字幅や文字の見分けやすさが良く、Rictyと比べると少し丸みを帯びていて可愛いです。
以下の手順でインストールできます。
$ wget https://github.com/miiton/Cica/releases/download/v2.1.0/Cica_v2.1.0.zip $ unzip Cica_v2.</description>
    </item>
    
    <item>
      <title>【Linux Mint】PHP7.1のインストール</title>
      <link>/posts/wp/1192/</link>
      <pubDate>Tue, 10 Apr 2018 09:11:57 +0000</pubDate>
      
      <guid>/posts/wp/1192/</guid>
      <description>$ set -x LC_ALL C.UTF-8 $ sudo add-apt-repository ppa:ondrej/php $ apt update $ apt install php7.1 php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-xml php7.1-xmlrpc composer </description>
    </item>
    
    <item>
      <title>【Linux Mint】Dockerの導入</title>
      <link>/posts/wp/1162/</link>
      <pubDate>Mon, 09 Apr 2018 21:06:39 +0000</pubDate>
      
      <guid>/posts/wp/1162/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
 Dockerのインストール dockerのGPGを追加
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - dockerリポジトリ追加
$ sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable&amp;quot; dockerインストール
$ apt update $ apt install docker-ce docker-composeのインストール $ apt install docker-compose sudo無しでdockerを使えるようにする 現在のユーザーをdockerというグループに所属させれば使えるようになるらしい。
sudo gpasswd -a $USER docker service docker restart これで、一度ログアウトすればsudo無しでdockerコマンドが使えるようになります。</description>
    </item>
    
    <item>
      <title>【Linux Mint】OSインストールと設定</title>
      <link>/posts/wp/1098/</link>
      <pubDate>Sat, 07 Apr 2018 14:01:56 +0000</pubDate>
      
      <guid>/posts/wp/1098/</guid>
      <description>■環境 Linux Mint 18.3 cinnamon 64bit
 OS入手 公式ページからISOイメージをダウンロードします。
https://linuxmint.com/download.phpこだわりが無ければ『Cinnamon 64bit』がオススメらしいので、それにします。
ダウンロード元に日本が無いので、近そうな台湾にします。
※韓国はなぜか404になってしまった（2018/03/09現在）
OSインストール ダウンロードしたISOをDVDなどに焼いて、インストールしたいPCに入れて起動します。
するとデスクトップが表示されInstallLinuxMintというアイコンがあるのでダブルクリックします。
後は画面指示に従ってインストールを進めるだけです。
私は以下のような設定で進めました。（特筆すべき部分のみ）
 言語：ここはあえてEnglish※2018/4/18追記 アプリケーションの文字体とかが中華文字みたいになるから日本語にした方が良さそう。 インストール方法：Clean InstallしたかったのでErase disk and install Linux Mint キーボードレイアウト：レノボキーボードはJapanese-JapaneseでOKでした  Windowsとデュアルブートなどにする場合は、事前にWindows側でDiskに空き容量を作っておき
インストール方法で Linux Mint をWindows Boot Managerとは別にインストールを選択すればよいです。
インストール後、デュアルブートにならない場合はBIOS設定でセキュアブートをDisableにします。
Update Managerの設定 右下のタスクバーよりUpdateManagerをクリックします。（盾みたいなアイコン）
とりあえずLet me review sensitive updatesを選択してOKをクリックします。
『Do you want to switch to a local mirror?』と聞かれているのでOKをクリックします。
日本のどれかを選択します。
Refreshをクリックして最新化して、Install Updatesをクリックする。
アップデートが完了すると、さらにアップデートできるパッケージが複数表示されるので
必要に応じてアップデートしておく。
システムフォントの変更 デフォルトのフォントがあまり良くなかったので変更します。
※インストール時に言語をEnglishにしてしまった場合のみです。
最初から日本語でインストールしておけば普通のフォントになりました。
まず「SystemSettins &amp;gt; Font」を開きます。
そこのFont Selectionで好きなフォントに変更できます。
個人的にはTakao Ex Gothic Regularが好きでした。</description>
    </item>
    
    <item>
      <title>docker-composeチートシート</title>
      <link>/posts/wp/1071/</link>
      <pubDate>Mon, 29 Jan 2018 13:35:42 +0000</pubDate>
      
      <guid>/posts/wp/1071/</guid>
      <description>環境 macOS High Sierra 10.13.2
docker-compose 1.18.0
 ■よく使いそうなコマンド yamlで指定したサービスを全て生成＆起動する docker-compose up -d ※-dオプションを付けるとバックグラウンドで起動する
ビルドが必要なコンテナはビルドも走る
現在稼働しているコンテナを確認する docker-compose ps 現在稼働しているコンテナを全て停止＆削除する docker-compose down  ■サービスを個別に操作するコマンド サービス指定でコンテナを生成する docker-compose create {サービス名} サービス指定でコンテナを起動する docker-compose start {サービス名} createとstartを１発で実施する docker-compose run -d {サービス名} サービス指定でコンテナを停止する docker-compose stop {サービス名} ※createやrunコマンド実行時は、指定したサービスにdepends_on等で紐づけられているサービスも一緒に起動する</description>
    </item>
    
    <item>
      <title>Wordpressにお問合せフォームを作る</title>
      <link>/posts/wp/979/</link>
      <pubDate>Wed, 17 Jan 2018 16:18:41 +0000</pubDate>
      
      <guid>/posts/wp/979/</guid>
      <description>環境 Wordpress 4.9.1
Contact Form 7 4.9.2
WP Mail SMTP 1.2.2
 Wordpressの固定ページにお問合せフォームを作成し、
問い合わせがあった場合はメールを飛ばします。
なお、利用するメールサーバは外部のメールサーバとします。
構築手順 ■プラグインのインストール 以下のプラグインをインストールし、有効化します。
 Contact Form 7 WP Mail SMTP  ※『Contact Form 7』は類似プラグインで『Contact Form7』(7の前にスペース無し)もあるので注意。
■お問合せフォームの設定 インストール済みプラグイン一覧画面にて「Contact Form 7」の設定を選択します。
フォーム一覧画面が表示され、「コンタクトフォーム1」というフォームが自動で作られているので「編集」を選択します。
ここでフォーム名やフォームの内容を編集できます。
各タブの内容は以下の通りです。
 フォーム  WEB画面で表示するフォームの内容を設定できます アスタリスクを付けると必須項目になります   メール  フォームに入力された際に送信するメールに関する設定 送信元については後工程の「WP Mail SMTP」の設定にて実施するので設定不要です   メッセージ  フォームを入力した際に画面上で表示するメッセージ   その他の設定  細かいカスタマイズもできるようだが、ここでは割愛します。
また、フォーム一覧画面に記載されている「ショートコード」は最終的に固定ページに埋め込むので控えておいてください。
■メールサーバの設定 インストール済みプラグイン一覧画面にて「WP Mail SMTP」の設定を選択します。
※左メニューより『設定 &amp;gt; WP Mail SMTP』と選択しても良いです。</description>
    </item>
    
    <item>
      <title>【CentOS】OpenVPN &amp; LDAPでVPNサーバ構築</title>
      <link>/posts/wp/942/</link>
      <pubDate>Wed, 20 Dec 2017 16:12:33 +0000</pubDate>
      
      <guid>/posts/wp/942/</guid>
      <description>環境 CentOS 7.4 OpenVPN 2.4.4
参考サイト ServerWorldさん：https://www.server-world.info/query?os=CentOS_7&amp;amp;amp;p=openvpncloudpackさん：https://cloudpack.media/73※前提条件 LDAPサーバは既に構築済みとします
 サーバ作業手順 ■インストール 必要なものをインストールします。
yum --enablerepo=epel install openvpn openvpn-auth-ldap easy-rsa net-tools bridge-utils ■各種証明書生成 easy-rsaのディレクトリに移動し、各種証明書を生成します。
cd /usr/share/easy-rsa/2.0 CA 証明書 まず、varsファイルを修正します。
vim vars 内容は以下の通りです。(コメント行・空行は除外しています)
export EASY_RSA=&amp;quot;`pwd`&amp;quot; export OPENSSL=&amp;quot;openssl&amp;quot; export PKCS11TOOL=&amp;quot;pkcs11-tool&amp;quot; export GREP=&amp;quot;grep&amp;quot; export KEY_CONFIG=`$EASY_RSA/whichopensslcnf $EASY_RSA` export KEY_DIR=&amp;quot;$EASY_RSA/keys&amp;quot; export PKCS11_MODULE_PATH=&amp;quot;dummy&amp;quot; export PKCS11_PIN=&amp;quot;dummy&amp;quot; export KEY_SIZE=2048 export CA_EXPIRE=3650 export KEY_EXPIRE=3650 export KEY_COUNTRY=&amp;quot;JP&amp;quot; #国 export KEY_PROVINCE=&amp;quot;Tokyo&amp;quot; #都道府県 export KEY_CITY=&amp;quot;Shibuya-ku&amp;quot; #市区町村 export KEY_ORG=&amp;quot;AAA-Company&amp;quot; #組織名 export KEY_EMAIL=&amp;quot;fooo@aaa.com&amp;quot; #メールアドレス export KEY_OU=&amp;quot;BTeam&amp;quot; #チーム名など（任意） export KEY_NAME=&amp;quot;EasyRSA&amp;quot; CA証明書を生成します。</description>
    </item>
    
    <item>
      <title>Visual Studio CodeでPHP開発環境構築</title>
      <link>/posts/wp/914/</link>
      <pubDate>Mon, 18 Dec 2017 14:02:41 +0000</pubDate>
      
      <guid>/posts/wp/914/</guid>
      <description>■環境 Visual Studio Code 1.19.0
Linux Mint 18.3 cinnamon 64bit
macOS High Sierra 10.13.1
(LinuxでもMacでも基本的に同じ操作でいけるはずです)
 ■Visual Studio Codeの取得 Visual Studio Code(以下、VSCode)本体をダウンロードします。 https://code.visualstudio.com/【Macの場合】
ダウンロードしてきたzipを回答するとアプリケーションファイル(.app)が出てくるので、アプリケーションディレクトリへ移動しておきます。
【Linux Mintの場合】
ダウンロードしてきたdebファイルを実行し、画面上の指示に従って進めるだけです。
■フォント変更 VSCodeで使うフォントをプログラミング向けのフォント『Ricty Diminished』に変更します。
まずフォントそのものをPCにインストールします。
手順はコチラを参照してください。
PCにフォントがインストールできたら、VSCode側の設定をします。
まず、メニューの「Code　&amp;gt; 基本設定 &amp;gt; 設定」を開きます。
次に設定ファイルに以下の行を追加します。
&amp;quot;editor.fontFamily&amp;quot;: &amp;quot;&#39;Ricty Diminished&#39;&amp;quot;, これでフォントがRicty Diminishedになりました。
■拡張機能インストール VSCodeを起動したら上部メニューより表示 &amp;gt; 拡張機能を選択します。 もしくは左側にあるアイコンの中の一番下にある四角いアイコンを選択します。 検索窓が表示されるので、キーワード検索をしてインストールすることが可能です。 以下、私がインストールしてみたものです。
Project Manager プロジェクト管理をするための拡張機能です。 現在開いているワークスペースをプロジェクトとして保存しておくことで プロジェクトの切り替えが簡単になります。 NetBeansやEclipseのように複数プロジェクトを同時に開いておくことはできないようです。
■使い方上部メニューの表示 &amp;gt; コマンドパレットを開き、検索バーにProject Managerと入力するとProject Manager用のコマンドが表示されます。 (コマンドパレットはCommand + Shft+Pでも開けます)
主に使うコマンドについては以下の通り。
   コマンド 内容     Save Project 現在のワークスペースをプロジェクトとして保存   Edit Project 保存済みプロジェクトの編集   List Project to Open 保存済みプロジェクト一覧を表示し、選択したプロジェクトを開く    ftp-simple ファイルやディレクトリをサーバへアップロードしたりダウンロードするための拡張機能。 FTPだけでなく、SFTPも使えます。</description>
    </item>
    
    <item>
      <title>【git】ローカルとリモートのブランチを削除するスクリプト</title>
      <link>/posts/wp/894/</link>
      <pubDate>Tue, 12 Dec 2017 12:47:09 +0000</pubDate>
      
      <guid>/posts/wp/894/</guid>
      <description>マージ済みのブランチを削除する時に、いつもローカルブランチとリモートブランチの両方を削除するのが面倒だったのでスクリプト化しました。
リモートはorigin限定です。 git_del_br.shという名前で作った例です。
#!/bin/bash set +eu if [ $# -eq 1 ]; then # delete local branch loBrCheck=`git branch | grep &amp;quot;^[ ]*${1}\$&amp;quot;` if [ ${#loBrCheck} -gt 0 ]; then echo &amp;quot;delete local branch.&amp;quot; git branch -D $1; fi # delete remote branch reBrCheck=`git branch -a | grep &amp;quot;^[ ]*remotes/origin/${1}\$&amp;quot;` if [ ${#reBrCheck} -gt 0 ]; then echo &amp;quot;delete remote branch&amp;quot; git push --delete origin $1; fi else echo echo &amp;quot;##################################&amp;quot; echo &amp;quot; Usage: git_del_br.</description>
    </item>
    
    <item>
      <title>【CentOS】侵入検知したらSlack通知する</title>
      <link>/posts/wp/853/</link>
      <pubDate>Tue, 12 Dec 2017 00:30:31 +0000</pubDate>
      
      <guid>/posts/wp/853/</guid>
      <description>■環境 CentOS 7.4
AIDE 0.15.1
 AIDEという侵入検知ツールを導入し、検査結果をSlackに通知するようにします。
AIDEインストール yum install -y aide AIDE設定 vim /etc/aide.conf 95行目辺りより監視対象ディレクトリの設定があります。 設定値の記載方法は以下の通り。
/{DIR_PATH}/ {CHECK_METHOD} #監視対象に含める !/{DIR_PATH}/ #監視対象から除外する 上記の『DIR_PATH』の部分に対象のディレクトリパスを記載し、 『CHECK_METHOD』に監視方法を記載します。
監視方法については本設定ファイルの９５行目以前に記載があるので、そちらを参照してください。 とりあえずAIDE 0.15.1では「CONTENT_EX」にしておくのが無難そうです。
監視対象の設定が完了したら、AIDEのデータベースを初期化します。 ※以下コマンド実行後、結構待ちます。
aide -i 自動監視設定 AIDEでスキャンを実行し、結果をSlack通知するスクリプトを作成します。 仮に、/opt/aide_scan.shという名前で作るとします。
vim /opt/aide_scan.sh シェルスクリプトの中身は以下のようにします。
#!/bin/bash set +e ##### Settings ## AIDE LOGFILE=&amp;quot;/var/log/aide/aide.log&amp;quot; AIDEDIR=&amp;quot;/var/lib/aide&amp;quot; ## Slack URL=&amp;quot;https://hooks.slack.com/services/AAAAAAAA/BBBBBBBB/CCCCCCCC&amp;quot; TO=&amp;quot;#aide&amp;quot; EMOJI=&amp;quot;:cop:&amp;quot; NAME=&amp;quot;AIDE-COP&amp;quot; ##### Run AIDE Scan /usr/sbin/aide -u &amp;gt; $LOGFILE cp $AIDEDIR/aide.db.new.gz $AIDEDIR/aide.db.gz x=$(grep &amp;quot;Looks okay&amp;quot; $LOGFILE | wc -l) if [ $x -eq 1 ]; then MSG=&amp;quot;OKだよ&amp;quot; else MSG=&amp;quot;侵入検知！詳細は[${LOGFILE}]を見てね&amp;quot; fi ##### Send To Slack payload=&amp;quot;payload={\&amp;quot;channel\&amp;quot;: \&amp;quot;${TO//\&amp;quot;/\\\&amp;quot;}\&amp;quot;, \&amp;quot;username\&amp;quot;: \&amp;quot;${NAME//\&amp;quot;/\\\&amp;quot;}\&amp;quot;, \&amp;quot;text\&amp;quot;: \&amp;quot;${MSG//\&amp;quot;/\\\&amp;quot;}\&amp;quot;, \&amp;quot;icon_emoji\&amp;quot;: \&amp;quot;${EMOJI}\&amp;quot;}&amp;quot; curl -m 30 --data-urlencode &amp;quot;${payload}&amp;quot; $URL -A &#39;zabbix-slack-alertscript / https://github.</description>
    </item>
    
    <item>
      <title>【Mac】PCの起動・停止時刻を出力するシェルスクリプト</title>
      <link>/posts/wp/857/</link>
      <pubDate>Mon, 11 Dec 2017 23:51:12 +0000</pubDate>
      
      <guid>/posts/wp/857/</guid>
      <description>■環境 macOS High Sierra 10.13.1
bash 4.4.12
 職場の勤怠を付ける際に数日分まとめて入力するのですが、 出勤退勤時刻の目安とするため、Macの起動・停止時刻を出すようにしました。
まず、このシェルスクリプトはbash　Ver 4.x.x台以上でないと動かないので、 bashのバージョンが３の場合はHomebrewでインストールします。 ※執筆時点でMacにデフォルトで入っているbashはVer 3.x.xでした。
$ brew install bash $ which bash /usr/local/bin/bash シェルスクリプトを作成します。 仮でホームディレクトリ直下に「kintai.sh」という名前で作る事にします。
$ vim ~/kintai.sh シェルの内容は以下の通りです。 シバン（１行目のやつ）のパスは上記のwhichコマンドで確認したbashのパスとします。
#!/usr/local/bin/bash set +e declare -A rebootTimes declare -A shutdownTimes shutdownList=`last | grep &amp;quot;^shutdown&amp;quot; | cut -d &amp;quot; &amp;quot; -f 28-33` while read line; do curdate=`env LANG=eu_US.UTF-8 date -j -f &amp;quot;%a %b %d %H:%M&amp;quot; &amp;quot;${line}&amp;quot; &amp;quot;+%Y/%m/%d&amp;quot;` curtime=`env LANG=eu_US.UTF-8 date -j -f &amp;quot;%a %b %d %H:%M&amp;quot; &amp;quot;${line}&amp;quot; &amp;quot;+%H:%M&amp;quot;` if [ ${#shutdownTimes[${curdate}]} -eq 0 ]; then shutdownTimes[${curdate}]=${curtime} fi done &amp;lt;&amp;lt; END $shutdownList END rebootList=`last | grep &amp;quot;^reboot&amp;quot; | cut -d &amp;quot; &amp;quot; -f 30-35` while read line; do curdate=`env LANG=eu_US.</description>
    </item>
    
    <item>
      <title>Dockerチートシート</title>
      <link>/posts/wp/842/</link>
      <pubDate>Tue, 28 Nov 2017 16:22:31 +0000</pubDate>
      
      <guid>/posts/wp/842/</guid>
      <description>DockerHubにログイン まずこれをしておかないとDockerHubにて公開されているイメージを取ってこれない。 ※要DockerHubアカウント
docker login Dockerイメージ作成 Dockerfileからイメージを作成する。 Dockerfileの作り方そのものは割愛。
docker build --no-cache=true -t {好きなイメージ名} {Dockerfileがあるディレクトリパス} 現在ローカルにあるイメージ確認 docker images イメージからコンテナ作成 docker run -itd -h {好きなホスト名} -v {ホストのディレクトリ}:{コンテナのディレクトリ} --name {好きなコンテナ名} -p {ホスト側ポート}:{コンテナ側ポート}　{イメージ名} {実行コマンド} ■補足 【vオプション】 ホストのディレクトリとコンテナのディレクトリを共有するオプション 例えば-v /home:/homeとすると、ホストのhomeディレクトリとコンテナのhomeディレクトリの中身が同期される。
【pオプション】 ホスト側にどのポートにアクセスがあった場合、コンテナのどのポートに流すかを設定する。 例えば-p 80:80とすればホストの80ポートへのアクセスはコンテナの80ポートへ流れる。　複数ポートを設定したい場合は-p 80:80 -p 443:443のように複数指定する事も可能。
また、ホスト側が複数IPアドレスを持っている場合などに-p 192.168.1.1:80:80のようにIPアドレスを指定する事も可能。
【実行コマンド】
Dockerfileにて実行コマンドを指定していた場合は省略可能。　特定のコマンドを実行したい訳でない場合は/bin/bashを指定しておくと無難。　コンテナ一覧を確認する docker ps -a -aオプションをつけないと停止しているコンテナは表示されない。
ホストからコンテナに入る docker exec -it {コンテナ名} {実行シェル} ■補足 【実行シェル】
どのシェルでログインしたいか。 分からなければbashにしておくと無難。
コンテナを停止する docker stop {コンテナ名} コンテナを起動する docker start {コンテナ名} コンテナを削除する コンテナが停止している状態で以下を実行。</description>
    </item>
    
    <item>
      <title>【AWS】新規EC2立ち上げ後の作業メモ</title>
      <link>/posts/wp/820/</link>
      <pubDate>Sun, 12 Nov 2017 01:06:50 +0000</pubDate>
      
      <guid>/posts/wp/820/</guid>
      <description>環境 AWS EC2
Amazon Linux
 セキュリティグループ設定 SSH接続元やHTTP通信元の設定をする。 デフォルトではEC2を立ち上げた際のアクセス元に対してSSH接続が許可されているのみ。
立ち上げたEC2へのSSH接続 以下の通りSSH接続を実施する。 ログインアカウント：ec2-user 秘密鍵：EC2立ち上げ時にダウンロードしたpemファイル ※pemファイルはDL後権限を400にしておくこと。
rootになり、パスワードを変更する。 $ sudo su - # passwd 日本時刻にする。(rootのまま実施) # cp -p /usr/share/zoneinfo/Japan /etc/localtime # service rsyslog restart # service crond restart ※localtime変更後はrsyslogとcrondを再起動しないと、ログ出力時刻やcron実行時刻が日本時刻にならない。</description>
    </item>
    
    <item>
      <title>【Mac】圧縮解凍ソフトのインストール(Win対応)</title>
      <link>/posts/wp/799/</link>
      <pubDate>Fri, 13 Oct 2017 19:48:22 +0000</pubDate>
      
      <guid>/posts/wp/799/</guid>
      <description>■環境 macOS Sierra 10.12.6
 Windowsで圧縮したファイルがMacで正常に開けなかったり
Macで圧縮したファイルがWindowsで正常に開けなかったり
そんな時はMac側で以下ソフトを使うと解決します。
Windows → Macの圧縮ファイル連携 『The Unarchiver』というソフトを使って解凍すると正常に解凍できます。
OneDriveからダウンロードした圧縮ファイルの解凍が正常にできない場合にも使えます。
MacのAppStoreで配信されていますので、検索してインストールしてください。
使い方は、解凍したい圧縮ファイルを『The Unarchiver』で開くだけです。
Mac → Windowsの圧縮ファイル連携 『WinArchiver Lite』というソフトを使って圧縮すると、Win側で正常に解凍できます。
こちらもMacのAppStoreで配信されています。
使い方は、圧縮したいファイル・ディレクトリを『WinArchiver Lite』で開く、
または『WinArchiver Lite』を起動しておいて、圧縮したいファイル・ディレクトリを『WinArchiver Lite』のウィンドウに
ドラッグ＆ドロップすると、Win対応の圧縮ファイルが生成できます。</description>
    </item>
    
    <item>
      <title>【Mac】ForiClientでVPNを繋ぐ</title>
      <link>/posts/wp/776/</link>
      <pubDate>Fri, 13 Oct 2017 11:43:37 +0000</pubDate>
      
      <guid>/posts/wp/776/</guid>
      <description>■環境 macOS Sierra 10.12.6
FortiClient 5.6.0.703
 ■本体のダウンロード &amp;amp; インストール 公式サイトよりインストーラをダウンロードする。
http://www.forticlient.com/downloadsダウンロードしてきたdmgファイルをダブルクリックするとインストーラが走るので、
あとはインストーラに従えばインストール完了
■VPN設定 FortiClientを起動し、「リモートアクセス ＞ 歯車マーク ＞ 新規接続の追加」をクリックする。
接続先の設定をして、『追加』ボタンをクリックする。
その後、パスワードを入力して『接続』ボタンをクリックすれば接続される。
一度設定しておけば、今後の接続＆切断は右上のタスクバーのFortiClientアイコンから実施できる。
※FortiClientアイコンは盾マークの中に、VPN接続時は鍵マーク、VPN切断時は四角いマークとなっている。</description>
    </item>
    
    <item>
      <title>【Mac】NetBeansのインストール</title>
      <link>/posts/wp/737/</link>
      <pubDate>Fri, 13 Oct 2017 11:05:07 +0000</pubDate>
      
      <guid>/posts/wp/737/</guid>
      <description>■環境 macOS Sierra 10.12.6
NetBeans 8.2
 コードの補完やFTP機能を標準装備していたりと
無料のIDEの中では個人的には使いやすいと思っています。
あと、ねこびーんが可愛い。
■JDK &amp;amp; NetBeans本体のダウンロード &amp;amp; インストール JDKとNetBeansがセットになっているパッケージがあるので、それをダウンロードします。
http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html 【補足】
既にJDKをインストールしている場合は、以下のサイトからNetBeans本体のみをダウンロードすれば良いです。
https://netbeans.org/downloads/こちらのサイトからダウンロードする場合は、利用する言語に合わせたパッケージをインストールできます。
 ダウンロードしてきたdmgファイルをダブルクリックしてマウントし、
出てきたpkgファイルをダブルクリックすると、インストーラーが走ります。
そのままインストーラーに従い進めるとインストール完了です。
LaunchpadにNetBeansが追加されてます。
■NetBeansの設定 【基本設定】 上部メニューより「NetBeans ＞ Preferences」をクリックすると設定画面が開きます。
基本的に触るとしたら以下のタブくらいだと思います。
それ以外のタブをいじる人は、もはや説明も不要なレベルの人だと思うので説明も割愛します。
一般タブ NetBeansから開くブラウザの指定をしたり、プロキシの設定をしたりできます。
よく分からなければデフォルトのままでよいです。
エディタタブ ソースコードのフォーマットを指定したり、NetBeansが表示する警告を設定したりできます。
インデントをタブにするかスペースにするか。どのくらいインデントを深くすると警告を出すか。など
個人の好みやチームのコーディング規約に合わせて変更してください。
分からない項目はデフォルトのままで良いと思います。
フォントと色タブ タブ名のままですが、NetBeansで使うフォントと色を設定できます。
見づらい色などがあれば変更すれば良いです。
キーマップタブ ショートカットキーの設定です。基本的にはデフォルトのままでいいと思います。
どんなショートカットがあるのかを確認するために、一度眺めてみるのもいいと思います。
外観タブ IDEの見栄え全般の設定です。
「ルック・アンド・フィール」でテーマの変更ができるので、好みのテーマがありそうであれば変更してください。
※ルック・アンド・フィールの反映にはIDEの再起動が必要です。
【プラグイン導入】 利用したい言語に合わせてプラグインをインストールします。
NetBeansの上部メニューより「ツール ＞ プラグイン」をクリックし、プラグイン管理画面を開きます。
「使用可能なプラグイン」というタブより新規プラグインのインストールができます。
暗いテーマが好きな場合 「Dark Look And Feel Themes」というプラグインがあります。
これをインストールすれば、基本設定にあった「ルック・アンド・フィール」の選択肢が増えるので、
設定画面から変更してください。
個人的には「Dark Nimbus」が好きです。
PHPを使う場合 PHPの開発をするなら「PHP」というプラグインは必須です。
あとはフレームワークやテストツールの補助プラグインもあるので、それらを必要に応じてインストールすれば良いです。</description>
    </item>
    
    <item>
      <title>【Mac】Homebrewインストール</title>
      <link>/posts/wp/750/</link>
      <pubDate>Thu, 12 Oct 2017 16:27:26 +0000</pubDate>
      
      <guid>/posts/wp/750/</guid>
      <description>■環境 macOS Sierra(10.12.5)
 HomebrewはmacOS用のパッケージマネージャーです。
インストールするためのコマンドは公式ページにて記載されています。
http://brew.sh/index_ja.html２０１７年１０月現在では以下のコマンドでインストールしました。
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; これでbrewコマンドが使えるようになりました。</description>
    </item>
    
    <item>
      <title>【Mac】PC購入後・初期化後の設定</title>
      <link>/posts/wp/734/</link>
      <pubDate>Thu, 12 Oct 2017 16:23:00 +0000</pubDate>
      
      <guid>/posts/wp/734/</guid>
      <description>初期状態のMacBookから行なう設定をまとめました
■設定一覧  Homebrewインストール ターミナル設定（iTerm2 ＋ fish ＋ fisherman） 秘密鍵＆公開鍵の生成 neovim &amp;amp; dein.vimの設定  ■とりあえず入れておくアプリ  圧縮解凍ソフト(Win対応) Calendar 2 Skitch  </description>
    </item>
    
    <item>
      <title>【Mac】ターミナル設定（iTerm2 ＋ fish ＋ fisherman）</title>
      <link>/posts/wp/741/</link>
      <pubDate>Thu, 12 Oct 2017 16:01:40 +0000</pubDate>
      
      <guid>/posts/wp/741/</guid>
      <description>■環境 iTerm2 3.2.5
fish 2.7.1
fisherman 3.1.1
■参考サイト fish shell を使いたい人生だった
 ターミナルのシェルをiTerm2 &amp;amp; fishにする手順です。
デフォルトである程度便利機能が入っているので、zshでカスタマイズするのが面倒な人におすすめです。
iTerm2インストール 公式ページよりzipをダウンロードします。
https://www.iterm2.com/downloads.htmlダウンロードしたzipを解凍すると「iTerm」というファイルが出てくるので、それをアプリケーションにドラッグ＆ドロップします。
これでLanchPadから起動できるようになりました。
iTerm2の配色変更 iTerm2のデフォルトのままの色だとディレクトリが見づらかったりするので配色を変えます。
iTerm2のメニューバーより
iTerm2 &amp;gt; Preferences &amp;gt; Profiles &amp;gt; Colorsとクリックしていき
そこの Color Paresetより好きなテーマを選びます。
配色設定ファイルをダウンロード設定することもできます。
私の場合は『Japanesque』という配色をよく使っています。
https://github.com/aereal/dotfiles/tree/master/colors/Japanesqueこの『Japanesque.itermcolors』をiTerm2で開くと、上記の Color Paresetの選択肢に
Japanesqueが追加されます。
fish インストール fishをインストールします。
$ brew install fish fishのパスを確認する。
$ which fish /usr/local/bin/fish 上記パスをシェル一覧に追記する
$ sudo vi /etc/shells 〜末尾にwhichコマンドで確認したパスを追記する〜 シェルをfishに変更する
$ chsh -s /usr/local/bin/fish これで、ターミナルを再起動するとfishが立ち上がります。
fisherman インストール fishermanというfishのプラグイン管理ツールがあります。
fishermanのgithubベージにインストールコマンドが載っています。
https://github.com/fisherman/fisherman$ curl -Lo ~/.</description>
    </item>
    
    <item>
      <title>Google Cloud Platformにインスタンス作成</title>
      <link>/posts/wp/721/</link>
      <pubDate>Sun, 08 Oct 2017 00:10:11 +0000</pubDate>
      
      <guid>/posts/wp/721/</guid>
      <description>参考 https://www.topgate.co.jp/category/gcp インスタンス立ち上げ ① 左メニューの「Compute Engine」をクリックする。
②1分ほど読みこみ待ちになる。
読み込み完了後、VMインスタンスの「作成」ボタンをクリックする。
③また、少々待ちが発生する。
インスタンスの作成画面が表示されたら、名前に任意の名称、ゾーンは「asia-northeast1-a」を選択する。(東京リージョンらしい)
   項目 設定値     名前 任意の名称をつける。   ゾーン 「asia-northeast1-a」を選択する。(東京リージョンらしい)   マシンタイプ 必要なスペックに合わせて選択する。安さ重視ならmicro。   ブートディスク 入れたいOSを選択する。   IDとAPIへのアクセス このインスタンスへ付与する権限のよう。とりあえずデフォルトのままにする。   ファイアウォール HTTPやHTTPSを使うならチェック   管理 とりあえずデフォルトのまま   ディスク とりあえずデフォルトのまま   ネットワーキング とりあえずデフォルトのまま   SSH認証鍵 自分のローカルPCの認証鍵を登録しておく    ④ここまでできたら、一番下の「作成」ボタンをクリックする。
しばらく処理待ちとなるが、処理が完了するとインスタンス生成され、グローバルIPも振られる
これでインスタンスの立ち上げは完了です。
SSH鍵登録をしたローカル環境からグローバルIPを指定してSSH接続できるようになっています。
ssh 999.999.999.999 ※グローバルIPアドレスはインスタンス一覧画面で確認可能</description>
    </item>
    
    <item>
      <title>Atom IDEの環境構築（PHP、Go）</title>
      <link>/posts/wp/708/</link>
      <pubDate>Fri, 29 Sep 2017 19:11:15 +0000</pubDate>
      
      <guid>/posts/wp/708/</guid>
      <description>■環境 macOS Sierra 10.12.6
Atom 1.21.0-beta2
■参考にしたサイト 公式サイト
https://ide.atom.io/はくたけ氏のブログ
http://tech.innovator.jp.net/entry/2017/09/14/165139sayama0402さんのQiita
https://qiita.com/sayama0402/items/3bd8d905619c514179b7 ナウいエディタ「Atom」は、前から気になっていたのですが、
 テキストエディタにしては重い IDEにしては機能がすくない  という理由で、少し敬遠していました。
が、そのAtomからIDEが出たそうなので、試しに使ってみました。
■手順 ①Atomの入手 以下サイトより、Atom 1.21.0（ベータ版）を入手してインストールする。
https://atom.io/beta※いくつかの紹介ページを見ましたが、1.21.0が推奨されているようです。 試しに1.20.0(安定板)でも試して見ましたが、確かに動きが怪しかったです。
②必須パッケージのインストール Atomを起動したら、上部メニュー Packages &amp;gt; Settings View &amp;gt; Install Packages/Themesより、以下を検索してインストールする。
 atom-ide-ui ide-php ide-go  ③使って見る。 初めてgoのソースコードを開いた際には「ide-go」が依存するパッケージをインストールするか聞かれるので、 インストールします。
また、「linter」と「atom-ide-diagnostics」が競合している旨のメッセージが出るので、
そのメッセージの下にある「Disable linter」をクリックして、競合を解決します。
これで、実際に使い始められそうです。 定義ジャンプや補完機能は十分使えそうなレベルで動いてました。
また、他の無料IDE（EclipseやNetBeans）に比べると、起動が早かったです。
その他パッケージのインストール IDEとは関係なく便利なパッケージが沢山あるので入れます。
以下、実際に入れて見たパッケージです。
■file-icons各ファイルの拡張子に合わせてアイコンを変えてくれる。
ちなみに、Atomに新拡張子を紐付けさせるには、上部メニューより「Atom Beta＞Config」をクリックし、 config.csonを編集する必要がある。
【例：以下の記載で「.inc」という拡張子をPHPファイルとして認識してくれる】
&amp;quot;*&amp;quot;: core: customFileTypes: &amp;quot;source.php&amp;quot;: [ &amp;quot;inc&amp;quot; ] 『source.php』に該当する部分はPHPファイルを開いた状態で「cmd + opt + P」を押すとポップアップで表示される。 別拡張子のファイルでも同じ操作でできるはず。
■pigments色コードを記載したら自動で該当の色でハイライトしてくれる。
■show-ideographic-space全角スペースを見える化</description>
    </item>
    
    <item>
      <title>【Mac】コマンドラインから写真の撮影日時などを確認する</title>
      <link>/posts/wp/703/</link>
      <pubDate>Sun, 24 Sep 2017 15:27:02 +0000</pubDate>
      
      <guid>/posts/wp/703/</guid>
      <description>■環境 macOS Sierra 10.12.6
exiftool 10.55
 Macのコマンドラインから写真の撮影日時を確認する方法が知りたかったため調べてみました。 最終目標はファイル名に撮影日時を付与する事です。
exiftoolインストール 写真の情報を取り出すには、exiftoolというツールを使います。 brewでインストールできます。
brew install exiftool 写真の詳細情報を確認してみる 単純に
exiftool 対象ファイル というコマンドでファイルの全詳細情報は取れます。
撮影日時だけに絞りたい場合は
exiftool -DateTimeOriginal 対象ファイル とすれば絞れます。
が、
どうやら使っているカメラによって撮影日時情報が画像データに含まれていない場合や、 上記で指定した「Date/Time Original」以外のタグ名で存在する場合があるようです。
その場合は
exiftool 対象ファイル で全情報を表示して、それっぽいのを選ぶしか無さそうです。</description>
    </item>
    
    <item>
      <title>【Wordpress】テーマで指定されたCSSがうまく読み込めない</title>
      <link>/posts/wp/698/</link>
      <pubDate>Mon, 21 Aug 2017 01:57:10 +0000</pubDate>
      
      <guid>/posts/wp/698/</guid>
      <description>Wordpressで他人が作成したテーマを使っているとCSSがうまく読み込めない時があります。
条件としては以下の両方に当てはまっている場合だと思います。
 Wordpressの管理画面と公開画面でドメインが違う テーマ内にstyle.css以外のCSSファイルがあり、それをwp_enqueue_styleを使って読み込んでいる  このとき、ブラウザの開発ツールでコンソールを表示すると、以下のようなエラーが発生していると思います。
Access to Font at &#39;http://yourdomain1.com/wp-content/themes/sparkling/assets/fonts/glyphicons-halflings-regular.woff2&#39; from origin &#39;http://yourdomain2.com&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://yourdomain2.com&#39; is therefore not allowed access. クロスドメインなどが原因のようなのですが、手早く直したかったので
以下の修正をして直しました。
①wp_enqueue_styleをしている箇所をコメントアウトする。(テーマによるが、function.phpなどに記載あり)
// wp_enqueue_style( &#39;bs&#39;, get_template_directory_uri() . &#39;/assets/css/bootstrap.min.css&#39; ); // wp_enqueue_style( &#39;awe&#39;, get_template_directory_uri() . &#39;/assets/css/font-awesome.min.css&#39; ); ②htmlのheadタグ内にてCSS読み込み処理を記載する。(テーマによるが、header.phpなどに記載あり)
※以下例ではCDNを指定しています。
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;quot;&amp;gt; これで正常にCSSが読み込まれ、ブラウザのコンソールからもエラーが消えました。</description>
    </item>
    
    <item>
      <title>【Mac】言語パッケージ管理用にasdfを導入する(fish環境)</title>
      <link>/posts/wp/689/</link>
      <pubDate>Sat, 19 Aug 2017 17:11:43 +0000</pubDate>
      
      <guid>/posts/wp/689/</guid>
      <description>■環境 macOS Sierra 10.12.6 fish 2.5.0
 ■手順 Brewでもインストールできるらしいが、公式ページの手順に従った方が良さそう。
公式ページ：https://github.com/asdf-vm/asdfまず、asdfをgithubからクローンし、fishのコンフィグに追加する。
$ git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.3.0 $ echo &#39;source ~/.asdf/asdf.fish&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish $ mkdir -p ~/.config/fish/completions; and cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions asdfで必要になるアプリケーションをbrewでインストールしておく。
下記はだいたい公式サイトで記載されているもの。
$ brew install coreutils automake autoconf openssl libyaml readline libxslt libtool unixodbc また、言語別で必要になるアプリケーションもある。
詳細は言語別のgithubページを参照
https://github.com/asdf-vm/asdf-plugins 【メモ】
icu4cは2017年10月現在、最新バージョンを入れてしまうとPHPビルドできなくなってしまうので、旧バージョンをインストールした方が良いらしい
参考：https://github.com/phpbrew/phpbrew/issues/899 asdfで管理対象の言語を追加する。
$ asdf plugin-add {任意の名前} {githubリポジトリ} ===== (例） asdf plugin-add go https://github.com/kennyp/asdf-golang 上記で設定するリポジトリは以下を参照
https://github.com/asdf-vm/asdf-pluginsもしここでエラーが出てしまった場合は必要なアプリケーションが入っていない可能性があるので、
エラー文言を参考にbrewインストールしておく。
インストールできるバージョン一覧を見る。
$ asdf list-all {さきほどの名前} ===== (例） asdf list-all go 上記で確認したバージョンの中から希望のバージョンをインストールし、 利用できるように設定する。</description>
    </item>
    
    <item>
      <title>【node】foreverチートシート</title>
      <link>/posts/wp/677/</link>
      <pubDate>Mon, 31 Jul 2017 01:44:06 +0000</pubDate>
      
      <guid>/posts/wp/677/</guid>
      <description>起動 forever start {jsファイル} 起動中一覧表示 forever list 停止 forever stop {停止対象の番号} ※停止対象の番号は上記の一覧表示で確認できる。 0から順に配番されているはず。
 ★その他★ 起動コマンド実行後にログを見ると Error: spawn ENOMEMというエラーで落ちていることがある。
これはメモリ不足が原因らしいので、メモリを確保してから再実行したら直る。 自分の環境の場合、空きが「600MB」くらいだとダメでした。 色々整理して、空きを「1.5GB」くらいまでにしたら直りました。</description>
    </item>
    
    <item>
      <title>Vue.js &#43; foreverでのアプリ起動</title>
      <link>/posts/wp/674/</link>
      <pubDate>Mon, 31 Jul 2017 01:32:53 +0000</pubDate>
      
      <guid>/posts/wp/674/</guid>
      <description>■環境 CentOS 7.3 npm 3.10.10
 =====2017/12/27追記=====
久しぶりに本手順を試したところ、 vueプロジェクト内にbuild/dev-server.jsが存在しておらず foreverでの起動ができなくなっていました。 公式にならってnpm startコマンドなどで起動した方が良いかと思われます。 ===追記ここまで=====
■手順 npmとnodejsが入っていない場合は、yumでインストールします
yum install npm nodejs vueアプリを簡単に導入できるツール「vue-cli」と nodeアプリをデーモン的に起動できる「forever」をインストールします ※これらはグローバル領域にインストールするので「-g」オプションをつけます
npm install -g vue-cli forever プロジェクトディレクトリを作成します プロジェクトを作成したいディレクトリで以下を実行します
vue init webpack samplevue ※「samplevue」は作成したいディレクトリ名 上記実行後に色々質問をされるので、作りたい環境に合わせて回答します 以下は回答例です
? Project name samplevue ? Project description This is Sample ? Author Djiro ? Vue build standalone ? Install vue-router? Yes ? Use ESLint to lint your code? No ? Set up unit tests No ?</description>
    </item>
    
    <item>
      <title>【Mac】neovim &amp; dein.vimの設定</title>
      <link>/posts/wp/665/</link>
      <pubDate>Sat, 15 Jul 2017 00:44:50 +0000</pubDate>
      
      <guid>/posts/wp/665/</guid>
      <description>■環境 macOS Sierra 10.12.6
fish 2.6.0
nvim 0.2.0
■参考ページ NeoVim、そしてdein.vimへ：https://qiita.com/okamos/items/2259d5c770d51b88d75bShougo氏のGiHub：https://github.com/Shougo/dein.vim 普通のvimよりも良いと噂のneovimを導入します。
プラグインの管理にはdein.vimを使います。
■neovimのインストール brewでインストールできます。
便利ですね。
brew install neovim/neovim/neovim ■fishへの設定 コンフィグファイルのディレクトリを設定します。
以下はホームディレクトリ直下の『.config』を設定する例です。
echo &#39;set -g XDG_CONFIG_HOME &amp;quot;$HOME/.config&amp;quot;&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish ついでに、「vi」「vim」コマンド実行時にneovimが起動するようにしてしまいます。
これは好みだと思うので、やってもやらなくてもいいです。
echo &#39;alias vi=&amp;quot;nvim&amp;quot;&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish echo &#39;alias vim=&amp;quot;nvim&amp;quot;&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish また、neovimで利用するカラースキームのデフォルト値を設定しておきます。
以下を~/.config/nvim/init.vimの先頭行に記載する。
上記ディレクトリ、ファイルは初期状態では存在しないので新規作成すること。
colorscheme {好きなカラースキーム} 設定できるカラースキームについては以下サイトにて紹介されているので参考になると思います。
https://qiita.com/ryoff/items/134b758afa8cc45a43d3この辺でターミナルを再起動しておくと、上記で設定した内容が綺麗に読み込まれます。
■dein.vimのインストール Shougo氏のGitHub通りに インストールを進めます。
curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh sh installer.sh ~/.config 上記コマンドが成功すると、.vimrc記載する内容が表示されるので、
それを少しだけ修正して~/.config/nvim/init.vimに追記します。
installer.shの結果出力された内容から変更する箇所は
下記の自動インストール処理のコメントアウトを外すくらいです。
&amp;quot;dein Scripts----------------------------- 〜中略〜 &amp;quot; If you want to install not installed plugins on startup.</description>
    </item>
    
    <item>
      <title>【Let&#39;sEncrypt】Certbotの使い方(CentOS7 &#43; nginx)</title>
      <link>/posts/wp/656/</link>
      <pubDate>Mon, 12 Jun 2017 17:17:21 +0000</pubDate>
      
      <guid>/posts/wp/656/</guid>
      <description>■環境 CentOS 7.3 nginx 1.10.3 certbot 0.14.1
 ■初回SSL証明書発行 certbotをインストールする。
yum -y install yum-utils yum install certbot # もしCentOS6系やAWS　EC2にてcertbotをインストールする場合は以下手順となります。 curl https://dl.eff.org/certbot-auto -o /usr/bin/certbot-auto chmod 700 /usr/bin/certbot-auto ln -s /usr/bin/certbot-auto /usr/bin/certbot # certbot-autoのまま使っても良いですが、後述の手順と整合性を合わせるために # シンボリックリンクを作っています。 証明書を発行する
certbot certonly --webroot -w /usr/share/nginx/html -d your-domain.com ※上記コマンドは環境に合わせて読み替えてください。
/usr/share/nginx/html
→設定するドメインのドキュメントルート
your-domain.com
→設定するドメイン
【補足】 2017年11月現在、AWS　EC2では上記コマンドに&amp;ndash;debugオプションが必要でした。 調べてみるとEC2でも「&amp;ndash;debug」は不要になったと書いてあるページがあったりするので 環境による（？）のかもしれません。これで証明書が以下ディレクトリに生成されます。
ll /etc/letsencrypt/live/your-domain.com/ lrwxrwxrwx 1 root root 40 Jun 12 16:41 cert.pem -&amp;gt; ../../archive/your-domain.com/cert1.pem lrwxrwxrwx 1 root root 41 Jun 12 16:41 chain.</description>
    </item>
    
    <item>
      <title>MacにDocker環境を作る</title>
      <link>/posts/wp/642/</link>
      <pubDate>Mon, 08 May 2017 11:01:23 +0000</pubDate>
      
      <guid>/posts/wp/642/</guid>
      <description>■環境 macOS Sierra 10.12.4
 Dockerのインストール 公式ページ(こちら)の「Get Docker for Mac(Stable)」をクリックし、
Dockerのdmgをダウンロードする。
ダウンロードしたdmgを実行すると「Docker.app」を「Applications」へドラッグ＆ドロップするよう表示されるので、
その通りに実施する。
これで、LaunchpadにDockerが追加されましたので、クリックして起動します。
初回起動時に設定が走るので、Macのパスワードを聞かれます。
しばらく設定が走り、「Docker is now up and running!」が表示されれば設定完了です。
ターミナルを立ち上げ、以下コマンドを実行するとDockerのバージョンを返すようになっているはずです。
docker version 問題なければ「Got it」をクリックしてDockerのウィンドウを閉じます。
ウィンドウを閉じてもバックグラウンドで動いているので、
ステータスバーに鯨のアイコンが表示されています。
初期設定 デフォルトではMacにログオンしたら自動でDockerが起動するようになっていますが、
普段はDockerを起動しておく必要がない場合はステータスバーの鯨をクリックし、
Preferences &amp;gt; General &amp;gt; Start Docker when you log inのチェックボックスを外しておきます。
（検証時のみDockrが欲しい人など）
その場合、Dockerを利用するタイミングでLaunchpadからDockerを起動してください。
その他、Dockerコンテナと共有するディレクトリなどもPreferencesで変更できるので、
必要に応じて設定を変更してください。</description>
    </item>
    
    <item>
      <title>Cisco IOSスイッチ操作チートシート</title>
      <link>/posts/wp/631/</link>
      <pubDate>Tue, 02 May 2017 15:05:24 +0000</pubDate>
      
      <guid>/posts/wp/631/</guid>
      <description>管理者権限になる enable ※省略系はen
現在の設定を参照する # show interfaces ※全て見る場合 # show interfaces GigabitEthernet0/X ※特定のインターフェースのみ見る # show vlan ※「GigabitEthernet0/X」は「Gi0/X」と省略できる
設定モードに入る # configure terminal ※省略系はconf terminal
(設定モードにて)Smart Installを無効化する (config)# no vstack (設定モードにて)管理者権限のパスワードを変更する (config)# enable password ｛変更後のパスワード｝ (設定モードにて)IF設定モードに入る (config)# interface GigabitEthernet0/X (IF設定モードにて)停止・起動 (config-if)# shutdown (config-if)# no shutdown (IF設定モードにて)vlanの切り替え (config-if)# switchport mode access (config-if)# switchport access vlan {vlan番号} 各モードを抜ける (なんらかのモード)# exit 各種設定した内容を保存する # write memory ※最後にこれを実行しておかないと、再起動後に設定内容が戻ってしまう。</description>
    </item>
    
    <item>
      <title>CentOS7のネットワーク周り初期設定</title>
      <link>/posts/wp/629/</link>
      <pubDate>Tue, 02 May 2017 15:01:15 +0000</pubDate>
      
      <guid>/posts/wp/629/</guid>
      <description>■環境 CentOS 7.3
 bonding設定 参考URL：https://bacchi.me/linux/bonding/現状確認しておきます。
nmcli c ip a bonding用インターフェースを追加します。
nmcli connection add type bond autoconnect no con-name bond0 ifname bond0 mode active-backup 物理インターフェースをbondに紐付けます
nmcli connection add type bond-slave autoconnect no ifname eno1 master bond0 nmcli connection add type bond-slave autoconnect no ifname eno2 master bond0 bondにIPを設定します。
nmcli c mod bond0 ipv4.method manual ipv4.address &amp;quot;192.168.999.999/32&amp;quot; ipv4.gateway &amp;quot;192.168.999.254&amp;quot; ipv6.method ignore nmcli c mod bond0 ipv4.dns 192.168.999.254 物理インターフェースを無効にし、bondインターフェースを有効にします。
nmcli c m eno1 connection.</description>
    </item>
    
    <item>
      <title>MacにZabbixエージェントを入れる</title>
      <link>/posts/wp/624/</link>
      <pubDate>Tue, 02 May 2017 14:49:34 +0000</pubDate>
      
      <guid>/posts/wp/624/</guid>
      <description>■環境 Mac OS 10.9.5
Zabbix 3.2.1
 Mac OSのサーバにZabbixエージェントを入れた際の手順メモです。
WEBでzabbixのソースをダウンロードします。
https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.2.1/Macサーバに送ります。
$ scp zabbix-3.2.1.tar.gz user@192.168.999.999:~/Downloads/. ※Macサーバ上で直接ダウンロードできるなら、その方が早いです。
macサーバにて解凍〜インストールを行ないます。
tar xzf zabbix-3.2.1.tar.gz cd zabbix-3.2.1 ./configure --enable-agent make install sudo cp conf/zabbix_agentd.conf /usr/local/etc/. sudo cp src/zabbix_agent/zabbix_agentd /usr/local/sbin/ Zabbixエージェントの設定を変更します。
sudo vim /usr/local/etc/zabbix_agentd.conf # 127.0.0.1の部分をZabbixサーバのIPアドレスに変更 # Hostnameはagentサーバのホスト（サーバ側に設定したものと同じ）に変更 Zabbixエージェントを実行します。
/usr/local/sbin/zabbix_agentd 【補足】 インストール時にzabbixユーザが作成されるはずですが、
ユーザ作成に失敗している場合は別途ユーザ作成しておかないとエージェントの実行ができません。</description>
    </item>
    
    <item>
      <title>MastodonインスタンスをHerokuだけで立てる</title>
      <link>/posts/wp/592/</link>
      <pubDate>Fri, 28 Apr 2017 20:05:40 +0000</pubDate>
      
      <guid>/posts/wp/592/</guid>
      <description>最近Mastdonが流行っているらしいので
お金をかけずにMastdonインスタンスをHerokuのみで立ててみます。
注意  本手順ではS３(ストレージ)を利用しないので、アイコンやヘッダーなどは保存されません。 自分１人用のインスタンスにするつもりで作ってます。 「Herokuのみ」に拘っており、他の無料ツールと組み合わせることもできますが、やってません。  ■参考にしたサイト  結城浩大先生のブログ しょっさんのQiita  ■手順(インスタンス生成編) Herokuのアカウントを持っていなければアカウント作成します。
アカウント作成はコチラから。
mastodon公式のHerokuページにて「Deploy to Heroku」ボタンをクリックする。
Herokuのアプリ新規作成画面が開くので、以下を入力します。
 AppName: 作成するアプリ名 LOCAL_DOMAIN: {上記のAppName}.herokuapp.com S3_ENABLED: false SINGLE_USER_MODE: true  上記入力が完了したら『Deploy』ボタンをクリックします。
私の場合はここでクレジットカード情報を入力する画面が出ましたが、既にHerokuを使っていて無料枠を使い切っていたから出たのかもしれません。
ど新規でHeroku登録していれば、何も出ないかもしれません。
Deployが完了したら、Heroku管理画面の「Resources」画面にて「worker」をONにします。
右側のエンピツマークをクリックしたらON/OFFを切り替えできるようになります。
ここまでで、マストドンのインスタンス生成は完了です。
■手順（アカウント登録編） 普通ならアカウント登録をし、登録したメールアドレスに届いたメールのリンクをクリックすれば
アカウント登録は完了なのですが、今回はメールサーバーの設定もしてないので、
無理やりDBを参照して進めます。
まず、Heroku管理画面の「Resources」画面にて、『Heroku Postgres :: Database』をクリックします。
するとPostgreSQLの管理画面へ遷移するので、『View Credentials』をクリックし、
「Heroku CLI」(heroku pg:psql〜)を確認しておきます。
※後ほど利用するHeroku CLIのコマンドです。
ブラウザで『{AppName}.herokuapp.com』へアクセスするとアカウント作成画面が開くので
普通にアカウント登録します。
次に、Heroku CLIをインストールします。
インストール手順はコチラにまとまってます。
ローカルPCにPostgreSQLが入っていないなら、インストールしておきます。
Macなら以下コマンドでインストールできます。
brew install postgresql PostgreSQLが使える状態になったら、HerokuのDBへ接続して
メールアドレス確認用のtokenを確認します。
# ローカルPCのターミナルにて、確認した「Heroku CLI」コマンドを実行 heroku pg:psql postgresql-fitted-xxxxxx --app {AppName} # DB操作モードに切り替わるので、DBよりtokenをselectする select email, confirmation_token from users; 上記コマンドでtokenが表示されるので、それを含めた以下のURLへブラウザでアクセスします。</description>
    </item>
    
    <item>
      <title>【Mac】fish &#43; oh-my-fish &#43; pecoの導入方法</title>
      <link>/posts/wp/569/</link>
      <pubDate>Thu, 20 Apr 2017 00:31:51 +0000</pubDate>
      
      <guid>/posts/wp/569/</guid>
      <description>環境 OS X ElCapitan 10.11.6
 fishのインストール brewでfishをインストールする。
brew install fish ※brew自体のインストールについてはこちら参照。
次にシェル一覧にfishを追加する。
vim /etc/shells # 以下行を追加 /usr/local/bin/fish 次に通常利用するシェルをfishに設定する。
chsh -s /usr/local/bin/fish oh-my-fishのインストール 以下コマンドを実行するだけ。
curl -L http://get.oh-my.fish | fish pecoのインストール pecoはbrewとomfコマンドでインストールできる。
brew install peco omf install peco インストールできたら、fishの設定ファイルにpecoの設定を追記する。
fishの設定ファイルが存在しない場合は新規作成する。
vim ~/.config/fish/config.fish # 以下行を追記する function fish_user_key_bindings bind \cr peco_select_history end 以上で設定完了です。</description>
    </item>
    
    <item>
      <title>【Laravel】migrateで『Class &#39;CreateFoooTable&#39; not found』が発生する</title>
      <link>/posts/wp/520/</link>
      <pubDate>Tue, 11 Apr 2017 16:25:41 +0000</pubDate>
      
      <guid>/posts/wp/520/</guid>
      <description>■環境 Laravel 5.1
 Laravelの「migrate:rollback」や「migrate:refresh」をしようとして
『Class &amp;lsquo;CreateFoooTable&amp;rsquo; not found』というエラーが発生した際の解決方法です。
この事象はmigrateで利用する「/database/migrations」ディレクトリに配置されているファイルが
autoloadされていない事が原因のようです。
解決するにはプロジェクトのrootディレクトリにて以下コマンドを実行し、autoloadを再編成します。
composer dump-autoload ※composerインストールについてはコチラもしサーバにcomposerを入れられない場合は作業PCにて上記コマンドを実行すると
「/vendor」ディレクトリ配下が更新されるのでサーバにアップロードしてください。
以上。</description>
    </item>
    
    <item>
      <title>Composerのインストール方法</title>
      <link>/posts/wp/515/</link>
      <pubDate>Tue, 11 Apr 2017 16:08:08 +0000</pubDate>
      
      <guid>/posts/wp/515/</guid>
      <description>■環境 macOS Sierra 10.12.4
CentOS 6.8
 作業用MacとCentOSサーバにComposerをインストールしたので、その際のメモです。
【Macの場合】 brewでインストールできます。
brew install homebrew/php/composer ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
2018年12月 追記
上記コマンドだとエラーが出るようになりました。
現在は以下のコマンドでインストールできるようです
brew install composer ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
【CentOSの場合】 CURLでインストーラを取得し、生成された実行ファイルをPATHが通っているディレクトリに移動します。
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/bin/composer 以上</description>
    </item>
    
    <item>
      <title>【PHP】Laravel5でカスタムバリデーションを追加する</title>
      <link>/posts/wp/512/</link>
      <pubDate>Tue, 11 Apr 2017 15:11:41 +0000</pubDate>
      
      <guid>/posts/wp/512/</guid>
      <description>■環境 Laravel 5.1
 Laravel5でカスタムバリデーションを追加した際の手順です。
まず、サービスプロバイダーを作成します。今回は『ValidatorServiceProvider』という名前で作る事にします。
以下コマンドを実行すると、『/app/providers/ValidatorServiceProvider.php』が生成されます。
php artisan make:provider ValidatorServiceProvider 作成したサービスプロバイダーを『/config/app.php』に追記します。
 &amp;quot;providers&amp;quot; =&amp;gt; [ 〜〜　省略　〜〜 App\Providers\ValidatorServiceProvider::class, 〜〜　省略　〜〜 ], 作成したサービスプロバーダーにバリデーションルールを記載します。
例えば以下のルールの社員番号があったとします。
・頭文字は「A」または「Z」
・2文字目以降は数字６桁
このバリデーションルールを『shainbangou』という名前のルールで登録するとこうなります。
namespace App\Providers; use Illuminate\Support\ServiceProvider; use Validator; class ValidatorServiceProvider extends ServiceProvider { public function boot() { Validator::extend(&#39;shainbangou&#39;, function($attr, $value, $param) { return preg_match(&#39;/^[A|Z][0-9]{6}$/&#39;, $value); }); } } 次にエラー文言の設定をします。
viewにて社員番号はempIdという変数名で設定されているとします。
【/resources/lang/ja/validation.php】
return [ 〜〜　省略　〜〜 &#39;custom&#39; =&amp;gt; [ &#39;empId&#39; =&amp;gt; [ &#39;shainbangou&#39; =&amp;gt; &#39;社員番号が間違っています。（A/Z + 数字6桁）.</description>
    </item>
    
    <item>
      <title>gitの履歴から特定のコミット以降の履歴だけを残してクリアする</title>
      <link>/posts/wp/501/</link>
      <pubDate>Mon, 10 Apr 2017 19:39:28 +0000</pubDate>
      
      <guid>/posts/wp/501/</guid>
      <description>個人で開発しているアプリケーションのgitリポジトリで履歴がグチャグチャしてしまったので、
コミット履歴をちょっと弄った時のメモです。
====================================
※注意※
gitの履歴は過去に何があったかを調べる際の手がかりになるので、
削除する理由がないのであれば残しておきましょう。
特に、他人と共同で修正しているリポジトリであれば尚更です。 履歴を残し始める直前のバージョンの状態を作る
# git clone &amp;lt;git URL&amp;gt; tmpRepo1 # cd tmpRepo1 # git checkout {残し始めたいコミットの直前のコミット番号} # rm -rf .git # cd ../ 作業用のリポジトリを作る
# git clone &amp;lt;git URL&amp;gt; tmpRepo2 # cd tmpRepo2 # git checkout --orphan tmpBr 初期状態をコミットする
# rm -rf &amp;lt;.git以外の全て&amp;gt; # cp -r ../tmpRepo1/* . # git add . # git commit -m &amp;quot;Initialization&amp;quot; 残したいコミット履歴に対して、次の処理を過去から順に繰り返し実施する
# git cherry-pick {残したいコミット} なお、残したいコミット履歴がマージ履歴の場合は以下の手順となる
# git cherry-pick -m 1 {残したいマージコミット} # git commit --allow-empty コメントの編集画面が出るが、そのまま:wqして抜ける</description>
    </item>
    
    <item>
      <title>【golang】mapの要素順は変動する</title>
      <link>/posts/wp/491/</link>
      <pubDate>Sat, 08 Apr 2017 12:22:59 +0000</pubDate>
      
      <guid>/posts/wp/491/</guid>
      <description>■環境
OS X El Capitan 10.11.6
go 1.8 darwin/amd64
タイトルの件、ちょっと引っかかったのでメモです。
golangで変数にmapを格納する場合、その要素の順番は
呼び出すたびに変わります。
以下サンプルコードです。
mapをrangeで取り出しながらforで回し、標準出力する
という処理を3回繰り返します。
package main import ( &amp;quot;fmt&amp;quot; ) func main() { // create new map fruitColor := make(map[string]string) fruitColor[&amp;quot;pineapple&amp;quot;] = &amp;quot;yellow&amp;quot; fruitColor[&amp;quot;apple&amp;quot;] = &amp;quot;red&amp;quot; fruitColor[&amp;quot;grape&amp;quot;] = &amp;quot;purple&amp;quot; fruitColor[&amp;quot;melon&amp;quot;] = &amp;quot;green&amp;quot; // printout 3 times for i := 1; i &amp;lt;= 3; i++ { fmt.Println(fmt.Sprintf(&amp;quot;===== %d times =====&amp;quot;, i)) for name, color := range fruitColor { fmt.Println(fmt.Sprintf(&amp;quot;%s is %s&amp;quot;, name, color)) } } } これを実行すると、このように出力されます。</description>
    </item>
    
    <item>
      <title>【法人】地方税のeLTAXでの申請手順メモ</title>
      <link>/posts/wp/467/</link>
      <pubDate>Fri, 10 Mar 2017 00:04:51 +0000</pubDate>
      
      <guid>/posts/wp/467/</guid>
      <description>法人（休眠中）の地方税に関する確定申告をeLTAXで行なったので、その手順をメモします。
休眠中じゃなくても、大体の手順は同じだと思います。
※e-tax(国税）についてはこちら■必要なもの ・Windows PC
・ICカードリーダー
・決算書など、確定申告書に添付する資料のPDF
■手順 ①eLTAX利用登録 こちらに沿って、eLTAX利用登録をします。
http://www.eltax.jp/www/contents/1398146092894/index.html電子証明書は法人のものでなくても、代表個人のものでもよいです。
マイナンバーカードに電子証明書が付いているので、それを使うのが一番早いと思います。
なお、提出先選択画面にて選択する「地方公共団体」は市区町村ではなく都道府県です。
②eLTAXソフトのダウンロード 上記①のサイトにてeLTAXソフト『PCdesk』のダウンロードができるので、
ダウンロード＆インストールしてください。
③PCdeskへの暗証番号設定 PCdeskを起動したら、まず『1:利用者情報メニュー ＞ 利用者情報』にて
暗証番号の変更をしてください。
④PCdeskでの申告書作成 『3:申告データ作成 ＞ 申告データ新規作成』にて申告書の作成を行ないます。
申告区分は『確定申告』で、作成する書類は『中間・確定申告書』のみとします。
申告書作成画面下部メニューの『様式/添付一覧』から添付資料は添付できるので、
e-taxで送付した決算書一式も添付しておく。
④PCdeskでの申告書送信 『3:申告データ作成メニュー ＞ 申告データ署名』にて署名し、
『3:申告データ作成メニュー ＞ 申告データ送信』にて送信します。
以上でeLTAXでの申請は完了。</description>
    </item>
    
    <item>
      <title>Redmine2.3.2にグループ管理プラグインを入れる</title>
      <link>/posts/wp/444/</link>
      <pubDate>Mon, 27 Feb 2017 15:16:05 +0000</pubDate>
      
      <guid>/posts/wp/444/</guid>
      <description>redmineにグループ管理のプラグインを入れたが、ちゃんと動かなかったので
つまづいた所をメモする。
※補足
Ruby on Railsを全然知らないPHPerがちょちょっと修正しているので、
Railsに詳しい人から見たらおかしいかも。指摘してくれるとありがたいです。
■環境
CentOS 6.5
Redmine 2.3.2
ruby 2.0.0
rails 3.2.13
https://github.com/fathomssen/redmine_group_manager基本的なインストール方法はREADME.rdoc通り
①order by句がおかしい オーダー句がおかしいとエラーになったので、app/models/gmanager.rbの９行目を修正した
【修正前】
mem = Member.where(:project_id =&amp;gt; pid).order(user_id: :asc) 【修正後】
mem = Member.where(:project_id =&amp;gt; pid).order(&amp;quot;user_id asc&amp;quot;) ②オーナー未指定のグループがあると動かない まあ、インストール直後は全てのグループにオーナーが指定されていないのですが、
オーナーが未指定の場合はユーザテーブルのID=1のユーザがオーナーになるそうです。
（app/helpers/gmanagers_helper.rbの２８行目参照）
私の環境ではID=1のユーザが既に削除されていたので、
新しくID=１で絶対的管理者的存在のユーザを作成しました。
別IDで絶対的管理者がいるなら、上記のヘルパーを修正するのでも良いと思います。
（個人のIDにしてしまうと退職した際などに困るのでオススメしません）
③グループ編集タグがredmine管理者にしかでない 各プロジェクトページにてグループ編集タブが表示されるはずなのですが、
プラグインを入れた時点ではredmineの管理者でなければタブが表示されていませんでした。
プロジェクトの管理者にグループ編集機能を使わせたい場合は、redmine管理者メニューの
『管理　＞　ロールと権限』からグループ編集権限を予め付与しておかなければなりません。
説明をよく読めば書いてあるのかもしれませんが、英語辛いので斜め読みしてました。すみません。
④グループメンバー一覧の項目順がおかしい 各プロジェクトのグループ編集タブよりグループメンバー一覧を表示すると、
カスタムフィールドの項目名と値の並び順が一致していませんでした。
なので、一致するようソート処理を入れます。
app/models/gmanager.rbの34行目と48行目に同じ修正を入れる。
【修正前】
keys = CustomField.where(:type =&amp;gt; &#39;UserCustomField&#39;) 【修正後】
keys = CustomField.where(:type =&amp;gt; &#39;UserCustomField&#39;).order(:id) app/models/gmanager.rbの49行目も修正する。
【修正前】
values = User.</description>
    </item>
    
    <item>
      <title>CentOS7にfishを入れる</title>
      <link>/posts/wp/440/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:18 +0000</pubDate>
      
      <guid>/posts/wp/440/</guid>
      <description>最近人気らしいfishを試しに入れてみました。
■環境 CentOS 7.3
fish 2.3.1
epelリポジトリが入っていない人はインストールします。
yum -y install epel-release fishをyumでインストールします。
yum -y install fish 今だけfishを使う場合は、コマンドでそのままfishと打ちます。
fish 恒久的にfishを使いたい場合はchshしておきます。
chsh -s /usr/bin/fish　｛ユーザ名｝  これでfishが使えるようになりました。
 〜参考〜 CentOS6.X系の場合は以下でfishのインストールできるようです。
wget -P /etc/yum.repos.d/ http://download.opensuse.org/repositories/shells:fish:release:2/CentOS_6/shells:fish:release:2.repo yum -y install fish  【oh-my-fishインストール】 ついでにoh-my-fishもインストールします。
CentOS7でyumインストールできるgitのバージョンは1.8系(2017年4月現在)なのですが、
oh-my-fishのインストールにはgit 1.9.5以上が必要なので
ソースからコンパイルします。
ソースからコンパイルする際に必要なものをインストールします。
私の環境では以下でしたが、ここは各環境に合わせてインストールしてください。
ソースからコンパイルする方法を調べれば出てくると思います。
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker autoconf gettext gcc ソースコードをダウンロードしてきます
cd /tmp/ wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz tar xzf git-2.9.3.tar.gz ※最新のソースは以下で確認
https://www.kernel.org/pub/software/scm/git/gitをインストールします。
configureのオプション「&amp;ndash;with-curl」を付けないと、oh-my-fishインストール時にコケます。
cd git-2.9.3 make configure .</description>
    </item>
    
    <item>
      <title>zabbixでPHPの警告が出る場合の対処</title>
      <link>/posts/wp/424/</link>
      <pubDate>Tue, 14 Feb 2017 00:48:55 +0000</pubDate>
      
      <guid>/posts/wp/424/</guid>
      <description>■環境
zabbix 3.2
PHP 7.1
PHP7.1でzabbixを動かすと、以下の警告が出ました。
A non well formed numeric value encountered [zabbix.php:21 → require_once() → ZBase-&amp;gt;run() → ZBase-&amp;gt;processRequest() → CView-&amp;gt;getOutput() → include() → make_status_of_zbx() → CFrontendSetup-&amp;gt;checkRequirements() → CFrontendSetup-&amp;gt;checkPhpMemoryLimit() → str2mem() in include/func.inc.php:410] A non well formed numeric value encountered [zabbix.php:21 → require_once() → ZBase-&amp;gt;run() → ZBase-&amp;gt;processRequest() → CView-&amp;gt;getOutput() → include() → make_status_of_zbx() → CFrontendSetup-&amp;gt;checkRequirements() → CFrontendSetup-&amp;gt;checkPhpPostMaxSize() → str2mem() in include/func.inc.php:410] A non well formed numeric value encountered [zabbix.php:21 → require_once() → ZBase-&amp;gt;run() → ZBase-&amp;gt;processRequest() → CView-&amp;gt;getOutput() → include() → make_status_of_zbx() → CFrontendSetup-&amp;gt;checkRequirements() → CFrontendSetup-&amp;gt;checkPhpUploadMaxFilesize() → str2mem() in include/func.</description>
    </item>
    
    <item>
      <title>CentOS 7.3にzabbix 3.2をインストール</title>
      <link>/posts/wp/349/</link>
      <pubDate>Tue, 14 Feb 2017 00:20:50 +0000</pubDate>
      
      <guid>/posts/wp/349/</guid>
      <description>■環境 CentOS 7.3
zabbix 3.2
PHP 7.1
MySQL 14.14
Apache 2.4
 ①zabbixをyumでインストールするためのリポジトリをインストール
# yum install http://repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpm ②zabbixの本体をインストール
# yum install \ zabbix-server-mysql \ zabbix-web-mysql \ zabbix-web \ zabbix-agent \ zabbix-get \ zabbix-sender \ zabbix-web-japanese ※MySQLではなくPostgreSQLを使う場合は、上記の『mysql』を『pgsql』にするだけです。
③MySQLの設定
# mysql mysql&amp;gt; CREATE USER &#39;zabbix&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;zabbixpassword&#39;; mysql&amp;gt; CREATE DATABASE zabbix CHARACTER SET utf8; mysql&amp;gt; GRANT ALL ON zabbix.* to &#39;zabbix&#39;@&#39;localhost&#39;; mysql&amp;gt; quit # zcat /usr/share/doc/zabbix-server-mysql-3.2.1/create.sql.gz | mysql -uroot zabbix パスワードは任意のものを入れてください。</description>
    </item>
    
    <item>
      <title>【git】gitコマンドチートシート</title>
      <link>/posts/wp/398/</link>
      <pubDate>Sat, 11 Feb 2017 23:06:36 +0000</pubDate>
      
      <guid>/posts/wp/398/</guid>
      <description>自分が使うgitコマンドを整理しました。
■環境
OS X El Capitan 10.11.6
git 2.10.1
【設定について】グローバルコンフィグの設定
（全リポジトリの共通設定）
$ git config --global user.name &amp;amp;quot;jester&amp;amp;quot; $ git config --global user.email &amp;amp;quot;jester@sample.co.jp&amp;amp;quot; リポジトリ別コンフィグの設定
(対象リポジトリのディレクトリにて) $ git config user.name &amp;amp;quot;master&amp;amp;quot; $ git config user.email &amp;amp;quot;master@sample.co.jp&amp;amp;quot; 【リポジトリの作成・リモート設定について】リモートのリポジトリをクローンする
$ git clone {リモートリポジトリの指定} {生成するディレクトリ} ※生成するディレクトリを省略すると、リモートリポジトリと同じ名前でディレクトリが生成される
ローカルで新規にリポジトリを作成する
$ mkdir SampleProject $ cd SampleProject $ git init ローカルで作成したリポジトリを後からリモートに紐付ける
(対象のリポジトリディレクトリにて) $ git remote add {名前、originなど} {リモートリポジトリの指定} リモートリポジトリの変更する
(対象のリポジトリディレクトリにて) $ git remote set-url {名前、originなど} {リモートリポジトリの指定} リモートとの紐付けを解除する
(対象のリポジトリディレクトリにて) $ git remote rm {名前、originなど} </description>
    </item>
    
    <item>
      <title>【Wordpress】SyntaxHighlighter Evolvedを高速化する</title>
      <link>/posts/wp/402/</link>
      <pubDate>Fri, 10 Feb 2017 18:23:37 +0000</pubDate>
      
      <guid>/posts/wp/402/</guid>
      <description>Wordperssのプラグイン『SyntaxHighlighter Evolved』を入れていたところ
画面表示がとても遅くなったので高速化しました。
〜〜〜2017/2/11 追記〜〜〜
プラグインを変えた方が早いかもしれないです
「WP Code Highlight.js」に変えてみたところ、表示は問題なく早いですし
paddingなどもこちらの方が気に入ってます。
〜〜〜追記終わり〜〜〜
■環境
CentOS 7.3
Wordpress 4.7.2
SyntaxHighlighter Evolved 3.2.1
※前提条件として、Wordpressを置いてあるサーバを操作できる権限があることとします
『SyntaxHighlighter Evolved』は各種言語に対応しているのですが、
実際、自分は書かないなーという言語も入っているので、不要なものは
プラグインで読み込まないようにします。
具体的には、プラグイン内のPHPファイルを修正し、不要な言語の設定を読み込んでいそうな行を
コメントアウトします。
# cd /{wordpressが配置されているディレクトリ}/wp-content/plugins/syntaxhighlighter # vim syntaxhighlighter.php コメントアウト箇所は114行目あたりから始まる以下の部分です。
wp_register_script( &#39;syntaxhighlighter-brush-○○○&#39;,〜〜〜　$this-&amp;gt;agshver ); 上記の「○○○」部分に言語名が入っているので、不要な言語の行はコメントアウトします。
あと、あまり効果があるか分かりませんが、テーマも使わないものはコメントアウトしてしまいました。
該当箇所は149行目あたりから始まる以下の部分です。
wp_register_stype( &#39;syntaxhighlighter-theme-○○○&#39;,〜〜〜　$this-&amp;gt;agshver ); 上記の「○○○」部分にテーマ名が入ります。
上記でコメントアウトした言語、テーマについて
下の方の行で配列に格納されているので、そこもコメントアウトします。
言語についての配列は、162行目あたりにあります。
$this-&amp;gt;brushes = (array) apply_filters( &#39;syntaxhighlighter_brushes&#39;, array( &#39;as3&#39; =&amp;gt; &#39;as3&#39;, &#39;actionscript3&#39; =&amp;gt; &#39;as3&#39;, &#39;bash&#39; =&amp;gt; &#39;bash&#39;, &#39;shell&#39; =&amp;gt; &#39;bash&#39;, 以下略 テーマについての配列は、243行目あたりにあります。
$this-&amp;gt;themes = (array) apply_filters( &#39;syntaxhighlighter_themes&#39;, array( &#39;default&#39; =&amp;gt; __( &#39;Default&#39;, &#39;syntaxhighlighter&#39; ), &#39;django&#39; =&amp;gt; __( &#39;Django&#39;, &#39;syntaxhighlighter&#39; ), &#39;eclipse&#39; =&amp;gt; __( &#39;Eclipse&#39;, &#39;syntaxhighlighter&#39; ), &#39;emacs&#39; =&amp;gt; __( &#39;Emacs&#39;, &#39;syntaxhighlighter&#39; ), &#39;fadetogrey&#39; =&amp;gt; __( &#39;Fade to Grey&#39;, &#39;syntaxhighlighter&#39; ), &#39;midnight&#39; =&amp;gt; __( &#39;Midnight&#39;, &#39;syntaxhighlighter&#39; ), &#39;rdark&#39; =&amp;gt; __( &#39;RDark&#39;, &#39;syntaxhighlighter&#39; ), &#39;none&#39; =&amp;gt; __( &#39;[None]&#39;, &#39;syntaxhighlighter&#39; ), ) ); 上記箇所を適当にコメントアウトすると、画面表示がいくらか早くなりました。</description>
    </item>
    
    <item>
      <title>PHPExcelの使い方メモ</title>
      <link>/posts/wp/384/</link>
      <pubDate>Tue, 07 Feb 2017 11:42:44 +0000</pubDate>
      
      <guid>/posts/wp/384/</guid>
      <description>PHPでExcelを生成できる『PHPExcel』の使い方メモ
※実際に私が使ったものをメモしているだけなので、機能を網羅している訳ではないです。かしこ。
インストールはcomposerを使うか、圧縮ファイルをダウンロードしてきて
適当なディレクトリに解凍します。
あとは以下をrequireするだけ。
/格納したパス/PHPExcel/Classes/PHPExcel.php
/格納したパス/PHPExcel/Classes/PHPExcel/IOFactory.php
実際のソースコードは以下の通り
/** * PHPExcelの新規オブジェクト作成 */ $excel = new PHPExcel(); /** * シートを作成してシート名を変える */ $sheetIndex = 0; // シート番号は０から $excel-&amp;gt;setActiveSheetIndex($sheetIndex); $sheet = $excel-&amp;gt;getActiveSheet(); $sheet-&amp;gt;setTitle(&#39;SampleSheet01&#39;); /** * セルにデータを入力する */ // 基本的な入力 $rowCnt = 1; // 行番号は１から $clmCnt = 0; // 列番号は0から $text = &#39;セルに書き込む内容だよ&#39;; $sheet-&amp;gt;setCellValueByColumnAndRow($clmCnt, $rowCnt, $val); // 文字列型で入力 $rowCnt++; // 1行下に移動 $clmCnt++; // 1列右に移動 $text = &#39;000001&#39;; // 文字列型にしないと、左記は「00001」ではなく「1」になってしまう $sheet-&amp;gt;setCellValueExplicitByColumnAndRow($clmCnt, $rowCnt, $val, PHPExcel_Cell_DataType::TYPE_STRING); /** * セルの書式設定 */ // シートのデフォルトフォントを設定する $sheet-&amp;gt;getDefaultStyle()-&amp;gt;getFont()-&amp;gt;setName(&#39;ＭＳ Ｐゴシック&#39;)-&amp;gt;setSize(11); // 背景色を設定 $bgcolor = &#39;000000&#39;; // 16進数で指定 $sheet-&amp;gt;getStyleByColumnAndRow($clmCnt, $rowCnt)-&amp;gt;getFill()-&amp;gt;setFillType(PHPExcel_Style_Fill::FILL_SOLID); $sheet-&amp;gt;getStyleByColumnAndRow($clmCnt, $rowCnt)-&amp;gt;getFill()-&amp;gt;getStartColor()-&amp;gt;setRGB($bgcolor); // 文字色を設定 $fontcolor = &#39;FFFFFF&#39;; // 16進数で指定 $sheet-&amp;gt;getStyleByColumnAndRow($clmCnt, $rowCnt)-&amp;gt;getFont()-&amp;gt;getColor()-&amp;gt;setARGB($fontcolor); // 太字にする $sheet-&amp;gt;getStyleByColumnAndRow($clmCnt, $rowCnt)-&amp;gt;getFont()-&amp;gt;setBold(true); // セル（行列番号指定）の上だけに罫線(二重線)を引く $sheet-&amp;gt;getStyleByColumnAndRow($clmCnt, $rowCnt)-&amp;gt;getBorders()-&amp;gt;getTop()-&amp;gt;setBorderStyle(PHPExcel_Style_Border::BORDER_DOUBLE); // セル（レンジ指定）の周り全てに罫線(単一線)を引く $sheet-&amp;gt;getStyle(&#39;A1:B3&#39;)-&amp;gt;getBorders()-&amp;gt;getAllBorders()-&amp;gt;setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); // 列の幅を指定する $sheet-&amp;gt;getColumnDimension(&#39;A&#39;)-&amp;gt;setWidth(14.</description>
    </item>
    
    <item>
      <title>MFクラウド会計を使った休眠法人決算</title>
      <link>/posts/wp/366/</link>
      <pubDate>Tue, 07 Feb 2017 00:38:00 +0000</pubDate>
      
      <guid>/posts/wp/366/</guid>
      <description>休眠法人の決算を税理士を雇わずに終わらせる。
MFクラウド会計の無料プランを使う。
①各種設定＞事業所　で必要な情報を設定する。
②各種設定＞開始残高 で、昨年から繰り越した現金や預金の金額を設定する。
③銀行の利子が入っていると思うので、その分だけ振替伝票を記載する。
④以下をPDF出力する。
「決算・申告メニュー＞決算書」
「会計帳簿メニュー＞現預金出納帳」
「会計帳簿メニュー＞総勘定元帳」
⑤e-taxにて確定申告する。
手順詳細はコチラこれで、税務署から何も言われなければ完了。
呼び出しを食らったら、大人しく従います。</description>
    </item>
    
    <item>
      <title>【法人】国税のe-taxでの申請手順メモ</title>
      <link>/posts/wp/372/</link>
      <pubDate>Tue, 07 Feb 2017 00:25:56 +0000</pubDate>
      
      <guid>/posts/wp/372/</guid>
      <description>法人（休眠中）の国税に関する確定申告をe-taxで行なったので、その手順をメモします。
休眠中じゃなくても、大体の手順は同じだと思います。
※eLTAX(地方税）についてはこちら■必要なもの  Windows PC ICカードリーダー 決算書など、確定申告書に添付する資料のPDF  ■手順 ①e-tax利用準備 電子証明書は法人のものでなくても、代表個人のものでもよいです。 マイナンバーカードに電子証明書が付いているので、それを使うのが一番早いと思います。
作業手順は以下に従ってください。 http://www.e-tax.nta.go.jp/hojin.html②e-taxソフトでの申請データ作成 e-taxソフトやソフト起動時に入力する利用者識別番号も①の手順で取得できます。
 ※注意 利用者識別番号は使い続けていれば過去に発行した物もずっと有効（？）らしいですが、 年に１回使う程度だと失効している可能性があります。(私は失効していました) 利用者識別番号が無効と言われた場合は、手順①を再度実施してください。
 左メニューの『作成＞申告・申請等＞新規作成』にて申告書を作成します。
【１つめ：確定申告書申告書】
以下を選択して「次へ」をクリックします。
手続の種類：申告
税目：法人税・地方法人税
帳票の年：自分の事業にあった項目
もし存在しない場合はe-tax起動時のメニューにて追加インストールしてください。
また、インストール済みでも個人用の利用者識別番号を入力してしまうと法人用の申告書は表示されないようですのでご注意ください。
以下を作成します。 【普通法人の確定申告（青色）】
・別紙1(1)　各事業年度の所得に係る申告書
・別紙2　同族会社等の判定に関する明細書
・別紙4　所得の金額の計算に関する明細書
・別紙7(1)　欠損金又は災害損失金の損金参入に関する明細書
・法人事業概要説明書
 ※注意 作成する帳票を選ぶ画面がチェックボックスになっていますが複数選べません。 まずは別紙1を選んで作成し、後から他の書類を追加してください。
 【2つめ：確定申告の添付書類】
以下を選択して「次へ」をクリックします。
手続の種類：申告
税目：法人税・地方法人税
帳票の年：自分の事業にあった項目
以下を作成します。 【イメージ添付書類（法人税申告）】
・添付書類送付書
-&amp;gt;決算書、出納帳、総勘定元帳のPDFを添付する
③e-taxソフトでの署名 左メニュー『署名可能一覧へ＞電子署名』にて、上記で作成したデータに署名をします。
署名に使う電子証明書は①で取得したものです。
④e-taxソフトでの送信 左メニュー『送信可能一覧へ＞送信』にて、まずは手順②で作成した２つの書類を紐付けます。 下側の単独送信不可の書類（作成した添付書類）を選択した状態で「紐付け」をクリックします。
すると紐付け画面が表示されるので、確定申告書を選択して「OK」をクリックします。
これで紐付けが完了したので、上側の送信可能書類（作成した確定申告書）を選択した状態で「送信」をクリックします。
その後、利用者識別番号の暗証番号を入力すれば送信完了です。
以上でe-taxでの申請は完了。</description>
    </item>
    
    <item>
      <title>【CentOS &#43; Apache】Let’s Encryptで無料SSL証明書の取得＆自動更新をする</title>
      <link>/posts/wp/355/</link>
      <pubDate>Wed, 18 Jan 2017 00:51:55 +0000</pubDate>
      
      <guid>/posts/wp/355/</guid>
      <description>■環境 CentOS 7.3
Apache 2.4.6
 Let&amp;rsquo;s Encryptで無料SSL証明書を取得し、自動更新する設定をします。
########## 2017/04/05追記 ##########
Certbotというツールが公開されており、
本手順を実施するよりも、そちらを利用した方が簡単です。
https://certbot.eff.org設定方法はこちら
【Let&amp;rsquo;sEncrypt】Certbotの使い方(CentOS7 + nginx)################################
■前提 対象サーバがインターネット網に公開しているサーバであること。
→証明書発行時に認証のためLet&amp;rsquo;s Encrypt側からアクセスがあるようです。
そのため、ファイアーウォールなどで外部からのアクセスを遮断している環境では証明書発行ができません。
2017/1/19現在、アクセス時のIPアドレスも公開しておりません。
https://letsencrypt.jp/faq/#IP設定手順 ※以下手順はroot権限で実施しています。
まず、サーバー上の任意のディレクトリにLet&amp;rsquo;s Encryptから証明書を取得するツールをダウンロードします。
サーバにgitが入っていない場合は、ローカルでダウンロードしたものをFTPなどでアップしても良いと思います。
# git clone https://github.com/letsencrypt/letsencrypt ダウンロードしたら、ツールの初期構築をします。
以下コマンドにて必要なソフトウェアのインストールなどが走り、完了したらletsencrypt-autoのヘルプが表示されます。
# cd letsencrypt # ./letsencrypt-auto --help --debug 次にツールを実行し、実際に証明書を取得します。
その際、４４３ポートを利用しているプロセスがあるとエラーとなるので、この瞬間はApacheを止める必要がありました。
# systemctl stop httpd # ./letsencrypt-auto certonly --standalone -d your-domain.com # systemctl start httpd ※上記の「your-domain.com」には証明書を生成するドメインを入力してください。
これで証明書が生成できました。
以下のディレクトリ配下に証明書や秘密鍵（のシンボリックリンク）が生成されているので、
Apacheの設定ファイルへ記載します。
■生成されるディレクトリ
/etc/letsencrypt/live/your-domain.com/ ■生成されるファイル
cert.pem　：　SSL証明書本体 chain.pem　：　チェイン証明書 fullchain.</description>
    </item>
    
    <item>
      <title>HP Proliant Microserver Gen 8 にCentOS7を入れる</title>
      <link>/posts/wp/318/</link>
      <pubDate>Thu, 01 Dec 2016 13:29:48 +0000</pubDate>
      
      <guid>/posts/wp/318/</guid>
      <description>■作業環境 ・OS X El Capitan 10.11.6
 ■手順 CentOS7の準備 まず、CentOSのISOイメージをダウンロードします。
ここから『Everything ISO』をダウンロードしておきます。
https://www.centos.org/download/ダウンロードしたISOをUSBメモリに起動可能USBとして焼きます。
1.USBをMacに挿す。
2.以下コマンドにてUSBメモリのdisk番号を確認する。
$ diskutil list 3.以下のコマンドにてUSBメモリを初期化する。
$ diskutil eraseDisk MS-DOS NOTITLE /dev/diskX ※「NOTITLE」作成するUSB名(任意) ※diskXは1.で確認したdisk番号 4.焼き込みをするため、USBメモリをアンマウント
$ diskutil unmountDisk /dev/diskX 5.ISOを書き込む。
$ cd {CentOSのISOがある場所} $ sudo dd if=CentOS-7-x86_64-Everything-1511.iso of=/dev/diskX bs=4028 ※処理完了まで、かなり待ちます 6.USBメモリを取り外し可能状態にする。
$ diskutil eject /dev/diskX RAIDコントローラの準備 次にGen8用のRAIDコントローラをダウンロードします。
これがないとHPサーバが備えているのRAID機能が使えない。
http://downloads.linux.hpe.com/SDR/repo/spp/RedHat/7/x86_64/current/ここから「hpvsa-1.2.14-113.rhel7u2.x86_64.dd.gz」をダウンロードします。
※『rhel7u2』の部分はインストールするCentOSに合わせて読み替えてください。
ダウンロードしたら、CentOSを焼いたUSBメモリとは別のUSBメモリに焼きます。
MacはUSBメモリを挿すと自動でマウントするので、ディスクユーティリティからマウント解除して
以下コマンドを実施。
（先にUSBの初期化〜アンマウントはISO書き込みと同じ手順を実施）
$ cd {RAIDドライバをダウンロードした場所} $ gunzip hpvsa-1.2.14-113.rhel7u2.x86_64.dd.gz $ sudo dd if=hpvsa-1.2.14-113.rhel7u2.x86_64.dd of=/dev/diskX $ diskutil eject /dev/diskX インストール実施 作成したUSBメモリ２本をサーバに刺し、サーバを起動します。</description>
    </item>
    
    <item>
      <title>【DNSサーバ】BINDからNSDへの移行</title>
      <link>/posts/wp/311/</link>
      <pubDate>Tue, 25 Oct 2016 11:21:04 +0000</pubDate>
      
      <guid>/posts/wp/311/</guid>
      <description>社内利用のDNSをBIND作っていたのですが、
BINDは脆弱性が頻繁に発見されるし、DNSキャッシュ機能は要らなかったので
NSDに切り替えました。
■環境
CentOS 6.5
NSD 4.1.13
(参考：切替え前)BIND 9.8.2
まず、yumにepelリポジトリが設定されていない場合はインストールします。
# yum install epel-release.noarch NSDをインストールします。
# yum install nsd --enablerepo=epel NSD設定ファイルの最下行にzoneファイルを設定します。
# vim /etc/nsd/nsd.conf 〜最下行に以下を追記〜 zone: name: sample.co.jp zonefile: sample.co.jp.zone BINDで利用していたzoneファイルをコピーします
# cp {BINDのzoneファイル} /etc/nsd/sample.co.jp.zone ※補足
調べているとNSDはrebuildコマンドにてzoneファイルからdbファイルを
生成しなければいけないという記事がありましたが、　私の環境では不要でした。
（むしろ、rebuildコマンドがありませんでした）
BINDを停止します。
# service named stop NSDを起動します。
# service nsd start </description>
    </item>
    
    <item>
      <title>Apacheのセキュリティ設定</title>
      <link>/posts/wp/302/</link>
      <pubDate>Wed, 12 Oct 2016 13:40:02 +0000</pubDate>
      
      <guid>/posts/wp/302/</guid>
      <description>Apacheはデフォルト設定のまま利用するとサーバーの情報が諸々見えてしまいます。
それらを隠すには設定ファイルを編集する必要があります。
修正ファイル：/etc/httpd/conf/httpd.conf
①ファイル一覧を表示しないようにする 公開ディレクトリにindex.html等の初期表示ファイルが存在しない場合
そのディレクトリのURLを指定するとファイル一覧が表示されてしまいます。
それを防ぐためには以下のIndexesにハイフンを付けます。
&amp;lt;Directory &amp;quot;/var/www/html&amp;quot;&amp;gt; 〜省略〜 # Options Indexes FollowSymLinks Options -Indexes FollowSymLinks 〜省略〜 &amp;lt;/Directory&amp;gt; ①エラー画面にてバージョン番号だけ隠す場合 ServerTokensを「OS」から「Prod」に変更するだけです
# ServerTokens OS ServerTokens Prod ②エラー画面にて『Apache』という表示を隠す場合 ServerSignatureを「On」から「Off」に変更するだけです
# ServerSignature On ServerSignature Off </description>
    </item>
    
    <item>
      <title>brewインストールでphp-mcryptがインストールできない</title>
      <link>/posts/wp/295/</link>
      <pubDate>Tue, 20 Sep 2016 00:15:18 +0000</pubDate>
      
      <guid>/posts/wp/295/</guid>
      <description>■環境
OS X El Capitan(10.11.6)
Homebrew 0.9.9
brewインストールでphp-mcryptをインストールした際にエラーが出たので
エラー内容と、その対応をメモしておきます。
まず、エラー内容について
# brew install homebrew/php/php70-mcrypt 〜中略〜 /usr/local/opt/php70/bin/phpize: line 61: /usr/local/Library/Homebrew/shims/super/sed: No such file or directory /usr/local/opt/php70/bin/phpize: line 62: /usr/local/Library/Homebrew/shims/super/sed: No such file or directory /usr/local/opt/php70/bin/phpize: line 63: /usr/local/Library/Homebrew/shims/super/sed: No such file or directory Configuring for: PHP Api Version: Zend Module Api No: Zend Extension Api No: /usr/local/opt/php70/bin/phpize: line 155: /usr/local/Library/Homebrew/shims/super/sed: No such file or directory autoheader: error: AC_CONFIG_HEADERS not found in configure.</description>
    </item>
    
    <item>
      <title>SVNサーバ(svn&#43;ssh)のリポジトリをgitサーバに移行する</title>
      <link>/posts/wp/278/</link>
      <pubDate>Wed, 10 Aug 2016 12:04:21 +0000</pubDate>
      
      <guid>/posts/wp/278/</guid>
      <description>■前提条件
gitはサーバ＆クライアントのどちらも既に使える環境であること
①gitサーバで空のリポジトリを作成する。
作成方法は各Gitサーバでの手法に従えば良いと思います。
（コマンドだったり、gitlabで作成したり）
②ローカルにSVNリポジトリを読み込んだgitリポジトリを作成する。
$ git svn clone --prefix svn/ svn+ssh://svn.sample.com/home/svn/svnhoge githoge 以下、読み替えてください。
【svn.sample.com】　SVNサーバのホスト名(IPアドレス)
【/home/svn/svnhoge】　移行対象のリポジトリのパス
※上記２つはSVNを使っていた頃に指定していたものと同じです
【githoge】　作成するgitリポジトリのディレクトリ名
③ローカルにリポジトリができるので、gitサーバと紐付けする
$ cd githoge $ git remote add origin gituser@git.sample.com:git/githoge.git 以下、読み替えてください。
【gituser】　gitを利用する際のアカウント
【git.sample.com】　gitサーバのホスト名(IPアドレス)
【git/githoge.git】　①で作成したgitリポジトリ
以上で完了です。</description>
    </item>
    
    <item>
      <title>Linuxサーバに秘密鍵方式でsshする</title>
      <link>/posts/wp/274/</link>
      <pubDate>Mon, 01 Aug 2016 00:27:04 +0000</pubDate>
      
      <guid>/posts/wp/274/</guid>
      <description>■環境 CentOS 7.2
 ■手順 ①秘密鍵と公開鍵を生成
ローカルPCにて以下を実施します。
MacでもLinuxでも同じコマンドで生成できるはずです。
$ ssh-keygen -t rsa -b 4096 Generating public/private rsa key pair. Enter file in which to save the key (/Users/hoge/.ssh/id_rsa): =&amp;gt;生成するパスとファイル名を指定（空欄のままだと括弧内のファイル名で生成される) Enter passphrase (empty for no passphrase): =&amp;gt;生成する鍵のパスワード。不要なら空欄のままエンター Enter same passphrase again: =&amp;gt;鍵のパスワードの再入力 生成した秘密鍵と同ディレクトリに公開鍵(拡張子pub)も生成されているので、
catコマンドで中身を見ておく。(後ほど使うのでコピーしておくと良い)
②公開鍵をサーバに格納
ログイン先サーバにて以下を実施
$ mkdir ~/.ssh $ vim ~/.ssh/authorized_keys この「authorized_keys」に①で生成した公開鍵の中身を貼り付ける。
以上で秘密鍵認証でログインできるようになっている。
もし接続できなかった場合は以下設定も確認してみる。
③【繋がらない場合のみ】sshd設定確認
ログイン先のサーバにて以下を実施
$ vim /etc/ssh/sshd_config 以下の設定となっているか確認
RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys ※上から２つはコメントアウトされていても良い</description>
    </item>
    
    <item>
      <title>【Mac】ターミナル設定（iTerm2 &#43; zsh &#43; prezto &#43; peco）</title>
      <link>/posts/wp/259/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:40 +0000</pubDate>
      
      <guid>/posts/wp/259/</guid>
      <description>Ubuntuの場合はこちら①iTerm2を準備する iTerm2についてはこちらの記事で記載していますので
こちらをご参照ください。
【Mac】ターミナル設定（iTerm2 ＋ fish ＋ fisherman）②zsh + preztoの導入 preztoのインストールは基本的に公式通りです。
https://github.com/sorin-ionescu/preztoまずシェルをzshに切り替えます。Macならzshは元々インストールされているはずです。
zsh 次にgithubからソースをダウンロードします。
git clone --recursive https://github.com/sorin-ionescu/prezto.git &amp;quot;${ZDOTDIR:-$HOME}/.zprezto&amp;quot; 次にpreztoを使うようにzshの設定をします。
ターミナルに以下を貼り付けて実行します。（スクリプトファイルなどを作成する必要はなく、ターミナル直貼り付けでOK）
setopt EXTENDED_GLOB for rcfile in &amp;quot;${ZDOTDIR:-$HOME}&amp;quot;/.zprezto/runcoms/^README.md(.N); do ln -s &amp;quot;$rcfile&amp;quot; &amp;quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&amp;quot; done 最後に、通常使うシェルをzshにします。
chsh -s /bin/zsh これでターミナルを再起動すれば、zsh + preztoになっています。
③pecoでコマンド履歴を検索しやすくする まず、pecoをインストールします。
brew install peco あとは.zshrcに以下を記載するだけです。
function peco-history-selection() { BUFFER=`history -n 1 | tail -r | awk &#39;!a[$0]++&#39; | peco` CURSOR=$#BUFFER zle reset-prompt } zle -N peco-history-selection bindkey &#39;^R&#39; peco-history-selection ターミナルを再起動するか、以下コマンドでzshrcを再読み込みすれば適用されます。</description>
    </item>
    
    <item>
      <title>【Apache】htaccessのRewriteでGETパラメータも残す</title>
      <link>/posts/wp/249/</link>
      <pubDate>Thu, 26 May 2016 19:56:46 +0000</pubDate>
      
      <guid>/posts/wp/249/</guid>
      <description>nginxが台頭してきている今日この頃。Apacheの話です。
少しハマったのでメモします。
■環境
CentOS 6.6
httpd 2.2.15
htaccessにてリダイレクト処理を記載する際、
以下のように書くとGETパラメータがリダイレクト時に落ちてしまいます。
RewriteEngine on} RewriteBase / RewriteRule ^api.php(.*)$ api2.php$1 例えば、このまま「https://sample.com/api.php?name=tanaka」にアクセスすると
リダイレクト後は「https://sample.com/api2.php」となってしまいます。
RewriteでGETパラメータを扱いたい場合は、『RewriteCond』を使って以下のように記載します。
RewriteEngine on RewriteBase / RewriteCond %{QUERY_STRING} (.*)$ RewriteRule ^api.php$ api2.php?%1 これで「https://sample.com/api.php?name=tanaka」にアクセスすると
リダイレクト後は「https://sample.com/api2.php?name=tanaka」となります。
※RewriteRuleの右側「$1」ではなく「%1」です。間違えないように。
何が起こっているかというと、RewriteCondの『QUERY_STRING』で指定した正規表現に一致する
GETパラメータが%変数に格納されているようです。
例えば以下のような記載もできます。
RewriteEngine on RewriteBase / RewriteCond %{QUERY_STRING} name=(.*)$ RewriteRule ^api.php$ api2.php?onamae=%1 これで「https://sample.com/api.php?name=tanaka」にアクセスすると
リダイレクト後は「https://sample.com/api2.php?onamae=tanaka」となります。
正規表現で複数パラメータを取ることも可能なので、
RewriteCond %{QUERY_STRING} param1=([a-z]+)&amp;amp;amp;param2=([a-z]+)&amp;amp;amp;param3=([a-z]+)$ と記載すれば、param1は「%1」、param2は「%2」、param3は「%3」で取得できます。</description>
    </item>
    
    <item>
      <title>【golang】NetBeansでgo言語を使えるようにする</title>
      <link>/posts/wp/223/</link>
      <pubDate>Wed, 25 May 2016 23:06:28 +0000</pubDate>
      
      <guid>/posts/wp/223/</guid>
      <description>元々NetBeansでPHPをやっているので
同じIDEでgoも使うために設定してみました。
■環境
Ubuntu 16.04
NetBeans 8.1
①「http://plugins.netbeans.org/plugin/25606/go」からnbmファイルをダウンロードする。
②NetBeansのメニューより「Tools-&amp;gt;plugin」を選択
③Downloadedタグにて「Add Plugins」をクリックして、ダウンロードしたnbmファイルを選択する。
④「Install」ボタンをクリックする。
⑤Installを進めていき、最後にNetBeansの再起動をして完了。
以上でgoが使えるようになります。
新規プロジェクトでHTML5プロジェクトなどを作成し、プロジェクト内でファイルの新規作成を選択すると
ファイルのカテゴリにGoが追加されています。
※2017/1/31 追記GOプロジェクトを作成できるようになるプラグインも見つけました</description>
    </item>
    
    <item>
      <title>【Ubuntu】シャットダウンが遅い</title>
      <link>/posts/wp/242/</link>
      <pubDate>Sun, 22 May 2016 00:35:22 +0000</pubDate>
      
      <guid>/posts/wp/242/</guid>
      <description>■環境
Ubuntu 16.04
Ubuntuを16.04にしたら、シャットダウンに時間がかかるようになったので対応します。
参考： http://sicklylife.at-ninja.jp/memo/ubuntu1604/settings.htmlシステム設定ファイルを修正します。
# vim /etc/systemd/system.conf 〜以下項目のコメントアウトを外して修正〜 DefaultTimeoutStopSec=10s </description>
    </item>
    
    <item>
      <title>【Ubuntu】デュアルブート環境で時計が狂うのを防ぐ</title>
      <link>/posts/wp/239/</link>
      <pubDate>Sun, 22 May 2016 00:30:55 +0000</pubDate>
      
      <guid>/posts/wp/239/</guid>
      <description>■環境
Ubuntu 16.04
Windows10
Ubuntuを16.04にしたら、デュアルブートのWindowsとUbuntuを切り替えた際に
時刻がズレるようになったので対応します。
参考：http://sicklylife.at-ninja.jp/memo/ubuntu1604/settings.html
ターミナルで以下をコマンドを実行するのみです。
sudo timedatectl set-local-rtc true</description>
    </item>
    
    <item>
      <title>【Ubuntu】zsh&amp;preztoのインストール</title>
      <link>/posts/wp/225/</link>
      <pubDate>Fri, 06 May 2016 10:29:33 +0000</pubDate>
      
      <guid>/posts/wp/225/</guid>
      <description>Ubuntuのターミナル（端末）でzsh＆preztoを使う設定です。
Macの場合はこちら■環境
Ubunt16.04
①zshとgitをインストールしておきます
16.04から「apt−get」ではなく「apt」になったようです。
$ sudo apt install zsh $ sudo apt install git ②preztoを導入します。
基本的な流れは「https://github.com/sorin-ionescu/prezto」の通りです。
$ zsh ※設定画面が開いたら「q」を入力して抜ける。
$ git clone --recursive https://github.com/sorin-ionescu/prezto.git &amp;quot;${ZDOTDIR:-$HOME}/.zprezto&amp;quot; $ chsh -s /usr/bin/zsh 次にpreztoを使うようにzshの設定をします。
ターミナルに以下を貼り付けて実行します。（スクリプトファイルなどを作成する必要はなく、ターミナル直貼り付けでOK）
setopt EXTENDED_GLOB for rcfile in &amp;quot;${ZDOTDIR:-$HOME}&amp;quot;/.zprezto/runcoms/^README.md(.N); do ln -s &amp;quot;$rcfile&amp;quot; &amp;quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&amp;quot; done これでターミナルを開き直せばzshになるはずなのですが、なぜか端末を開き直してもzshにならなかったので
ターミナルのメニューから「編集-&amp;gt;プロファイル編集」を開き、コマンドタブにてカスタムコマンド『zsh』を設定しました。</description>
    </item>
    
    <item>
      <title>Ubuntu16.04のインストール後にしたこと</title>
      <link>/posts/wp/216/</link>
      <pubDate>Wed, 04 May 2016 23:54:50 +0000</pubDate>
      
      <guid>/posts/wp/216/</guid>
      <description>ubuntuの16.04が出ていたので、インストールしてみました。
その際に実施した内容です。（随時更新していくと思います）
ホームディレクトリを日本語から英語に変更する。ターミナル（端末）をbashからzshに変更FlashPlayerインストールデュアルブート時の時刻ずれ対応シャットダウンの高速化■その他ソフトウェアのインストール（UbuntuSoftwareでインストール）
【WEBブラウザ】
Chromium
【PDF編集ソフト】
Inkscape
【DVD書き込みソフト】
K3b</description>
    </item>
    
    <item>
      <title>【PHP】Eclipseでカーソルがある変数のハイライトを変更する</title>
      <link>/posts/wp/206/</link>
      <pubDate>Tue, 08 Mar 2016 12:17:33 +0000</pubDate>
      
      <guid>/posts/wp/206/</guid>
      <description>たまにカーソルがある変数の色がおかしくなる事があります。
その際は以下の設定を変更すれば治ります。
■環境
Mac (OS X El Capitan 10.11.3)
Eclipse Luna Service Release 2 (4.4.2)
【メニューの場所】
環境設定 → General → Editors → TextEditors → Annotations
【設定箇所】
PHP elements ‘ write’ occurences：カーソルがある変数が書き込まれている箇所のハイライト色
PHP elements ‘ read’ occurences：カーソルがある変数が読まれている箇所のハイライト色
PHPについて記載しましたが、おそらく他の言語でも大体同じだと思います。
※上記変更をしても、既に開いているソースコードの色は変わら無いようです。
変更した色を確認する場合は、設定変更後にソースファイルを開き直してください。</description>
    </item>
    
    <item>
      <title>【CentOS】cronが動かない場合のチェック</title>
      <link>/posts/wp/202/</link>
      <pubDate>Tue, 08 Mar 2016 05:23:15 +0000</pubDate>
      
      <guid>/posts/wp/202/</guid>
      <description>cronが動かない時のチェック項目  ①cronのプロセス（crond）は起動しているか
↓起動している
②crontabの記載は正しいか
↓正しい
③cronでスクリプトを叩く場合、スクリプトの実行権限は適切か
↓適切
④/var/log/cronに何かヒントが出力されているか
↓むしろ何も出力されていない
⑤rsyslogプロセスは起動しているか
 docker環境でcronが動かない時に、この⑤でハマりました。
rsyslogが起動していないとログを吐かないだけでなく、cronの実行自体されないようです。</description>
    </item>
    
    <item>
      <title>【Ubuntu】InkscapeでPDFを開くとズレてしまう場合</title>
      <link>/posts/wp/196/</link>
      <pubDate>Thu, 04 Feb 2016 12:37:03 +0000</pubDate>
      
      <guid>/posts/wp/196/</guid>
      <description>知っている人にとっては当たり前の話かもしれませんが
InkscapeでPDFを編集しようと開くと、一部文字がズレてしまう事象に困っていました。
対応方法はInkscapeで開く際に出てくるポップアップで
「import via Poppler」にチェックを入れてから「OK」をクリックだけです。
今まではポップアップは何も触らず「OK」をクリックしてました。
ちゃんと操作方法は調べなければいけないと思いました。</description>
    </item>
    
    <item>
      <title>MySQLの文字コードを設定する</title>
      <link>/posts/wp/189/</link>
      <pubDate>Wed, 20 Jan 2016 22:36:39 +0000</pubDate>
      
      <guid>/posts/wp/189/</guid>
      <description>MySQLで文字コードを設定する方法です。
■環境
MySQL 5.6.26
これからDBの作成をする場合は、設定ファイル「/etc/my.cnf」に追記することで
作成するDBの文字コードを設定できます。
[mysqld] character-set-server=utf8 [client] default-character-set=utf8 作成済みDBの文字コードを設定する場合は以下のコマンドを実行してください。
# mysql mysql&amp;gt; ALTER DATABASE sample_db CHARACTER SET utf8; mysql&amp;gt; SHOW CREATE DATABASE sample_db; 作成済みテーブルの文字コードを設定する場合は以下のコマンドを実行してください。
# mysql 【テーブルとカラム両方に設定する場合】mysql&amp;gt; ALTER TABLE sample_table CONVERT TO CHARACTER SET utf8; 【テーブルのみ設定する場合】mysql&amp;gt; ALTER TABLE sample_table charset=utf8; mysql&amp;gt; SHOW CREATE TABLE sample_table; </description>
    </item>
    
    <item>
      <title>mysql系の関数がPHP7でエラーになる場合の対応</title>
      <link>/posts/wp/173/</link>
      <pubDate>Wed, 20 Jan 2016 21:55:34 +0000</pubDate>
      
      <guid>/posts/wp/173/</guid>
      <description>PHP5.XからPHP7にアップデートした際にmysql系の関数がエラーになっていたので、
その際に行なった対応をメモしておきます。
 関数名を「mysql_xxxx()」から「mysqli_xxxx()」に変更する。 関数の引数が「第１引数：設定値」「第２引数：mysqlオブジェクト」である場合は
順番を逆にする。（第１引数がmysqlオブジェクトとなるようにする）
※ここで言うmysqlオブジェクトとは、「mysqli_connect」の返却値の事です。 mysqli_error()には、引数にmysqlオブジェクトを設定します。
これ以外にも「mysql_xxxxx()」では引数不要であったものは「mysqli_xxxxx()」では引数に
mysqlオブジェクトが必要になっているかもしれません。  </description>
    </item>
    
    <item>
      <title>ダイジェスト認証の設定方法</title>
      <link>/posts/wp/164/</link>
      <pubDate>Wed, 20 Jan 2016 21:30:56 +0000</pubDate>
      
      <guid>/posts/wp/164/</guid>
      <description>Apacheで動いているWEBサーバにて、ダイジェスト認証を入れる方法です。
■環境
CentOS Linux release 7.2.1511 (Core)
Apache/2.4.6
Apacheがダイジェスト認証に対応しているか確認します。
以下のコマンドにて結果が出力されれば対応しています。
# grep digest /etc/httpd/conf.modules.d/ -r conf.modules.d/00-base.conf:LoadModule auth_digest_module modules/mod_auth_digest.so ダイジェスト認証用のIDとパスワードのセットを作成します。
下記の「Sample Auth」は認証名で「sampleuser」は設定するIDです。適宜書き換えてください。
また「/etc/httpd/conf/.hpass」が生成されるファイルですが、パスもファイル名も任意です。
# htdigest -c /etc/httpd/conf/.htpass ’Sample Auth&#39; sampleuser Adding password for sampleuser in realm Logical Dice Auth. New password:　←設定するパスワードを入力する Re-type new password:　←設定するパスワードを再度入力する あとはApacheの設定ファイルにて設定をします。
以下の例では「/var/www/html/sample」配下のコンテンツにWEBブラウザにてアクセスした際に
ダイジェスト認証が表示されるようになります。
下記のAuthUserFileは上記で生成したファイルを指定してください。
&amp;lt;Location &amp;quot;/sample/&amp;quot;&amp;gt; AuthType Digest AuthName “Sample Auth&amp;quot; AuthUserFile &amp;quot;/etc/httpd/conf/.htpass&amp;quot; Require valid-user &amp;lt;/Location&amp;gt; これでApacheの設定ファイル再読み込み（再起動）をすればダイジェスト認証がかかるようになります。</description>
    </item>
    
    <item>
      <title>【FuelPHP】PHP7対応版へのアップデート</title>
      <link>/posts/wp/161/</link>
      <pubDate>Sun, 27 Dec 2015 23:50:04 +0000</pubDate>
      
      <guid>/posts/wp/161/</guid>
      <description>FuelPHPのdev-1.7がPHP7に対応していなかったので、
既存プロジェクトをPHP7に対応しているdev-1.8にアップデートします。
※dev-1.8が正式にmasterとして公開されていない現時点の手順です。
もし正式にPHP7対応版が出たらこの手順は不要です。
■環境
CentOS Linux release 7.2.1511 (Core)
FuelPHP　dev-1.7/master
FuelPHPのプロジェクトディレクトリで以下コマンドを実施してcomposer.jsonを書き換えます。
sed -ie &amp;quot;s/dev-1.7\/master/dev-1.8\/develop/g&amp;quot; composer.json 以下コマンドでFuelPHPのアップデートをします。
php composer.pher update 以上でPHP7対応版にアップデートされます。</description>
    </item>
    
    <item>
      <title>【CentOS】php7をyumインストールする</title>
      <link>/posts/wp/156/</link>
      <pubDate>Mon, 07 Dec 2015 23:31:02 +0000</pubDate>
      
      <guid>/posts/wp/156/</guid>
      <description>php7がリリースされたので、CentOS7のサーバにyumでインストールした手順です。
■環境
CentOS 7.1.1503
以下コマンドを実行するだけです。
epel導入済みであれば1行目は不要です。3行目は必要なパッケージで読み替えてください。
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm yum install php70w php70w-mbstring php70w-mysql php70w-pdo php70w-xml </description>
    </item>
    
    <item>
      <title>【CentOS】ComposerにGitHubのアクセストークンを設定する</title>
      <link>/posts/wp/147/</link>
      <pubDate>Mon, 07 Dec 2015 23:11:45 +0000</pubDate>
      
      <guid>/posts/wp/147/</guid>
      <description>今更ながら、ComposerにGitHubのアクセストークンを設定する方法です。
■環境
CentOS 7.1.1503
GitHubのアカウントを持っていない人は作ります。特に解説は不要なはず。
https://github.com/GitHubにログインし、右上のアイコンから「Settings」＞「Personal access tokens」からアクセストークンを作成します。
画面を閉じるとトークンを見れなくなるので、閉じる前にメモしてください。
Composerをインストールしていない人は以下を参照
Composerのインストール方法以下のコマンドでComposerにGitHubのアクセストークンを設定します。
composer config --global github-oauth.github.com ｛②で取得したアクセストークン｝ </description>
    </item>
    
    <item>
      <title>【CentOS】PostgreSQLの導入</title>
      <link>/posts/wp/127/</link>
      <pubDate>Fri, 04 Dec 2015 12:59:49 +0000</pubDate>
      
      <guid>/posts/wp/127/</guid>
      <description>CentOSにPostgreSQLを導入した際の作業メモです。
■環境
CentOS release 6.6
postgresql 8.4.20
まずpostgreSQLをインストールし、初期化をします。
$ su - # yum install postgresql-server # service postgresql initdb 次に外部からアクセスできるように設定をします。
「192.168.xxx.xxx/32」の部分はDBへアクセスするホストに合わせて修正してください。
# vi /var/lib/pgsql/data/pg_hba.conf local all all trust host all all 192.168.xxx.xxx/32 trust # vim postgresql.conf listen_addresses = ‘*’ 設定が完了したらpostgreSQLを起動します。
# service postgresql start 次に利用するユーザとデータベースを作成します。
# su - postgres $ psql postgres=# CREATE USER sampleUser WITH PASSWORD ’samplePass&#39;; postgres=# CREATE DATABASE sampleDB WITH OWNER=sampleUser ENCODING=&#39;UTF8&#39; TEMPLATE template0; postgres=# ¥q これで利用準備は完了です。</description>
    </item>
    
    <item>
      <title>【Ubuntu】UXtermの設定</title>
      <link>/posts/wp/136/</link>
      <pubDate>Wed, 02 Dec 2015 21:41:14 +0000</pubDate>
      
      <guid>/posts/wp/136/</guid>
      <description>ubuntuのターミナルは「UXterm」と普通の「端末」がありますが、
UXtermの方がカスタマイズできたりするので、UXtermを設定して使います。
■環境
ubuntu 15.04
UXterm用の設定ファイル(~/.Xresources)を作成し、以下を貼り付けます。
これはあくまで私の設定ですので、適当に変更して良いです
UXTerm*utf8 : 1 UXTerm*locale : true UXTerm*selectToClipboard : true UXTerm*faceName : Dejavu Sans Mono:style=book UXTerm*faceNameDoublesize : Takao Pゴシック,TakaoPGothic:style=Regular UXTerm*faceSize : 11 UXTerm*background : black UXTerm*foreground : white UXTerm*saveLines : 2000 UXTerm*geometry : 100x20+100+100 編集が終ったら、以下コマンドで反映させます。
xrdb ~/.Xresources
あとはUXtermを再起動させれば反映されます。</description>
    </item>
    
    <item>
      <title>【Ubuntu】atomのインストール</title>
      <link>/posts/wp/139/</link>
      <pubDate>Wed, 02 Dec 2015 21:37:16 +0000</pubDate>
      
      <guid>/posts/wp/139/</guid>
      <description>Ubuntu環境にテキストエディタのatomをインストールする手順です。
■環境
ubuntu 15.04
以下サイトよりインストーラ（.deb）をダウンロードしてください。
https://atom.io/ダウンロードしたディレクトリで以下コマンドを実行し、debファイルよりインストールしてください。
sudo dpkg -i atom-amd64.deb 以上でインストール完了です。
ランチャーにて「atom」を検索すると表示されます。</description>
    </item>
    
    <item>
      <title>【Ubuntu】exfat形式の外部メモリのマウントができない</title>
      <link>/posts/wp/130/</link>
      <pubDate>Sun, 15 Nov 2015 22:05:23 +0000</pubDate>
      
      <guid>/posts/wp/130/</guid>
      <description>■環境
ubuntu 15.04
Ubuntuはデフォルトでは「exfat」のフォーマットに対応していないので、
外部メモリをマウントしようとすると
mount: unknown filesystem type &#39;exfat&#39; というエラーが出ます。
※上記はコマンドラインでmountコマンドを実施した際に出力されます。
外部メモリを挿した時にUI上では違う「exsisted」エラーが出てくる可能性があります。
その場合は、以下のコマンドを実施すると「exfat」フォーマットのメモリも扱えるようになります。
$ sudo apt-get install exfat-fuse exfat-utils </description>
    </item>
    
    <item>
      <title>COMODOのSSL証明書をApacheに設定する方法</title>
      <link>/posts/wp/120/</link>
      <pubDate>Tue, 20 Oct 2015 20:25:57 +0000</pubDate>
      
      <guid>/posts/wp/120/</guid>
      <description>COMODOの証明書を購入した後の設定が複雑だったので、まとめました。
購入手順についてはSSL購入サイトを見れば分かると思うので割愛します。
■環境
CentOS 7.1.1503
httpd 2.4.6-31.el7.centos.1
mod_ssl 1:2.4.6-31.el7.centos.1
openssl 1:1.0.1e-42.el7.9
■必要なもの
証明書購入時に作成した秘密鍵（yourdomain_com.keyとする）
証明書購入後にメールで送られてきた証明書たち
・yourdomain_com.crt
・COMODORSADomainValidationSecureServerCA.crt
・COMODORSAAddTrustCA.crt
・AddTrustExternalCARoot.crt
まず、上記必要なもの全てを設定するサーバにアップロードしておきます。
場所はどこでも良いのですが、本例では「/etc/pki/comodo/」配下に格納したとします。
そして、メールで送られてきた証明書のうち自分のドメイン名がファイル名に入っていない３つを連結します。
連結は以下のコマンドで実施できます。連結する順番は以下順を守ってください。
なお、連結後のファイル名（以下例ではyourdomain_com.ca_bundle）は任意です。
# cat COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &amp;gt; yourdomain_com.ca_bundle ApacheのSSL設定ファイルを編集し、以下の行を修正します。
(/etc/httpd/conf.d/ssl.conf)
SSLCertificateFile /etc/pki/comodo/yourdomain_com.crt SSLCertificateKeyFile /etc/pki/comodo/yourdomain_com.key SSLCertificateChainFile /etc/pki/comodo/yourdomain_com.ca_bundle Apacheの設定を再読み込みします。
# systemctl reload httpd これでSSLの設定が反映されるはずです。
もし駄目だったら、Apacheの再起動をしてみてください。
# systemctl restart httpd </description>
    </item>
    
    <item>
      <title>CentOS7のsshd設定（セキュリティ）</title>
      <link>/posts/wp/106/</link>
      <pubDate>Mon, 19 Oct 2015 21:52:24 +0000</pubDate>
      
      <guid>/posts/wp/106/</guid>
      <description>サーバへのsshログインについて、以下の設定をします
・sshポートの変更
・ルート権限でのログインを無効化
・ルート権限にsuできるアカウントの制限
■環境
CentOS 7.1.1503
Openssh 6.6.1
以下の設定でポート番号変更とルート権限ログインの無効化を実施します
以下の行を修正（なければ追加）してください
(/etc/ssh/sshd_config)
Port 1234　※任意の番号 PermitRootLogin no 「wheel」グループのアカウントを作成します
# useradd testuser　※任意のアカウント（既存のアカウントを使うなら不要） # usermod -g wheel -G wheel testuser 以下の設定でルート権限にsuできるグループを「wheel」に限定します
以下の行を修正（なければ追加）してください
(/etc/pam.d/su)
auth required pam_wheel.so use_uid 以上で設定は完了ですが、設定をしたターミナルを閉じる前に新規ターミナルを立ち上げて
上記wheelグループに設定したアカウントにてsshログイン＆suが出来ることを確認してください。
確認前に設定したターミナルを閉じてしまうと、設定に失敗していた場合に最悪だとルート権限になれなくなります。</description>
    </item>
    
    <item>
      <title>PHPで文字化けが直らない場合の対処</title>
      <link>/posts/wp/83/</link>
      <pubDate>Tue, 06 Oct 2015 21:38:07 +0000</pubDate>
      
      <guid>/posts/wp/83/</guid>
      <description>■環境
CentOS 6.6
Apache2.2
日本語が文字化けするのでphpのソースで以下の記載をしていました。
setlocale(LC_ALL, &#39;ja_JP.UTF-8&#39;); これでも文字化けが直っていたので良いのですが、
この対応方法だと同サーバにてアプリケーションを作成する度に記載が必要です。
なので、デフォルトで「ja_JP.UTF-8」を設定しました。
①sysconfigで設定する方法
/etc/sysconfig/httpdで以下の設定をすれば直りました。
#HTTPD_LANG=C HTTPD_LANG=ja_JP.UTF-8 ②php.iniで設定する方法
/etc/php.iniで以下の設定をすれば良いという記事を見ました。
私の環境では以下の設定をしても文字化けは解消しなかったのですが、念のため載せておきます。
;intl.default_locale = intl.default_locale =ja_JP.UTF-8 </description>
    </item>
    
    <item>
      <title>【Ubuntu】JDKとNetBeans IDEのインストール</title>
      <link>/posts/wp/69/</link>
      <pubDate>Wed, 16 Sep 2015 23:18:43 +0000</pubDate>
      
      <guid>/posts/wp/69/</guid>
      <description>開発環境としてUbuntuにJDKとNetBeansをインストールします。
■環境
Ubuntu 15.04
openjdk 8
NetBeans 8.0.2
JDKがインストールされているか確認し、なければインストールします。
$ javac -version プログラム &#39;javac&#39; は以下のパッケージで見つかりました: * default-jdk * ecj * gcj-4.9-jdk * openjdk-7-jdk * gcj-4.8-jdk * openjdk-6-jdk * openjdk-8-jdk 次の操作を試してください: sudo apt-get install &amp;lt;選択したパッケージ&amp;gt; $ sudo apt-get install openjdk-8-jdk $ javac -version Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar javac 1.8.0_45-internal https://netbeans.org/downloads/index.htmlよりNetBeansをダウンロードします。
各開発言語毎に用意されていますが、迷う様なら「すべて」を選択すれば良いと思います。
私は使用言語が特定の言語に限らなかったので「すべて」を選択しました。
ダウンロードしたNetBeansのインストールスクリプトを実行します。
$ cd ~/Downloads $ sh netbeans-8.0.2-linux.sh インストーラが立ち上がるので、必要に応じてインストール場所を変えたりしながら進めていきます。
インストーラでの処理が終わったら、インストール完了です。
ランチャーにて「NetBeans」で検索すれば出てくるようになります。</description>
    </item>
    
    <item>
      <title>【Ubuntu】FlashPlayerのインストール</title>
      <link>/posts/wp/57/</link>
      <pubDate>Thu, 27 Aug 2015 21:56:00 +0000</pubDate>
      
      <guid>/posts/wp/57/</guid>
      <description>UbuntuのブラウザでFlashPlayerをインストールする手順です。
■Firefoxの場合
AdobeよりFlashPlayerをダウンロードします。
この記事を書いた時は「install_flash_player_11_linux.x86_64.tar.gz」をダウンロードしました。
ダウンロードしたファイルを解凍してできたディレクトリに入り、
必要なファイルをコピーしていきます。
sudo cp -a libflashplayer.so /usr/lib/chromium-browser/libs/. sudo cp -a usr/* /usr/. ■Cromiumの場合
以下のコマンドだけでインストールできます。&amp;lt;del datetime=&amp;quot;2016-06-21T14:36:14+00:00&amp;quot;&amp;gt;sudo apt-get install pepperflashplugin-nonfree&amp;lt;/del&amp;gt; &amp;lt;del datetime=&amp;quot;2016-05-04T14:36:14+00:00&amp;quot;&amp;gt;sudo update-pepperflashplugin-nonfree --install&amp;lt;/del&amp;gt; ※（2016/6/21編集）上記コマンドでのインストールでは最新版のFlashプレイヤーが取得できなくなています。
Adobeの公式サイトでダウンロードできるので、そちらから入手しましょう。</description>
    </item>
    
    <item>
      <title>【Ubuntu】ホームディレクトリを日本語から英語にする</title>
      <link>/posts/wp/48/</link>
      <pubDate>Thu, 27 Aug 2015 21:36:09 +0000</pubDate>
      
      <guid>/posts/wp/48/</guid>
      <description>日本語版Ubuntuをインストールすると、ホームディレクトリ内のディレクトリ名が日本語になっています。 コマンドラインで操作する時に日本語があると不都合があるので、英語表記に変更します。 例）音楽⇛Music
ターミナルを開いて、以下コマンドを実行します。
LANG=C xdg-user-dirs-gtk-update 確認ダイアログが表示されるので『Update Names』ボタンを押下します。
これでディレクトリ名が英語になります。
PCを再起動後、再度確認ダイアログが表示されるので
『次回から表示しない』をチェックして『古い名前のままにする』を押下します。
これで今後は再起動後もディレクトリ名が英語のままとなります。</description>
    </item>
    
    <item>
      <title>メールドメインに「localhost」と付いてしまう</title>
      <link>/posts/wp/40/</link>
      <pubDate>Sat, 08 Aug 2015 16:52:42 +0000</pubDate>
      
      <guid>/posts/wp/40/</guid>
      <description>■環境
CentOS 7
postfix 2.10.1
postfixで構築したメールサーバからメールを送信した場合に
設定は間違えていないはずなのに、送信メールのドメイン部分（@の後ろ）に「localhost」が付いてしまう時の対処法です。
例えば、『@sample.com』で送りたいのに『@localhost.sample.com』となってしまう場合です。
※注意
「設定は間違えていないはず」と思っているだけで本当は何かが間違っているのだと思います。
postfixの設定以外にも環境ファイルの設定値が悪い場合などもありますが、その調査をしていられない時の
暫定対処だと思ってください。
postfixの設定ファイル(/etc/postfix/main.cf)に以下の行を追加してください。
masquerade_domains = sample.com これで『sample.com』より前の部分はカットされます。</description>
    </item>
    
    <item>
      <title>メールサーバ構築（②dovecot編）</title>
      <link>/posts/wp/18/</link>
      <pubDate>Sat, 08 Aug 2015 15:35:56 +0000</pubDate>
      
      <guid>/posts/wp/18/</guid>
      <description>■環境
CentOS 7
dovecot 2.2.10
事前に①postfix編が終わっている前提とします。
必要な物をインストール
yum -y install dovecot メイン設定ファイルの修正(vi /etc/dovecot/dovecot.conf)
protocols = imap pop3 listen = * 認証設定ファイルの修正(vi /etc/dovecot/conf.d/10-auth.conf)
今回はパスワードファイルでの認証方式としてます
#disable_plaintext_auth = yes auth_mechanisms = plain login digest-md5 cram-md5 #!include auth-system.conf.ext !include auth-passwdfile.conf.ext メール設定ファイルの修正(vi /etc/dovecot/conf.d/10-mail.conf)
mail_location = maildir:~/Maildir マスター設定ファイルの修正(vi /etc/dovecot/conf.d/10-master.conf)
unix_listener /var/spool/postfix/private/auth { mode = 0666 user = postfix group = postfix } SSL設定ファイルの修正(vi /etc/dovecot/conf.d/10-ssl.conf)
ssl_cert = &amp;lt;/etc/pki/sample/sample.crt ssl_key = &amp;lt;/etc/pki/sample/sample.key ssl_ca = &amp;lt;/etc/pki/sample/sampleCA.crt 認証パスワードのCRAM-MD5で暗号化した文字列を生成します。
doveadm pw -s CRAM-MD5 Enter new password: 設定したいパスワードを入力 Retype new password: 設定したいパスワードを再入力 {CRAM-MD5}256f41a2b646bf66ae494370947623fd7a1f496442c81a0fdd9c2b1d994eb816 対象アカウントの情報を確認します。</description>
    </item>
    
    <item>
      <title>メールサーバ構築（①postfix編）</title>
      <link>/posts/wp/9/</link>
      <pubDate>Thu, 06 Aug 2015 23:28:32 +0000</pubDate>
      
      <guid>/posts/wp/9/</guid>
      <description>■環境
CentOS 7
postfix 2.10.1
メールアカウントはpasswdに登録されているアカウントを利用します。
メール専用のアカウントは以下コマンドで作成してください。（SSHログイン不可）
useradd -s /sbin/nologin demouser1 必要な物をインストール
yum -y install postfix cyrus-sasl cyrus-sasl-plain cyrus-sasl-md5 メイン設定ファイルの修正(vi /etc/postfix/main.cf)
以下、設定変更部分
myhostname = mail.sample.com mydomain = sample.com myorigin = $mydomain inet_interfaces = all mynetworks = 192.168.0.0/23, 127.0.0.0/8 relay_domains = $mydestination home_mailbox = Maildir/ smtpd_banner = $myhostname ESMTP unknown 以下、設定追加部分
※SSL証明書の秘密鍵はパスワード無しとします
smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination smtpd_tls_cert_file = /etc/pki/sample/sample.crt smtpd_tls_key_file = /etc/pki/sample/sample.key smtpd_tls_CAfile = /etc/pki/sample/sampleCA.</description>
    </item>
    
  </channel>
</rss>
